{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    const maxPublications = Math.max(...this.nameAuthors.map(author => author.publications.length));\n    const nodesData = this.nameAuthors.map(author => ({\n      id: author.researcher,\n      label: `${author.researcher} (${author.publications.length})` // Display name and number of publications inside the node\n    }));\n\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getNodeOptions() {\n    const nodeOptions = {};\n    this.nameAuthors.forEach(author => {\n      nodeOptions[author.researcher] = {\n        size: author.publications.length // Set node size based on number of publications\n      };\n    });\n\n    return nodeOptions;\n  }\n  getEdges() {\n    const sortedAuthors = this.nameAuthors.sort((a, b) => b.publications.length - a.publications.length);\n    const authorWithMostPublications = sortedAuthors[0];\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","maxPublications","Math","max","map","author","publications","length","nodesData","id","researcher","label","nodes","getNodeOptions","nodeOptions","forEach","size","getEdges","sortedAuthors","sort","a","b","authorWithMostPublications","edgesData","filter","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors: any = [];\n\n  getNodes(): DataSet<Node> {\n    const maxPublications = Math.max(...this.nameAuthors.map((author: { publications: any; }) => author.publications.length));\n    const nodesData: Node[] = this.nameAuthors.map((author: { researcher: any; publications: any; }) => ({\n      id: author.researcher,\n      label: `${author.researcher} (${author.publications.length})`, // Display name and number of publications inside the node\n    }));\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n\n  getNodeOptions(): any {\n    const nodeOptions: any = {};\n\n    this.nameAuthors.forEach((author: { researcher: any; publications: any; }) => {\n      nodeOptions[author.researcher] = {\n        size: author.publications.length // Set node size based on number of publications\n      };\n    });\n\n    return nodeOptions;\n  }\n\n  getEdges(): DataSet<Edge> {\n    const sortedAuthors = this.nameAuthors.sort((a: { publications: any[]; }, b: { publications: any[]; }) => b.publications.length - a.publications.length);\n    const authorWithMostPublications = sortedAuthors[0];\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n}"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAInE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAQ,EAAE;;EAE5BC,QAAQA,CAAA;IACN,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACJ,WAAW,CAACK,GAAG,CAAEC,MAA8B,IAAKA,MAAM,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC;IACzH,MAAMC,SAAS,GAAW,IAAI,CAACT,WAAW,CAACK,GAAG,CAAEC,MAA+C,KAAM;MACnGI,EAAE,EAAEJ,MAAM,CAACK,UAAU;MACrBC,KAAK,EAAE,GAAGN,MAAM,CAACK,UAAU,KAAKL,MAAM,CAACC,YAAY,CAACC,MAAM,GAAG,CAAE;KAChE,CAAC,CAAC;;IAEH,MAAMK,KAAK,GAAkB,IAAIhB,OAAO,CAACY,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAGAC,cAAcA,CAAA;IACZ,MAAMC,WAAW,GAAQ,EAAE;IAE3B,IAAI,CAACf,WAAW,CAACgB,OAAO,CAAEV,MAA+C,IAAI;MAC3ES,WAAW,CAACT,MAAM,CAACK,UAAU,CAAC,GAAG;QAC/BM,IAAI,EAAEX,MAAM,CAACC,YAAY,CAACC,MAAM,CAAC;OAClC;IACH,CAAC,CAAC;;IAEF,OAAOO,WAAW;EACpB;EAEAG,QAAQA,CAAA;IACN,MAAMC,aAAa,GAAG,IAAI,CAACnB,WAAW,CAACoB,IAAI,CAAC,CAACC,CAA2B,EAAEC,CAA2B,KAAKA,CAAC,CAACf,YAAY,CAACC,MAAM,GAAGa,CAAC,CAACd,YAAY,CAACC,MAAM,CAAC;IACxJ,MAAMe,0BAA0B,GAAGJ,aAAa,CAAC,CAAC,CAAC;IACnD,MAAMK,SAAS,GAAW,IAAI,CAACxB,WAAW,CAACyB,MAAM,CAAEnB,MAA4B,IAC7EA,MAAM,CAACK,UAAU,KAAKY,0BAA0B,CAACZ,UAAU,CAC5D,CAACN,GAAG,CAAEC,MAA4B,KAChC;MAAEoB,IAAI,EAAEH,0BAA0B,CAACZ,UAAU;MAAEgB,EAAE,EAAErB,MAAM,CAACK;IAAU,CAAE,CAAC,CACzE;IAED,MAAMiB,KAAK,GAAkB,IAAI/B,OAAO,CAAC2B,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBAvCU/B,qBAAqB;EAAA;EAAA,QAAAgC,EAAA,G;WAArBhC,qBAAqB;IAAAiC,OAAA,EAArBjC,qBAAqB,CAAAkC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/info.service\";\nChart.register(...registerables);\nexport let InfoComponent = /*#__PURE__*/(() => {\n  class InfoComponent {\n    constructor(infoService) {\n      this.infoService = infoService;\n      this.combinedData = [];\n      this.allPublications = 0;\n      this.publicationsCombined = [];\n      this.authorsCombined = [];\n      this.conferencesCombined = [];\n      this.allAuthors = 0;\n      this.allConferences = 0;\n    }\n    ngOnInit() {\n      this.main();\n    }\n    createInfo() {\n      //Publications by Year\n      const Publicationsyears = this.infoService.PublicationsByYear.map(item => item.yearName);\n      this.generateBarChart('barChart1', 'Publications by Year', Publicationsyears, this.infoService.PublicationsCombined);\n      //Authors by Year\n      const Authorsyears = this.infoService.AuthorsByYear.map(item => item.yearName);\n      this.generateBarChart('barChart2', 'Authors by Year', Authorsyears, this.infoService.PublicationsCombined);\n      //Conferences by Year\n      const Conferencesyears = this.infoService.ConferencesByYear.map(item => item.yearName);\n      this.generateBarChart('barChart1', 'Conferences by Year', Conferencesyears, this.infoService.ConferencesCombineds);\n      this.allAuthors = this.infoService.AllAuthors;\n      this.allPublications = this.infoService.AllPublications;\n      this.allConferences = this.infoService.AllConferences;\n    }\n    combineData() {\n      // Creamos un conjunto para almacenar los años únicos\n      const uniqueYears = new Set();\n      // Agregamos los años de cada consulta al conjunto\n      this.infoService.PublicationsByYear.forEach(item => uniqueYears.add(item.yearName));\n      this.infoService.AuthorsByYear.forEach(item => uniqueYears.add(item.yearName));\n      this.infoService.ConferencesByYear.forEach(item => uniqueYears.add(item.yearName));\n      // Convertimos el conjunto a un arreglo de años únicos\n      const years = Array.from(uniqueYears);\n      // Iteramos sobre los años únicos y llenamos los datos combinados\n      years.forEach(year => {\n        const combinedItem = {\n          yearName: year,\n          allConferences: 0,\n          allAuthors: 0,\n          allPublications: 0\n        };\n        // Buscamos y asignamos los valores correspondientes para cada año\n        const publicationsData = this.infoService.PublicationsByYear.find(item => item.yearName === year);\n        if (publicationsData) {\n          combinedItem.allPublications = publicationsData.allPublications;\n        }\n        const authorsData = this.infoService.AuthorsByYear.find(item => item.yearName === year);\n        if (authorsData) {\n          combinedItem.allAuthors = authorsData.allAuthors;\n        }\n        const conferencesData = this.infoService.ConferencesByYear.find(item => item.yearName === year);\n        if (conferencesData) {\n          combinedItem.allConferences = conferencesData.allConferences;\n        }\n        this.combinedData.push(combinedItem);\n      });\n    }\n    generateBarChart(idChart, label, labels, data) {\n      this.barChart = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: label,\n            data: data,\n            backgroundColor: 'rgb(0, 22, 68)',\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n    generateBarChartTriple(idChart, label, labels, authorsData, conferencesData, publicationsData) {\n      this.barChart = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Authors',\n            data: authorsData,\n            backgroundColor: 'rgba(255, 99, 132, 1)',\n            borderColor: 'rgb(255, 99, 132)',\n            borderWidth: 1\n          }, {\n            label: 'Conferences',\n            data: conferencesData,\n            backgroundColor: 'rgba(54, 162, 235, 1)',\n            borderColor: 'rgb(54, 162, 235)',\n            borderWidth: 1\n          }, {\n            label: 'Publications',\n            data: publicationsData,\n            backgroundColor: 'rgba(255, 206, 86, 1)',\n            borderColor: 'rgb(255, 206, 86)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            },\n            x: {\n              stacked: true\n            }\n          }\n        }\n      });\n    }\n    waitForData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        while (_this.infoService.PublicationsByYear.length < 1 || _this.infoService.ConferencesByYear.length < 1 || _this.infoService.AuthorsByYear.length < 1) {\n          // Espera 1 segundo antes de verificar de nuevo\n          yield new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      })();\n    }\n    main() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          //Publications by Year\n          const Publicationsyears = _this2.infoService.PublicationsByYear.map(item => item.yearName);\n          _this2.generateBarChart('barChart1', 'Publications by Year', Publicationsyears, _this2.infoService.PublicationsCombined);\n          //Authors by Year\n          const Authorsyears = _this2.infoService.AuthorsByYear.map(item => item.yearName);\n          _this2.generateBarChart('barChart2', 'Authors by Year', Authorsyears, _this2.infoService.AuthorsCombined);\n          //Conferences by Year\n          const Conferencesyears = _this2.infoService.ConferencesByYear.map(item => item.yearName);\n          _this2.generateBarChart('barChart3', 'Conferences by Year', Conferencesyears, _this2.infoService.ConferencesCombineds);\n          _this2.allAuthors = _this2.infoService.AllAuthors;\n          _this2.allPublications = _this2.infoService.AllPublications;\n          _this2.allConferences = _this2.infoService.AllConferences;\n          yield _this2.waitForData();\n          yield _this2.combineData();\n          _this2.generateBarChartTriple('tripleBarChart', 'Triple Bar Chart', _this2.combinedData.map(item => item.yearName), _this2.combinedData.map(item => item.allAuthors), _this2.combinedData.map(item => item.allConferences), _this2.combinedData.map(item => item.allPublications));\n        } catch (error) {\n          console.error('Error in getData:', error);\n        }\n      })();\n    }\n    static #_ = this.ɵfac = function InfoComponent_Factory(t) {\n      return new (t || InfoComponent)(i0.ɵɵdirectiveInject(i1.InfoService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: InfoComponent,\n      selectors: [[\"info-config\"]],\n      decls: 32,\n      vars: 3,\n      consts: [[1, \"allNumbers\"], [1, \"click-element\"], [1, \"flex-container\"], [1, \"flex-item\"], [1, \"canvas-container\"], [\"id\", \"barChart1\"], [\"id\", \"barChart2\"], [\"id\", \"barChart3\"], [\"id\", \"tripleBarChart\"]],\n      template: function InfoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"ul\")(2, \"li\", 1);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"li\", 1);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"li\", 1);\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"div\", 3)(10, \"h3\");\n          i0.ɵɵtext(11, \"Number of Publications by Year\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 4);\n          i0.ɵɵelement(13, \"canvas\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\", 2)(15, \"div\", 3)(16, \"h3\");\n          i0.ɵɵtext(17, \"Number of Authors by Year\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\", 4);\n          i0.ɵɵelement(19, \"canvas\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(20, \"div\", 2)(21, \"div\", 3)(22, \"h3\");\n          i0.ɵɵtext(23, \"Number of Conferences by Year\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 4);\n          i0.ɵɵelement(25, \"canvas\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(26, \"div\", 2)(27, \"div\", 3)(28, \"h3\");\n          i0.ɵɵtext(29, \"Number of Conferences, Authors and Publications by Year\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"div\", 4);\n          i0.ɵɵelement(31, \"canvas\", 8);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"# of Publications: \", ctx.allPublications, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"# of Authors: \", ctx.allAuthors, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"# of Conferences: \", ctx.allConferences, \"\");\n        }\n      },\n      styles: [\"@charset \\\"UTF-8\\\";.flex-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;overflow:auto}.flex-item[_ngcontent-%COMP%]{padding:20px;margin-bottom:50px}.canvas-container[_ngcontent-%COMP%]{border:2px solid rgb(0,22,68);padding:20px;width:95%}canvas[_ngcontent-%COMP%]{max-width:100%;height:auto;display:block}.allNumbers[_ngcontent-%COMP%]{font-size:20px}.click-element[_ngcontent-%COMP%]{cursor:pointer;margin-bottom:5px}.click-element[_ngcontent-%COMP%]:hover{transform:scale(1.05);transition:transform .3s ease;font-weight:700}\"]\n    });\n  }\n  return InfoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/api';\n  }\n  obtenerNodosFiltradosConference(filtros) {\n    return this.http.post(`${this.baseUrl}/filterConferences`, {\n      filterNames: filtros\n    });\n  }\n  buscarVenues(term) {\n    const params = new HttpParams().set('term', term);\n    return this.http.get(`${this.baseUrl}/autocompleteConference/${term}`, {\n      params\n    });\n  }\n  obtenerNodosFiltradosJournal(name) {\n    return this.http.get(`${this.baseUrl}/filterJournals/${name}`);\n  }\n  obtenerEstadisticas() {\n    const url = `${this.baseUrl}/statistics`;\n    return this.http.get(url);\n  }\n  generarconf(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/config`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerConfig() {\n    const url = `${this.baseUrl}/config`;\n    return this.http.get(url);\n  }\n  obtenerResearchersConference(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/researchersconference`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerResearchersJournals(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/researchersjournals`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerPapers(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/papers`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerColaboraciones(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/colaboraciones`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerAuthorsPapers(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/AuthorsPapers`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerAuthorsNames(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/SearchNames`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerAuthorsGrade(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/AuthorsDegree`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerbooks(titulosSeleccionados, venue) {\n    console.log(\"rolerher\" + venue);\n    return this.http.post(`${this.baseUrl}/searchbook`, {\n      titulosSeleccionados,\n      venue\n    });\n  }\n  obtenerSchools() {\n    return this.http.post(`${this.baseUrl}/schools`, {});\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","ApiService","constructor","http","baseUrl","obtenerNodosFiltradosConference","filtros","post","filterNames","buscarVenues","term","params","set","get","obtenerNodosFiltradosJournal","name","obtenerEstadisticas","url","generarconf","titulosSeleccionados","obtenerConfig","obtenerResearchersConference","obtenerResearchersJournals","obtenerPapers","option","venue","obtenerColaboraciones","obtenerAuthorsPapers","obtenerAuthorsNames","obtenerAuthorsGrade","obtenerbooks","console","log","obtenerSchools","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {}\n\n  obtenerNodosFiltradosConference(filtros: string[]): Observable<string[]> {\n    return this.http.post<string[]>(`${this.baseUrl}/filterConferences`, { filterNames: filtros });\n  }\n\n  buscarVenues(term: string): Observable<string[]> {\n    const params = new HttpParams().set('term', term);\n    return this.http.get<string[]>(`${this.baseUrl}/autocompleteConference/${term}`, { params });\n  }\n\n  obtenerNodosFiltradosJournal(name: string): Observable<string[]> {\n    return this.http.get<string[]>(`${this.baseUrl}/filterJournals/${name}`);\n  }\n\n\n  obtenerEstadisticas(): Observable<any> {\n    const url = `${this.baseUrl}/statistics`;\n    return this.http.get<any>(url);\n  }\n\n\n  generarconf(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/config`, { titulosSeleccionados });\n  }\n\n  obtenerConfig(): Observable<any> {\n    const url = `${this.baseUrl}/config`;\n    return this.http.get<any>(url);\n  }\n\n  obtenerResearchersConference(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/researchersconference`, { titulosSeleccionados });\n  }\n\n  obtenerResearchersJournals(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/researchersjournals`, { titulosSeleccionados });\n  }\n\n  obtenerPapers(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/papers`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerColaboraciones(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/colaboraciones`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerAuthorsPapers(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/AuthorsPapers`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerAuthorsNames(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/SearchNames`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerAuthorsGrade(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/AuthorsDegree`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerbooks(titulosSeleccionados: any[], venue: string[]): Observable<any> {\n    console.log(\"rolerher\"+venue)\n    return this.http.post<any>(`${this.baseUrl}/searchbook`, { titulosSeleccionados, venue});\n  }\n\n  obtenerSchools(): Observable<any[]> {\n    return this.http.post<any[]>(`${this.baseUrl}/schools`, {});\n  }\n  \n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
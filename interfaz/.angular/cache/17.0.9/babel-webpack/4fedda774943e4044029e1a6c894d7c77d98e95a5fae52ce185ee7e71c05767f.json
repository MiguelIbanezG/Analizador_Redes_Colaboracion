{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    // Obtener al autor con más publicaciones\n    const authorWithMostPublications = this.nameAuthors.reduce((prev, current) => prev.publications.length > current.publications.length ? prev : current);\n    // Calcular la distancia de cada autor al autor principal\n    const distances = {};\n    this.nameAuthors.forEach(author => {\n      const distance = author === authorWithMostPublications ? 0 : 1 / author.publications.length;\n      distances[author.researcher] = distance;\n    });\n    // Obtener el valor máximo de distancia\n    const maxDistance = Math.max(...Object.values(distances));\n    // Mapear los nodos ajustando el tamaño en función de las publicaciones y la distancia al autor principal\n    const nodesData = this.nameAuthors.map(author => {\n      const value = Math.max(author.publications.length * 10, 30); // Tamaño mínimo de nodo: 30\n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: Math.floor(author.publications.length) + 12,\n          color: \"#ffffff\"\n        }\n      };\n    });\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a, b) => b.publications.length - a.publications.length);\n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","authorWithMostPublications","reduce","prev","current","publications","length","distances","forEach","author","distance","researcher","maxDistance","Math","max","Object","values","nodesData","map","value","id","label","font","size","floor","color","nodes","getEdges","sortedAuthors","sort","a","b","edgesData","filter","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    // Obtener al autor con más publicaciones\n    const authorWithMostPublications = this.nameAuthors.reduce((prev: any, current: any) => (prev.publications.length > current.publications.length) ? prev : current);\n\n    // Calcular la distancia de cada autor al autor principal\n    const distances: { [key: string]: number } = {};\n    this.nameAuthors.forEach((author: any) => {\n      const distance = author === authorWithMostPublications ? 0 : 1 / author.publications.length;\n      distances[author.researcher] = distance;\n    });\n\n    // Obtener el valor máximo de distancia\n    const maxDistance = Math.max(...Object.values(distances));\n\n    // Mapear los nodos ajustando el tamaño en función de las publicaciones y la distancia al autor principal\n    const nodesData: Node[] = this.nameAuthors.map((author: any) => {\n      const value = Math.max(author.publications.length * 10, 30); // Tamaño mínimo de nodo: 30\n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: Math.floor(author.publications.length) + 12, // Tamaño de fuente ajustado\n          color: \"#ffffff\"\n        },\n\n      };\n    });\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  getEdges(): DataSet<Edge> {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a: { publications: string | any[]; }, b: { publications: string | any[]; }) => b.publications.length - a.publications.length);\n  \n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n  \n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n  \n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n  \n\n}\n"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAGnE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAO,EAAE;;EAE3BC,QAAQA,CAAA;IACN;IACA,MAAMC,0BAA0B,GAAG,IAAI,CAACF,WAAW,CAACG,MAAM,CAAC,CAACC,IAAS,EAAEC,OAAY,KAAMD,IAAI,CAACE,YAAY,CAACC,MAAM,GAAGF,OAAO,CAACC,YAAY,CAACC,MAAM,GAAIH,IAAI,GAAGC,OAAO,CAAC;IAElK;IACA,MAAMG,SAAS,GAA8B,EAAE;IAC/C,IAAI,CAACR,WAAW,CAACS,OAAO,CAAEC,MAAW,IAAI;MACvC,MAAMC,QAAQ,GAAGD,MAAM,KAAKR,0BAA0B,GAAG,CAAC,GAAG,CAAC,GAAGQ,MAAM,CAACJ,YAAY,CAACC,MAAM;MAC3FC,SAAS,CAACE,MAAM,CAACE,UAAU,CAAC,GAAGD,QAAQ;IACzC,CAAC,CAAC;IAEF;IACA,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGC,MAAM,CAACC,MAAM,CAACT,SAAS,CAAC,CAAC;IAEzD;IACA,MAAMU,SAAS,GAAW,IAAI,CAAClB,WAAW,CAACmB,GAAG,CAAET,MAAW,IAAI;MAC7D,MAAMU,KAAK,GAAGN,IAAI,CAACC,GAAG,CAACL,MAAM,CAACJ,YAAY,CAACC,MAAM,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;MAC7D,OAAO;QACLc,EAAE,EAAEX,MAAM,CAACE,UAAU;QACrBU,KAAK,EAAEZ,MAAM,CAACE,UAAU;QACxBW,IAAI,EAAE;UACJC,IAAI,EAAEV,IAAI,CAACW,KAAK,CAACf,MAAM,CAACJ,YAAY,CAACC,MAAM,CAAC,GAAG,EAAE;UACjDmB,KAAK,EAAE;;OAGV;IACH,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAkB,IAAI9B,OAAO,CAACqB,SAAS,CAAC;IACnD,OAAOS,KAAK;EACd;EAEAC,QAAQA,CAAA;IACN;IACA,MAAMC,aAAa,GAAG,IAAI,CAAC7B,WAAW,CAAC8B,IAAI,CAAC,CAACC,CAAoC,EAAEC,CAAoC,KAAKA,CAAC,CAAC1B,YAAY,CAACC,MAAM,GAAGwB,CAAC,CAACzB,YAAY,CAACC,MAAM,CAAC;IAE1K;IACA,MAAML,0BAA0B,GAAG2B,aAAa,CAAC,CAAC,CAAC;IAEnD;IACA,MAAMI,SAAS,GAAW,IAAI,CAACjC,WAAW,CAACkC,MAAM,CAAExB,MAA4B,IAC7EA,MAAM,CAACE,UAAU,KAAKV,0BAA0B,CAACU,UAAU,CAC5D,CAACO,GAAG,CAAET,MAA4B,KAChC;MAAEyB,IAAI,EAAEjC,0BAA0B,CAACU,UAAU;MAAEwB,EAAE,EAAE1B,MAAM,CAACE;IAAU,CAAE,CAAC,CACzE;IAED,MAAMyB,KAAK,GAAkB,IAAIxC,OAAO,CAACoC,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBApDUxC,qBAAqB;EAAA;EAAA,QAAAyC,EAAA,G;WAArBzC,qBAAqB;IAAA0C,OAAA,EAArB1C,qBAAqB,CAAA2C;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    const maxPublications = Math.max(...this.nameAuthors.map(author => author.publications.length));\n    const nodesData = this.nameAuthors.map(author => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications.length,\n      scaling: {\n        min: 10,\n        max: 100 + 50 * (author.publications.length / maxPublications) // Maximum node size, adjusted based on publications\n      }\n    }));\n\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    const sortedAuthors = this.nameAuthors.sort((a, b) => b.publications.length - a.publications.length);\n    const authorWithMostPublications = sortedAuthors[0];\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","maxPublications","Math","max","map","author","publications","length","nodesData","id","researcher","label","value","scaling","min","nodes","getEdges","sortedAuthors","sort","a","b","authorWithMostPublications","edgesData","filter","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    const maxPublications = Math.max(...this.nameAuthors.map((author: { publications: any; }) => author.publications.length));\n    const nodesData: Node[] = this.nameAuthors.map((author: { researcher: any; publications: any; }) => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications.length, // Use length of publications as node value\n      scaling: {\n        min: 10, // Minimum node size\n        max: 100 + 50 * (author.publications.length / maxPublications) // Maximum node size, adjusted based on publications\n      }\n    }));\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  getEdges(): DataSet<Edge> {\n    const sortedAuthors = this.nameAuthors.sort((a: { publications: any[]; }, b: { publications: any[]; }) => b.publications.length - a.publications.length);\n    const authorWithMostPublications = sortedAuthors[0];\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n}"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAInE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAO,EAAE;;EAE3BC,QAAQA,CAAA;IACN,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACJ,WAAW,CAACK,GAAG,CAAEC,MAA8B,IAAKA,MAAM,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC;IACzH,MAAMC,SAAS,GAAW,IAAI,CAACT,WAAW,CAACK,GAAG,CAAEC,MAA+C,KAAM;MACnGI,EAAE,EAAEJ,MAAM,CAACK,UAAU;MACrBC,KAAK,EAAEN,MAAM,CAACK,UAAU;MACxBE,KAAK,EAAEP,MAAM,CAACC,YAAY,CAACC,MAAM;MACjCM,OAAO,EAAE;QACPC,GAAG,EAAE,EAAE;QACPX,GAAG,EAAE,GAAG,GAAG,EAAE,IAAIE,MAAM,CAACC,YAAY,CAACC,MAAM,GAAGN,eAAe,CAAC,CAAC;;KAElE,CAAC,CAAC;;IAEH,MAAMc,KAAK,GAAkB,IAAInB,OAAO,CAACY,SAAS,CAAC;IACnD,OAAOO,KAAK;EACd;EAEAC,QAAQA,CAAA;IACN,MAAMC,aAAa,GAAG,IAAI,CAAClB,WAAW,CAACmB,IAAI,CAAC,CAACC,CAA2B,EAAEC,CAA2B,KAAKA,CAAC,CAACd,YAAY,CAACC,MAAM,GAAGY,CAAC,CAACb,YAAY,CAACC,MAAM,CAAC;IACxJ,MAAMc,0BAA0B,GAAGJ,aAAa,CAAC,CAAC,CAAC;IACnD,MAAMK,SAAS,GAAW,IAAI,CAACvB,WAAW,CAACwB,MAAM,CAAElB,MAA4B,IAC7EA,MAAM,CAACK,UAAU,KAAKW,0BAA0B,CAACX,UAAU,CAC5D,CAACN,GAAG,CAAEC,MAA4B,KAChC;MAAEmB,IAAI,EAAEH,0BAA0B,CAACX,UAAU;MAAEe,EAAE,EAAEpB,MAAM,CAACK;IAAU,CAAE,CAAC,CACzE;IAED,MAAMgB,KAAK,GAAkB,IAAI9B,OAAO,CAAC0B,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBA/BU9B,qBAAqB;EAAA;EAAA,QAAA+B,EAAA,G;WAArB/B,qBAAqB;IAAAgC,OAAA,EAArBhC,qBAAqB,CAAAiC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
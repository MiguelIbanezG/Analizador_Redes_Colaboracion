{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  //info\n  constructor(apiService, router, stadisticsService, modalService, infoService, homeService) {\n    this.apiService = apiService;\n    this.router = router;\n    this.stadisticsService = stadisticsService;\n    this.modalService = modalService;\n    this.infoService = infoService;\n    this.homeService = homeService;\n    this.filtersString = '';\n    this.filtersBOX = '';\n    this.filtersList = [];\n    this.communities = [];\n    this.filterComunities = [];\n    this.currentConferences = [];\n    this.nameCommunity = '';\n    this.completeConference = [];\n    this.filteredResults = [];\n    this.filteredTitles = [];\n    this.selectAll = false;\n    this.selectDecades = false;\n    this.selectDecades2 = false;\n    this.selectDecades3 = false;\n    this.selectDecades4 = false;\n    this.conferenceOption = \"main\";\n    this.showYears = false;\n    this.showDecades = false;\n    this.repeated = false;\n    this.noResultsFoundConference = false;\n    this.showButtons = false;\n  }\n  ngOnInit() {\n    this.communities = this.homeService.Communities;\n    if (this.infoService.AllPublications < 1 && this.infoService.AllAuthors < 1 && this.infoService.AllAuthors < 1) {\n      this.getPublications();\n      this.getAuthors();\n      this.getConferences();\n    }\n    this.getPublicationsbyYear();\n    console.log(\"ee\");\n    this.getAuthorsbyYear();\n    this.getConferencesbyYear();\n  }\n  autocompleteConference(term) {\n    this.apiService.autocompleteConference(term).subscribe({\n      next: response => {\n        this.completeConference = response;\n      },\n      error: error => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n  isFilteringDisabled() {\n    return this.filtersList.length === 0 && this.homeService.Communities.every(community => !community.selected);\n  }\n  completeSuggestion(suggestion) {\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n      if (this.filterComunities.includes(filtros)) {\n        this.repeated = true;\n      } else {\n        this.repeated = false;\n      }\n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: response => {\n          if (response.length !== 0) {\n            this.noResultsFoundConference = false;\n            if (!this.filtersList.includes(filtros)) {\n              this.filtersList.push(filtros);\n              const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n              this.filtersList = this.filtersList.concat(newFilters);\n              this.filtersString = this.filtersList.join(',');\n            }\n          } else {\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: response => {\n                if (response.length !== 0) {\n                  this.noResultsFoundConference = false;\n                  if (!this.filtersList.includes(filtros)) {\n                    this.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n                    this.filtersList = this.filtersList.concat(newFilters);\n                    this.filtersString = this.filtersList.join(',');\n                  }\n                  for (const filter of this.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                      this.currentConferences.push(filter);\n                    }\n                    const filtersListSinDuplicados = this.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n                    this.currentConferences = filtersListSinDuplicados;\n                  }\n                } else {\n                  this.noResultsFoundConference = true;\n                }\n              },\n              error: error => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n              console.log(this.filtersList);\n              this.currentConferences.push(filter);\n            }\n            const filtersListSinDuplicados = this.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n            this.currentConferences = filtersListSinDuplicados;\n          }\n        },\n        error: error => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n  selectSuggestion(suggestion) {\n    this.filtersBOX = suggestion;\n  }\n  deleteFilter(filter) {\n    const i = this.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.filtersList.splice(i, 1);\n      this.filtersString = this.filtersList.join(',');\n    }\n    const R = this.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.currentConferences.splice(i, 1);\n    }\n  }\n  deleteCommunity(communityToDelete) {\n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    for (const filter of communityToDelete.filtersList) {\n      const i = this.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.filtersList.splice(i, 1);\n        this.filtersString = this.filtersList.join(',');\n      }\n    }\n  }\n  createCommunity(filtersList) {\n    this.homeService.Communities.push({\n      name: this.nameCommunity,\n      filtersList: filtersList,\n      selected: false\n    });\n    this.communities = this.homeService.Communities;\n    this.closeModal();\n    this.nameCommunity = '';\n    this.filtersList = [];\n    this.currentConferences = [];\n  }\n  execFunctionsYear() {\n    this.showButtons = true;\n    this.clear();\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.toggleYears();\n  }\n  execFunctionsDecades() {\n    this.showButtons = true;\n    this.clear();\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.toggleDecades();\n  }\n  toggleYears() {\n    this.showYears = !this.showYears;\n    if (this.showDecades == true) {\n      this.showDecades = false;\n    }\n  }\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n    if (this.showYears == true) {\n      this.showYears = false;\n    }\n  }\n  clear() {\n    this.filteredTitles = [];\n  }\n  clear2() {\n    this.filteredTitles = [];\n    this.showButtons = false;\n  }\n  getFilteredNodesConference() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString = this.filtersList.join(',');\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesConference(this.filtersList).subscribe({\n      next: response => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if (this.filteredTitles.length < 1) {\n          this.filteredTitles = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  getFilteredNodesJournal() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString = this.filtersList.join(',');\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesJournal(this.filtersList).subscribe({\n      next: response => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if (this.filteredTitles.length < 1) {\n          this.filteredTitles = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  getPublicationsbyYear() {\n    console.log(\"ee\");\n    this.apiService.getPublicationsbyYear().subscribe({\n      next: response => {\n        console.log(\"ee\");\n        this.infoService.PublicationsByYear = response;\n        console.log(this.infoService.PublicationsByYear);\n      },\n      error: error => {\n        console.error('Error al obtener las publicaciones en getPublicationsbyYear:', error);\n      }\n    });\n  }\n  getAuthorsbyYear() {\n    this.apiService.getAuthorsbyYear().subscribe({\n      next: response => {\n        this.infoService.AuthorsByYear = response;\n        this.infoService.AuthorsByYear.sort((a, b) => {\n          return parseInt(a.yearName) - parseInt(b.yearName);\n        });\n      },\n      error: error => {\n        console.error('Error al obtener los autores en getAuthorsbyYear:', error);\n      }\n    });\n  }\n  getConferencesbyYear() {\n    this.apiService.getConferencesbyYear().subscribe({\n      next: response => {\n        this.infoService.ConferencesByYear = response;\n        this.infoService.ConferencesByYear.sort((a, b) => {\n          return parseInt(a.yearName) - parseInt(b.yearName);\n        });\n      },\n      error: error => {\n        console.error('Error al obtener las conferencias en getConferencesbyYear:', error);\n      }\n    });\n  }\n  getPublications() {\n    this.apiService.getPublications().subscribe({\n      next: response => {\n        if (response.length > 0) {\n          this.infoService.AllPublications = response[0].all_publications;\n        } else {\n          this.infoService.AllPublications = 0;\n        }\n      },\n      error: error => {\n        console.error('Error al obtener las publicaciones en getPublications:', error);\n      }\n    });\n  }\n  getConferences() {\n    this.apiService.getConferences().subscribe({\n      next: response => {\n        if (response.length > 0) {\n          this.infoService.AllConferences = response[0].all_conferences;\n        } else {\n          this.infoService.AllConferences = 0;\n        }\n      },\n      error: error => {\n        console.error('Error al obtener las conferencias en getConferences:', error);\n      }\n    });\n  }\n  getAuthors() {\n    this.apiService.getAuthors().subscribe({\n      next: response => {\n        if (response.length > 0) {\n          this.infoService.AllAuthors = response[0].all_authors;\n        } else {\n          this.infoService.AllAuthors = 0;\n        }\n      },\n      error: error => {\n        console.error('Error al obtener las publicaciones en getBooks:', error);\n      }\n    });\n  }\n  existSelectTitle() {\n    let select = false;\n    if (this.filteredTitles.some(titulo => titulo.selected)) {\n      select = true;\n    }\n    return select;\n  }\n  selectAlls() {\n    if (this.filteredTitles.length > 0) {\n      for (let title of this.filteredTitles) {\n        title.selected = this.selectAll;\n      }\n    }\n  }\n  selectDecade() {\n    for (let year of this.filteredTitles) {\n      if (year.title == \"1989\" || year.title == \"1990\" || year.title == \"1991\" || year.title == \"1992\" || year.title == \"1993\" || year.title == \"1994\" || year.title == \"1995\" || year.title == \"1996\" || year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      }\n    }\n  }\n  selectDecade2() {\n    for (let year of this.filteredTitles) {\n      if (year.title == \"2000\" || year.title == \"2001\" || year.title == \"2002\" || year.title == \"2003\" || year.title == \"2004\" || year.title == \"2005\" || year.title == \"2006\" || year.title == \"2007\" || year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      }\n    }\n  }\n  selectDecade3() {\n    for (let year of this.filteredTitles) {\n      if (year.title == \"2010\" || year.title == \"2011\" || year.title == \"2012\" || year.title == \"2013\" || year.title == \"2014\" || year.title == \"2015\" || year.title == \"2016\" || year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      }\n    }\n  }\n  selectDecade4() {\n    for (let year of this.filteredTitles) {\n      if (year.title == \"2020\" || year.title == \"2021\" || year.title == \"2022\" || year.title == \"2023\" || year.title == \"2024\") {\n        year.selected = this.selectDecades4;\n      }\n    }\n  }\n  titleChanged() {\n    let all = true;\n    for (let titulo of this.filteredTitles) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    for (let titulo of this.filteredTitles) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    this.selectAll = all;\n  }\n  generateStatistics() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const titles = _this.filteredTitles.filter(titulo => titulo.selected).map(titulo => titulo.pr_objeto);\n      const splitFilters = _this.filtersString.split(',').map(filtersString => filtersString.trim());\n      _this.stadisticsService.addTitles(titles), _this.stadisticsService.flagNameVenue(splitFilters);\n      _this.router.navigateByUrl('/statistics');\n    })();\n  }\n  generateConf() {\n    this.router.navigateByUrl('/config');\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template);\n  }\n  closeModal() {\n    this.modalRef?.hide();\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["Component","HomeComponent","constructor","apiService","router","stadisticsService","modalService","infoService","homeService","filtersString","filtersBOX","filtersList","communities","filterComunities","currentConferences","nameCommunity","completeConference","filteredResults","filteredTitles","selectAll","selectDecades","selectDecades2","selectDecades3","selectDecades4","conferenceOption","showYears","showDecades","repeated","noResultsFoundConference","showButtons","ngOnInit","Communities","AllPublications","AllAuthors","getPublications","getAuthors","getConferences","getPublicationsbyYear","console","log","getAuthorsbyYear","getConferencesbyYear","autocompleteConference","term","subscribe","next","response","error","isFilteringDisabled","length","every","community","selected","completeSuggestion","suggestion","trim","filtros","includes","getFilteredNodesConference","push","newFilters","filter","item","concat","join","getFilteredNodesJournal","filtersListSinDuplicados","valor","indice","self","indexOf","complete","selectSuggestion","deleteFilter","i","splice","R","deleteCommunity","communityToDelete","name","createCommunity","closeModal","execFunctionsYear","clear","toggleYears","execFunctionsDecades","toggleDecades","clear2","forEach","filterItem","value","index","map","Object","values","reduce","obj","yearNode","properties","title","pr_objeto","PublicationsByYear","AuthorsByYear","sort","a","b","parseInt","yearName","ConferencesByYear","all_publications","AllConferences","all_conferences","all_authors","existSelectTitle","select","some","titulo","selectAlls","selectDecade","year","selectDecade2","selectDecade3","selectDecade4","titleChanged","all","generateStatistics","_this","_asyncToGenerator","titles","splitFilters","split","addTitles","flagNameVenue","navigateByUrl","generateConf","openModal","template","modalRef","show","hide","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/home/home.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { Observable, Subscription, map, startWith } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { StadisticsService } from '../services/stadistics.service';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { InfoService } from '../services/info.service';\nimport { HomeService } from '../services/home.service';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n\n  filtersString : string = '';\n  filtersBOX: string = '';\n  filtersList: string[] = [];\n  communities: { name: string, filtersList: string[], selected: boolean  }[] = [];\n  filterComunities: string[] = [];\n  currentConferences: string[] = [];\n  nameCommunity: string = '';\n  completeConference: string[] = [];\n  filteredResults: string[] = [];\n  filteredTitles: { title: string, pr_objeto: any, selected: boolean }[] = [];\n  selectAll = false;\n  selectDecades = false;\n  selectDecades2 = false;\n  selectDecades3 = false;\n  selectDecades4 = false;\n  conferenceOption: string = \"main\";\n  showYears: boolean = false;\n  showDecades: boolean = false;\n  repeated: boolean = false;\n  noResultsFoundConference = false;\n  noResultsFoundJournal: boolean | undefined;\n  modalRef: BsModalRef | undefined;\n  showButtons = false;\n  filVenues: Observable<string[]> | undefined;\n\n  //info\n\n\n  constructor(\n    private apiService: ApiService, \n    private router: Router,\n    private stadisticsService: StadisticsService,\n    private modalService: BsModalService,\n    private infoService: InfoService,\n    public homeService: HomeService\n  ) { }\n  \n  ngOnInit() {\n    this.communities = this.homeService.Communities\n    \n    if(this.infoService.AllPublications < 1 && this.infoService.AllAuthors < 1 \n      && this.infoService.AllAuthors < 1){\n        this.getPublications();\n        this.getAuthors();\n        this.getConferences();\n    }\n\n    \n    this.getPublicationsbyYear();\n    console.log(\"ee\")\n    this.getAuthorsbyYear();\n    this.getConferencesbyYear();\n\n    \n  }\n\n  autocompleteConference(term: string): void {\n    this.apiService.autocompleteConference(term).subscribe({\n      next: (response: string[]) => {\n        this.completeConference = response;\n      },\n      error: (error: any) => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n\n  isFilteringDisabled(): boolean {\n    return this.filtersList.length === 0 && this.homeService.Communities.every(community => !community.selected);\n  }\n\n  completeSuggestion(suggestion: string) {\n\n\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n\n    if(this.filterComunities.includes(filtros)){\n      this.repeated = true;\n    }else{\n      this.repeated = false;\n    }\n    \n   \n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: (response: any[]) => {\n\n          if (response.length !== 0) {\n\n            this.noResultsFoundConference = false;\n\n            if (!this.filtersList.includes(filtros)) {\n              this.filtersList.push(filtros);\n              \n              const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n\n              this.filtersList = this.filtersList.concat(newFilters);\n              this.filtersString  = this.filtersList.join(','); \n            }\n          } else {\n\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: (response: any[]) => {\n      \n                if (response.length !== 0) {\n      \n                  this.noResultsFoundConference = false;\n      \n                  if (!this.filtersList.includes(filtros)) {\n                    this.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n      \n                    this.filtersList = this.filtersList.concat(newFilters);\n                    this.filtersString  = this.filtersList.join(','); \n                  }\n\n                  for (const filter of this.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                        this.currentConferences.push(filter);\n                   \n                    }\n        \n                    const filtersListSinDuplicados: string[] = this.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n        \n                    this.currentConferences = filtersListSinDuplicados\n                  }   \n                } else {\n                  this.noResultsFoundConference = true;\n                }\n               \n              },\n              error: (error: any) => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n                console.log(this.filtersList)\n                this.currentConferences.push(filter);\n           \n            }\n\n            const filtersListSinDuplicados: string[] = this.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n\n            this.currentConferences = filtersListSinDuplicados\n          }   \n        },\n        error: (error: any) => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n\n  selectSuggestion(suggestion: string) {\n    this.filtersBOX = suggestion;\n  }\n\n  deleteFilter(filter: string) {\n    const i = this.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.filtersList.splice(i, 1); \n      this.filtersString = this.filtersList.join(',');\n    }\n\n    const R = this.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.currentConferences.splice(i, 1); \n    }\n  }\n\n  deleteCommunity(communityToDelete: { name: string, filtersList: string[], selected: boolean }) {\n \n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    \n    for (const filter of communityToDelete.filtersList) {\n            \n      const i = this.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.filtersList.splice(i, 1); \n        this.filtersString = this.filtersList.join(',');\n      }\n\n\n    }\n\n  }\n\n  createCommunity(filtersList: string[]){\n   \n    this.homeService.Communities.push({ name: this.nameCommunity, filtersList: filtersList, selected: false });\n    this.communities = this.homeService.Communities\n    this.closeModal()\n    this.nameCommunity = '';\n\n    this.filtersList = [];\n    this.currentConferences = [];\n\n  }\n\n  execFunctionsYear(){\n    this.showButtons= true;\n    this.clear()\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.toggleYears();\n  }\n\n  execFunctionsDecades(){\n    this.showButtons= true;\n    this.clear()\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.toggleDecades();\n  }\n\n  toggleYears() {\n    this.showYears = !this.showYears;\n      if(this.showDecades == true){\n        this.showDecades = false;\n      }\n  }\n\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n      if(this.showYears == true){\n        this.showYears = false;\n      }\n  }\n\n  clear(){\n    this.filteredTitles = [];\n  }\n\n  clear2(){\n    this.filteredTitles = [];\n    this.showButtons= false;\n  }\n\n  getFilteredNodesConference() {\n\n    this.homeService.Communities.forEach(community => {\n\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    \n    });\n\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.filtersList.join(','); \n\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesConference(this.filtersList).subscribe({\n      next: (response: any[]) => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if(this.filteredTitles.length < 1){\n          this.filteredTitles = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n      \n    });\n\n  }\n\n  getFilteredNodesJournal() {\n\n    this.homeService.Communities.forEach(community => {\n\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    \n    });\n\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.filtersList.join(','); \n\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesJournal(this.filtersList).subscribe({\n      next: (response: any[]) => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if(this.filteredTitles.length < 1){\n          this.filteredTitles = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n      \n    });\n  }\n\n  getPublicationsbyYear() {\n    console.log(\"ee\")\n    this.apiService.getPublicationsbyYear().subscribe({\n      next: (response: any[]) => {\n        console.log(\"ee\")\n        this.infoService.PublicationsByYear = response; \n        console.log(this.infoService.PublicationsByYear)\n     \n      },\n      error: (error: any) => {\n        console.error('Error al obtener las publicaciones en getPublicationsbyYear:', error);\n      }\n    });\n  }\n\n  getAuthorsbyYear() {\n\n    this.apiService.getAuthorsbyYear().subscribe({\n      next: (response: any[]) => {\n        this.infoService.AuthorsByYear = response; \n        this.infoService.AuthorsByYear.sort((a, b) => {\n          return parseInt(a.yearName) - parseInt(b.yearName);\n        });\n  \n      },\n      error: (error: any) => {\n        console.error('Error al obtener los autores en getAuthorsbyYear:', error);\n      }\n    });\n  }\n\n  getConferencesbyYear() {\n \n    this.apiService.getConferencesbyYear().subscribe({\n      next: (response: any[]) => {\n        this.infoService.ConferencesByYear = response; \n        this.infoService.ConferencesByYear .sort((a, b) => {\n          return parseInt(a.yearName) - parseInt(b.yearName);\n        });\n \n      },\n      error: (error: any) => {\n        console.error('Error al obtener las conferencias en getConferencesbyYear:', error);\n      }\n    });\n  }\n\n  getPublications() {\n    this.apiService.getPublications().subscribe({\n      next: (response: any[]) => {\n  \n        if (response.length > 0) {\n          this.infoService.AllPublications = response[0].all_publications;\n        } else {\n          this.infoService.AllPublications = 0;\n        }\n      },\n      error: (error: any) => {\n        console.error('Error al obtener las publicaciones en getPublications:', error);\n      }\n    });\n  }\n\n  getConferences() {\n    this.apiService.getConferences().subscribe({\n      next: (response: any[]) => {\n  \n        if (response.length > 0) {\n          this.infoService.AllConferences = response[0].all_conferences;\n        } else {\n          this.infoService.AllConferences = 0;\n        }\n      },\n      error: (error: any) => {\n        console.error('Error al obtener las conferencias en getConferences:', error);\n      }\n    });\n  }\n\n  getAuthors() {\n    this.apiService.getAuthors().subscribe({\n      next: (response: any[]) => {\n  \n        if (response.length > 0) {\n          this.infoService.AllAuthors = response[0].all_authors;\n        } else {\n          this.infoService.AllAuthors = 0;\n        }\n      },\n      error: (error: any) => {\n        console.error('Error al obtener las publicaciones en getBooks:', error);\n      }\n    });\n  }\n\n  existSelectTitle(): boolean {\n    let select = false;\n    if (this.filteredTitles.some(titulo => titulo.selected)){\n      select = true;\n    }\n    return select;\n  }\n\n  selectAlls() {\n    if (this.filteredTitles.length > 0){\n      for (let title of this.filteredTitles) {\n        title.selected = this.selectAll;\n      }\n    }\n  }\n\n  selectDecade() {\n    for (let year of this.filteredTitles) {\n      if (year.title == \"1989\" || year.title == \"1990\" ||year.title == \"1991\" || year.title == \"1992\" ||\n      year.title == \"1993\" || year.title == \"1994\" ||year.title == \"1995\" || year.title == \"1996\" ||\n      year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      } \n    }\n  }\n\n  selectDecade2() {\n  \n    for (let year of this.filteredTitles) {\n      if (year.title == \"2000\" || year.title == \"2001\" ||year.title == \"2002\" ||year.title == \"2003\" ||\n      year.title == \"2004\" || year.title == \"2005\" ||year.title == \"2006\" ||year.title == \"2007\" ||\n      year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      } \n    }\n  }\n\n  selectDecade3() {\n  \n    for (let year of this.filteredTitles) {\n      if (year.title == \"2010\" ||year.title == \"2011\" ||year.title == \"2012\" ||\n      year.title == \"2013\" || year.title == \"2014\" ||year.title == \"2015\" || year.title == \"2016\" ||\n      year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      } \n    }\n  }\n\n  selectDecade4() {\n  \n    for (let year of this.filteredTitles) {\n      if (year.title == \"2020\" ||year.title == \"2021\" ||year.title == \"2022\" ||\n      year.title == \"2023\" || year.title == \"2024\"){\n        year.selected = this.selectDecades4;\n      } \n    }\n  }\n\n  titleChanged() {\n    let all = true;\n    for (let titulo of this.filteredTitles) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    for (let titulo of this.filteredTitles) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    this.selectAll = all;\n  }\n\n  async generateStatistics() {\n\n    const titles = this.filteredTitles.\n    filter(titulo => titulo.selected).map(titulo => titulo.pr_objeto);\n    \n    const splitFilters = this.filtersString.split(',').map(filtersString => filtersString.trim());\n\n    this.stadisticsService.addTitles(titles),\n    this.stadisticsService.flagNameVenue(splitFilters)\n\n    this.router.navigateByUrl('/statistics');\n\n  }\n\n  generateConf() {\n\n    this.router.navigateByUrl('/config');\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template)\n  }\n\n  closeModal() {\n    this.modalRef?.hide();\n  }\n\n\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAA6B,eAAe;AAevD,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EA2BxB;EAGAC,YACUC,UAAsB,EACtBC,MAAc,EACdC,iBAAoC,EACpCC,YAA4B,EAC5BC,WAAwB,EACzBC,WAAwB;IALvB,KAAAL,UAAU,GAAVA,UAAU;IACV,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,WAAW,GAAXA,WAAW;IACZ,KAAAC,WAAW,GAAXA,WAAW;IAlCpB,KAAAC,aAAa,GAAY,EAAE;IAC3B,KAAAC,UAAU,GAAW,EAAE;IACvB,KAAAC,WAAW,GAAa,EAAE;IAC1B,KAAAC,WAAW,GAAkE,EAAE;IAC/E,KAAAC,gBAAgB,GAAa,EAAE;IAC/B,KAAAC,kBAAkB,GAAa,EAAE;IACjC,KAAAC,aAAa,GAAW,EAAE;IAC1B,KAAAC,kBAAkB,GAAa,EAAE;IACjC,KAAAC,eAAe,GAAa,EAAE;IAC9B,KAAAC,cAAc,GAA2D,EAAE;IAC3E,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,aAAa,GAAG,KAAK;IACrB,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,gBAAgB,GAAW,MAAM;IACjC,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,WAAW,GAAY,KAAK;IAC5B,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAC,wBAAwB,GAAG,KAAK;IAGhC,KAAAC,WAAW,GAAG,KAAK;EAaf;EAEJC,QAAQA,CAAA;IACN,IAAI,CAAClB,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACuB,WAAW;IAE/C,IAAG,IAAI,CAACxB,WAAW,CAACyB,eAAe,GAAG,CAAC,IAAI,IAAI,CAACzB,WAAW,CAAC0B,UAAU,GAAG,CAAC,IACrE,IAAI,CAAC1B,WAAW,CAAC0B,UAAU,GAAG,CAAC,EAAC;MACjC,IAAI,CAACC,eAAe,EAAE;MACtB,IAAI,CAACC,UAAU,EAAE;MACjB,IAAI,CAACC,cAAc,EAAE;;IAIzB,IAAI,CAACC,qBAAqB,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACjB,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,oBAAoB,EAAE;EAG7B;EAEAC,sBAAsBA,CAACC,IAAY;IACjC,IAAI,CAACxC,UAAU,CAACuC,sBAAsB,CAACC,IAAI,CAAC,CAACC,SAAS,CAAC;MACrDC,IAAI,EAAGC,QAAkB,IAAI;QAC3B,IAAI,CAAC9B,kBAAkB,GAAG8B,QAAQ;MACpC,CAAC;MACDC,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;KACD,CAAC;EACJ;EAEAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACrC,WAAW,CAACsC,MAAM,KAAK,CAAC,IAAI,IAAI,CAACzC,WAAW,CAACuB,WAAW,CAACmB,KAAK,CAACC,SAAS,IAAI,CAACA,SAAS,CAACC,QAAQ,CAAC;EAC9G;EAEAC,kBAAkBA,CAACC,UAAkB;IAGnC,IAAIA,UAAU,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MAC5B,MAAMC,OAAO,GAAGF,UAAU,CAACC,IAAI,EAAE;MAEnC,IAAG,IAAI,CAAC1C,gBAAgB,CAAC4C,QAAQ,CAACD,OAAO,CAAC,EAAC;QACzC,IAAI,CAAC7B,QAAQ,GAAG,IAAI;OACrB,MAAI;QACH,IAAI,CAACA,QAAQ,GAAG,KAAK;;MAIrB,IAAI,CAACxB,UAAU,CAACuD,0BAA0B,CAAC,CAACF,OAAO,CAAC,CAAC,CAACZ,SAAS,CAAC;QAC9DC,IAAI,EAAGC,QAAe,IAAI;UAExB,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;YAEzB,IAAI,CAACrB,wBAAwB,GAAG,KAAK;YAErC,IAAI,CAAC,IAAI,CAACjB,WAAW,CAAC8C,QAAQ,CAACD,OAAO,CAAC,EAAE;cACvC,IAAI,CAAC7C,WAAW,CAACgD,IAAI,CAACH,OAAO,CAAC;cAE9B,MAAMI,UAAU,GAAG,IAAI,CAAC/C,gBAAgB,CAACgD,MAAM,CAACC,IAAI,IAAI,CAAC,IAAI,CAACnD,WAAW,CAAC8C,QAAQ,CAACK,IAAI,CAAC,CAAC;cAEzF,IAAI,CAACnD,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoD,MAAM,CAACH,UAAU,CAAC;cACtD,IAAI,CAACnD,aAAa,GAAI,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;;WAEnD,MAAM;YAEL,IAAI,CAAC7D,UAAU,CAAC8D,uBAAuB,CAAC,CAACT,OAAO,CAAC,CAAC,CAACZ,SAAS,CAAC;cAC3DC,IAAI,EAAGC,QAAe,IAAI;gBAExB,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;kBAEzB,IAAI,CAACrB,wBAAwB,GAAG,KAAK;kBAErC,IAAI,CAAC,IAAI,CAACjB,WAAW,CAAC8C,QAAQ,CAACD,OAAO,CAAC,EAAE;oBACvC,IAAI,CAAC7C,WAAW,CAACgD,IAAI,CAACH,OAAO,CAAC;oBAC9B,MAAMI,UAAU,GAAG,IAAI,CAAC/C,gBAAgB,CAACgD,MAAM,CAACC,IAAI,IAAI,CAAC,IAAI,CAACnD,WAAW,CAAC8C,QAAQ,CAACK,IAAI,CAAC,CAAC;oBAEzF,IAAI,CAACnD,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoD,MAAM,CAACH,UAAU,CAAC;oBACtD,IAAI,CAACnD,aAAa,GAAI,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;;kBAGlD,KAAK,MAAMH,MAAM,IAAI,IAAI,CAAClD,WAAW,EAAE;oBACrC,IAAI,CAAC,IAAI,CAACE,gBAAgB,CAAC4C,QAAQ,CAACI,MAAM,CAAC,EAAE;sBACzC,IAAI,CAAC/C,kBAAkB,CAAC6C,IAAI,CAACE,MAAM,CAAC;;oBAIxC,MAAMK,wBAAwB,GAAa,IAAI,CAACpD,kBAAkB,CAAC+C,MAAM,CAAC,CAACM,KAAK,EAAEC,MAAM,EAAEC,IAAI,KAAI;sBAChG,OAAOA,IAAI,CAACC,OAAO,CAACH,KAAK,CAAC,KAAKC,MAAM;oBACvC,CAAC,CAAC;oBAEF,IAAI,CAACtD,kBAAkB,GAAGoD,wBAAwB;;iBAErD,MAAM;kBACL,IAAI,CAACtC,wBAAwB,GAAG,IAAI;;cAGxC,CAAC;cACDmB,KAAK,EAAGA,KAAU,IAAI;gBACpBT,OAAO,CAACS,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;cAC3D,CAAC;cACDwB,QAAQ,EAAEA,CAAA,KAAK;gBACb,IAAI,CAAC7D,UAAU,GAAG,EAAE;cACtB;aACD,CAAC;;UAEJ,KAAK,MAAMmD,MAAM,IAAI,IAAI,CAAClD,WAAW,EAAE;YACrC,IAAI,CAAC,IAAI,CAACE,gBAAgB,CAAC4C,QAAQ,CAACI,MAAM,CAAC,EAAE;cACzCvB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC5B,WAAW,CAAC;cAC7B,IAAI,CAACG,kBAAkB,CAAC6C,IAAI,CAACE,MAAM,CAAC;;YAIxC,MAAMK,wBAAwB,GAAa,IAAI,CAACpD,kBAAkB,CAAC+C,MAAM,CAAC,CAACM,KAAK,EAAEC,MAAM,EAAEC,IAAI,KAAI;cAChG,OAAOA,IAAI,CAACC,OAAO,CAACH,KAAK,CAAC,KAAKC,MAAM;YACvC,CAAC,CAAC;YAEF,IAAI,CAACtD,kBAAkB,GAAGoD,wBAAwB;;QAEtD,CAAC;QACDnB,KAAK,EAAGA,KAAU,IAAI;UACpBT,OAAO,CAACS,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC9D,CAAC;QACDwB,QAAQ,EAAEA,CAAA,KAAK;UACb,IAAI,CAAC7D,UAAU,GAAG,EAAE;QACtB;OACD,CAAC;;EAEN;EAEA8D,gBAAgBA,CAAClB,UAAkB;IACjC,IAAI,CAAC5C,UAAU,GAAG4C,UAAU;EAC9B;EAEAmB,YAAYA,CAACZ,MAAc;IACzB,MAAMa,CAAC,GAAG,IAAI,CAAC/D,WAAW,CAAC2D,OAAO,CAACT,MAAM,CAAC;IAC1C,IAAIa,CAAC,KAAK,CAAC,CAAC,EAAE;MACZ,IAAI,CAAC/D,WAAW,CAACgE,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;MAC7B,IAAI,CAACjE,aAAa,GAAG,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;;IAGjD,MAAMY,CAAC,GAAG,IAAI,CAAC9D,kBAAkB,CAACwD,OAAO,CAACT,MAAM,CAAC;IACjD,IAAIe,CAAC,KAAK,CAAC,CAAC,EAAE;MACZ,IAAI,CAAC9D,kBAAkB,CAAC6D,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;EAExC;EAEAG,eAAeA,CAACC,iBAA6E;IAE3F,IAAI,CAACtE,WAAW,CAACuB,WAAW,GAAG,IAAI,CAACvB,WAAW,CAACuB,WAAW,CAAC8B,MAAM,CAACV,SAAS,IAAG;MAE7E,OAAO,EAAEA,SAAS,CAAC4B,IAAI,KAAKD,iBAAiB,CAACC,IAAI,IAAI5B,SAAS,CAACxC,WAAW,KAAKmE,iBAAiB,CAACnE,WAAW,IAAIwC,SAAS,CAACC,QAAQ,KAAK0B,iBAAiB,CAAC1B,QAAQ,CAAC;IACrK,CAAC,CAAC;IAEF,KAAK,MAAMS,MAAM,IAAIiB,iBAAiB,CAACnE,WAAW,EAAE;MAElD,MAAM+D,CAAC,GAAG,IAAI,CAAC/D,WAAW,CAAC2D,OAAO,CAACT,MAAM,CAAC;MAC1C,IAAIa,CAAC,KAAK,CAAC,CAAC,EAAE;QACZ,IAAI,CAAC/D,WAAW,CAACgE,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;QAC7B,IAAI,CAACjE,aAAa,GAAG,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;;;EAMrD;EAEAgB,eAAeA,CAACrE,WAAqB;IAEnC,IAAI,CAACH,WAAW,CAACuB,WAAW,CAAC4B,IAAI,CAAC;MAAEoB,IAAI,EAAE,IAAI,CAAChE,aAAa;MAAEJ,WAAW,EAAEA,WAAW;MAAEyC,QAAQ,EAAE;IAAK,CAAE,CAAC;IAC1G,IAAI,CAACxC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACuB,WAAW;IAC/C,IAAI,CAACkD,UAAU,EAAE;IACjB,IAAI,CAAClE,aAAa,GAAG,EAAE;IAEvB,IAAI,CAACJ,WAAW,GAAG,EAAE;IACrB,IAAI,CAACG,kBAAkB,GAAG,EAAE;EAE9B;EAEAoE,iBAAiBA,CAAA;IACf,IAAI,CAACrD,WAAW,GAAE,IAAI;IACtB,IAAI,CAACsD,KAAK,EAAE;IACZ,IAAI,CAAClB,uBAAuB,EAAE;IAC9B,IAAI,CAACP,0BAA0B,EAAE;IACjC,IAAI,CAAC0B,WAAW,EAAE;EACpB;EAEAC,oBAAoBA,CAAA;IAClB,IAAI,CAACxD,WAAW,GAAE,IAAI;IACtB,IAAI,CAACsD,KAAK,EAAE;IACZ,IAAI,CAAClB,uBAAuB,EAAE;IAC9B,IAAI,CAACP,0BAA0B,EAAE;IACjC,IAAI,CAAC4B,aAAa,EAAE;EACtB;EAEAF,WAAWA,CAAA;IACT,IAAI,CAAC3D,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;IAC9B,IAAG,IAAI,CAACC,WAAW,IAAI,IAAI,EAAC;MAC1B,IAAI,CAACA,WAAW,GAAG,KAAK;;EAE9B;EAEA4D,aAAaA,CAAA;IACX,IAAI,CAAC5D,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;IAClC,IAAG,IAAI,CAACD,SAAS,IAAI,IAAI,EAAC;MACxB,IAAI,CAACA,SAAS,GAAG,KAAK;;EAE5B;EAEA0D,KAAKA,CAAA;IACH,IAAI,CAACjE,cAAc,GAAG,EAAE;EAC1B;EAEAqE,MAAMA,CAAA;IACJ,IAAI,CAACrE,cAAc,GAAG,EAAE;IACxB,IAAI,CAACW,WAAW,GAAE,KAAK;EACzB;EAEA6B,0BAA0BA,CAAA;IAExB,IAAI,CAAClD,WAAW,CAACuB,WAAW,CAACyD,OAAO,CAACrC,SAAS,IAAG;MAE/C,IAAGA,SAAS,CAACC,QAAQ,IAAI,IAAI,EAAC;QAC5B,IAAI,CAACvC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACkD,MAAM,CAACZ,SAAS,CAACxC,WAAW,CAAC;OAC5E,MAAI;QACH,IAAI,CAACE,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACgD,MAAM,CAAC4B,UAAU,IAAI,CAACtC,SAAS,CAACxC,WAAW,CAAC8C,QAAQ,CAACgC,UAAU,CAAC,CAAC;QAC/G,IAAI,CAAC9E,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkD,MAAM,CAAC4B,UAAU,IAAI,CAACtC,SAAS,CAACxC,WAAW,CAAC8C,QAAQ,CAACgC,UAAU,CAAC,CAAC;;IAGzG,CAAC,CAAC;IAEF,IAAI,CAAC9E,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoD,MAAM,CAAC,IAAI,CAAClD,gBAAgB,CAAC;IACjE,IAAI,CAACJ,aAAa,GAAI,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;IAEhD,IAAI,CAACrD,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkD,MAAM,CAAC,CAAC6B,KAAK,EAAEC,KAAK,EAAEtB,IAAI,KAAI;MAChE,OAAOA,IAAI,CAACC,OAAO,CAACoB,KAAK,CAAC,KAAKC,KAAK;IACtC,CAAC,CAAC;IAEF,IAAI,CAAC9E,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACgD,MAAM,CAAC,CAAC6B,KAAK,EAAEC,KAAK,EAAEtB,IAAI,KAAI;MAC1E,OAAOA,IAAI,CAACC,OAAO,CAACoB,KAAK,CAAC,KAAKC,KAAK;IACtC,CAAC,CAAC;IAEF,IAAI,CAACxF,UAAU,CAACuD,0BAA0B,CAAC,IAAI,CAAC/C,WAAW,CAAC,CAACiC,SAAS,CAAC;MACrEC,IAAI,EAAGC,QAAe,IAAI;QACxB;QACA,IAAI,CAAC7B,eAAe,GAAG6B,QAAQ,CAAC8C,GAAG,CAAC9B,IAAI,IAAIA,IAAI,CAAC;QACjD,IAAG,IAAI,CAAC5C,cAAc,CAAC+B,MAAM,GAAG,CAAC,EAAC;UAChC,IAAI,CAAC/B,cAAc,GAAG2E,MAAM,CAACC,MAAM,CAAChD,QAAQ,CAACiD,MAAM,CAAC,CAACC,GAAG,EAAElC,IAAI,KAAI;YAChE,MAAMmC,QAAQ,GAAGnC,IAAI,CAACoC,UAAU;YAChCF,GAAG,CAACC,QAAQ,CAAClB,IAAI,CAAC,GAAG;cACnBoB,KAAK,EAAEF,QAAQ,CAAClB,IAAI;cACpBqB,SAAS,EAAEtC,IAAI;cACfV,QAAQ,EAAE;aACX;YACD,OAAO4C,GAAG;UACZ,CAAC,EAAE,EAAE,CAAC,CAAC;UACP,IAAI,IAAI,CAAC/E,eAAe,CAACgC,MAAM,KAAK,CAAC,EAAE;YACrC,IAAI,CAACrB,wBAAwB,GAAG,IAAI;WACrC,MAAM;YACL,IAAI,CAACA,wBAAwB,GAAG,KAAK;;;MAG3C,CAAC;MACDmB,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;KAED,CAAC;EAEJ;EAEAkB,uBAAuBA,CAAA;IAErB,IAAI,CAACzD,WAAW,CAACuB,WAAW,CAACyD,OAAO,CAACrC,SAAS,IAAG;MAE/C,IAAGA,SAAS,CAACC,QAAQ,IAAI,IAAI,EAAC;QAC5B,IAAI,CAACvC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACkD,MAAM,CAACZ,SAAS,CAACxC,WAAW,CAAC;OAC5E,MAAI;QACH,IAAI,CAACE,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACgD,MAAM,CAAC4B,UAAU,IAAI,CAACtC,SAAS,CAACxC,WAAW,CAAC8C,QAAQ,CAACgC,UAAU,CAAC,CAAC;QAC/G,IAAI,CAAC9E,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkD,MAAM,CAAC4B,UAAU,IAAI,CAACtC,SAAS,CAACxC,WAAW,CAAC8C,QAAQ,CAACgC,UAAU,CAAC,CAAC;;IAGzG,CAAC,CAAC;IAEF,IAAI,CAAC9E,WAAW,GAAG,IAAI,CAACA,WAAW,CAACoD,MAAM,CAAC,IAAI,CAAClD,gBAAgB,CAAC;IACjE,IAAI,CAACJ,aAAa,GAAI,IAAI,CAACE,WAAW,CAACqD,IAAI,CAAC,GAAG,CAAC;IAEhD,IAAI,CAACrD,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkD,MAAM,CAAC,CAAC6B,KAAK,EAAEC,KAAK,EAAEtB,IAAI,KAAI;MAChE,OAAOA,IAAI,CAACC,OAAO,CAACoB,KAAK,CAAC,KAAKC,KAAK;IACtC,CAAC,CAAC;IAEF,IAAI,CAAC9E,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACgD,MAAM,CAAC,CAAC6B,KAAK,EAAEC,KAAK,EAAEtB,IAAI,KAAI;MAC1E,OAAOA,IAAI,CAACC,OAAO,CAACoB,KAAK,CAAC,KAAKC,KAAK;IACtC,CAAC,CAAC;IAEF,IAAI,CAACxF,UAAU,CAAC8D,uBAAuB,CAAC,IAAI,CAACtD,WAAW,CAAC,CAACiC,SAAS,CAAC;MAClEC,IAAI,EAAGC,QAAe,IAAI;QACxB;QACA,IAAI,CAAC7B,eAAe,GAAG6B,QAAQ,CAAC8C,GAAG,CAAC9B,IAAI,IAAIA,IAAI,CAAC;QACjD,IAAG,IAAI,CAAC5C,cAAc,CAAC+B,MAAM,GAAG,CAAC,EAAC;UAChC,IAAI,CAAC/B,cAAc,GAAG2E,MAAM,CAACC,MAAM,CAAChD,QAAQ,CAACiD,MAAM,CAAC,CAACC,GAAG,EAAElC,IAAI,KAAI;YAChE,MAAMmC,QAAQ,GAAGnC,IAAI,CAACoC,UAAU;YAChCF,GAAG,CAACC,QAAQ,CAAClB,IAAI,CAAC,GAAG;cACnBoB,KAAK,EAAEF,QAAQ,CAAClB,IAAI;cACpBqB,SAAS,EAAEtC,IAAI;cACfV,QAAQ,EAAE;aACX;YACD,OAAO4C,GAAG;UACZ,CAAC,EAAE,EAAE,CAAC,CAAC;UACP,IAAI,IAAI,CAAC/E,eAAe,CAACgC,MAAM,KAAK,CAAC,EAAE;YACrC,IAAI,CAACrB,wBAAwB,GAAG,IAAI;WACrC,MAAM;YACL,IAAI,CAACA,wBAAwB,GAAG,KAAK;;;MAG3C,CAAC;MACDmB,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;KAED,CAAC;EACJ;EAEAV,qBAAqBA,CAAA;IACnBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACjB,IAAI,CAACpC,UAAU,CAACkC,qBAAqB,EAAE,CAACO,SAAS,CAAC;MAChDC,IAAI,EAAGC,QAAe,IAAI;QACxBR,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;QACjB,IAAI,CAAChC,WAAW,CAAC8F,kBAAkB,GAAGvD,QAAQ;QAC9CR,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChC,WAAW,CAAC8F,kBAAkB,CAAC;MAElD,CAAC;MACDtD,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,8DAA8D,EAAEA,KAAK,CAAC;MACtF;KACD,CAAC;EACJ;EAEAP,gBAAgBA,CAAA;IAEd,IAAI,CAACrC,UAAU,CAACqC,gBAAgB,EAAE,CAACI,SAAS,CAAC;MAC3CC,IAAI,EAAGC,QAAe,IAAI;QACxB,IAAI,CAACvC,WAAW,CAAC+F,aAAa,GAAGxD,QAAQ;QACzC,IAAI,CAACvC,WAAW,CAAC+F,aAAa,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAC3C,OAAOC,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,GAAGD,QAAQ,CAACD,CAAC,CAACE,QAAQ,CAAC;QACpD,CAAC,CAAC;MAEJ,CAAC;MACD5D,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MAC3E;KACD,CAAC;EACJ;EAEAN,oBAAoBA,CAAA;IAElB,IAAI,CAACtC,UAAU,CAACsC,oBAAoB,EAAE,CAACG,SAAS,CAAC;MAC/CC,IAAI,EAAGC,QAAe,IAAI;QACxB,IAAI,CAACvC,WAAW,CAACqG,iBAAiB,GAAG9D,QAAQ;QAC7C,IAAI,CAACvC,WAAW,CAACqG,iBAAiB,CAAEL,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAChD,OAAOC,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,GAAGD,QAAQ,CAACD,CAAC,CAACE,QAAQ,CAAC;QACpD,CAAC,CAAC;MAEJ,CAAC;MACD5D,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,4DAA4D,EAAEA,KAAK,CAAC;MACpF;KACD,CAAC;EACJ;EAEAb,eAAeA,CAAA;IACb,IAAI,CAAC/B,UAAU,CAAC+B,eAAe,EAAE,CAACU,SAAS,CAAC;MAC1CC,IAAI,EAAGC,QAAe,IAAI;QAExB,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACvB,IAAI,CAAC1C,WAAW,CAACyB,eAAe,GAAGc,QAAQ,CAAC,CAAC,CAAC,CAAC+D,gBAAgB;SAChE,MAAM;UACL,IAAI,CAACtG,WAAW,CAACyB,eAAe,GAAG,CAAC;;MAExC,CAAC;MACDe,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,wDAAwD,EAAEA,KAAK,CAAC;MAChF;KACD,CAAC;EACJ;EAEAX,cAAcA,CAAA;IACZ,IAAI,CAACjC,UAAU,CAACiC,cAAc,EAAE,CAACQ,SAAS,CAAC;MACzCC,IAAI,EAAGC,QAAe,IAAI;QAExB,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACvB,IAAI,CAAC1C,WAAW,CAACuG,cAAc,GAAGhE,QAAQ,CAAC,CAAC,CAAC,CAACiE,eAAe;SAC9D,MAAM;UACL,IAAI,CAACxG,WAAW,CAACuG,cAAc,GAAG,CAAC;;MAEvC,CAAC;MACD/D,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;MAC9E;KACD,CAAC;EACJ;EAEAZ,UAAUA,CAAA;IACR,IAAI,CAAChC,UAAU,CAACgC,UAAU,EAAE,CAACS,SAAS,CAAC;MACrCC,IAAI,EAAGC,QAAe,IAAI;QAExB,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACvB,IAAI,CAAC1C,WAAW,CAAC0B,UAAU,GAAGa,QAAQ,CAAC,CAAC,CAAC,CAACkE,WAAW;SACtD,MAAM;UACL,IAAI,CAACzG,WAAW,CAAC0B,UAAU,GAAG,CAAC;;MAEnC,CAAC;MACDc,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;KACD,CAAC;EACJ;EAEAkE,gBAAgBA,CAAA;IACd,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAI,IAAI,CAAChG,cAAc,CAACiG,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAChE,QAAQ,CAAC,EAAC;MACtD8D,MAAM,GAAG,IAAI;;IAEf,OAAOA,MAAM;EACf;EAEAG,UAAUA,CAAA;IACR,IAAI,IAAI,CAACnG,cAAc,CAAC+B,MAAM,GAAG,CAAC,EAAC;MACjC,KAAK,IAAIkD,KAAK,IAAI,IAAI,CAACjF,cAAc,EAAE;QACrCiF,KAAK,CAAC/C,QAAQ,GAAG,IAAI,CAACjC,SAAS;;;EAGrC;EAEAmG,YAAYA,CAAA;IACV,KAAK,IAAIC,IAAI,IAAI,IAAI,CAACrG,cAAc,EAAE;MACpC,IAAIqG,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAC/FoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAC3FoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,EAAE;QACpEoB,IAAI,CAACnE,QAAQ,GAAG,IAAI,CAAChC,aAAa;;;EAGxC;EAEAoG,aAAaA,CAAA;IAEX,KAAK,IAAID,IAAI,IAAI,IAAI,CAACrG,cAAc,EAAE;MACpC,IAAIqG,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAC9FoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAC1FoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,EAAE;QAC5CoB,IAAI,CAACnE,QAAQ,GAAG,IAAI,CAAC/B,cAAc;;;EAGzC;EAEAoG,aAAaA,CAAA;IAEX,KAAK,IAAIF,IAAI,IAAI,IAAI,CAACrG,cAAc,EAAE;MACpC,IAAIqG,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IACtEoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAC3FoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,EAAE;QACpEoB,IAAI,CAACnE,QAAQ,GAAG,IAAI,CAAC9B,cAAc;;;EAGzC;EAEAoG,aAAaA,CAAA;IAEX,KAAK,IAAIH,IAAI,IAAI,IAAI,CAACrG,cAAc,EAAE;MACpC,IAAIqG,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAGoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IACtEoB,IAAI,CAACpB,KAAK,IAAI,MAAM,IAAIoB,IAAI,CAACpB,KAAK,IAAI,MAAM,EAAC;QAC3CoB,IAAI,CAACnE,QAAQ,GAAG,IAAI,CAAC7B,cAAc;;;EAGzC;EAEAoG,YAAYA,CAAA;IACV,IAAIC,GAAG,GAAG,IAAI;IACd,KAAK,IAAIR,MAAM,IAAI,IAAI,CAAClG,cAAc,EAAE;MACtC,IAAI,CAACkG,MAAM,CAAChE,QAAQ,EAAE;QACpBwE,GAAG,GAAG,KAAK;QACX;;;IAGJ,KAAK,IAAIR,MAAM,IAAI,IAAI,CAAClG,cAAc,EAAE;MACtC,IAAI,CAACkG,MAAM,CAAChE,QAAQ,EAAE;QACpBwE,GAAG,GAAG,KAAK;QACX;;;IAGJ,IAAI,CAACzG,SAAS,GAAGyG,GAAG;EACtB;EAEMC,kBAAkBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEtB,MAAMC,MAAM,GAAGF,KAAI,CAAC5G,cAAc,CAClC2C,MAAM,CAACuD,MAAM,IAAIA,MAAM,CAAChE,QAAQ,CAAC,CAACwC,GAAG,CAACwB,MAAM,IAAIA,MAAM,CAAChB,SAAS,CAAC;MAEjE,MAAM6B,YAAY,GAAGH,KAAI,CAACrH,aAAa,CAACyH,KAAK,CAAC,GAAG,CAAC,CAACtC,GAAG,CAACnF,aAAa,IAAIA,aAAa,CAAC8C,IAAI,EAAE,CAAC;MAE7FuE,KAAI,CAACzH,iBAAiB,CAAC8H,SAAS,CAACH,MAAM,CAAC,EACxCF,KAAI,CAACzH,iBAAiB,CAAC+H,aAAa,CAACH,YAAY,CAAC;MAElDH,KAAI,CAAC1H,MAAM,CAACiI,aAAa,CAAC,aAAa,CAAC;IAAC;EAE3C;EAEAC,YAAYA,CAAA;IAEV,IAAI,CAAClI,MAAM,CAACiI,aAAa,CAAC,SAAS,CAAC;EACtC;EAEAE,SAASA,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACnI,YAAY,CAACoI,IAAI,CAACF,QAAQ,CAAC;EAClD;EAEAvD,UAAUA,CAAA;IACR,IAAI,CAACwD,QAAQ,EAAEE,IAAI,EAAE;EACvB;CAGD;AA9iBY1I,aAAa,GAAA2I,UAAA,EALzB5I,SAAS,CAAC;EACT6I,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW9I,aAAa,CA8iBzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    // Obtener al autor con más publicaciones\n    const authorWithMostPublications = this.nameAuthors.reduce((prev, current) => prev.publications.length > current.publications.length ? prev : current);\n    const distances = {};\n    this.nameAuthors.forEach(author => {\n      const distance = author === authorWithMostPublications ? 0 : 100 / author.publications.length;\n      distances[author.researcher] = distance;\n    });\n    // Mapear los nodos ajustando el tamaño en función de las publicaciones y la distancia al autor principal\n    const nodesData = this.nameAuthors.map(author => {\n      const distanceFromCenter = distances[author.researcher] * 100; // Ajusta el factor de escala según sea necesario\n      const angle = Math.random() * Math.PI * 2; // Escoge un ángulo aleatorio\n      // Calcula las coordenadas x e y basadas en el ángulo y la distancia del centro\n      const x = Math.cos(angle) * distanceFromCenter;\n      const y = Math.sin(angle) * distanceFromCenter;\n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: Math.floor(author.publications.length) + 12,\n          color: \"#ffffff\"\n        },\n        x: x,\n        y: y\n      };\n    });\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a, b) => b.publications.length - a.publications.length);\n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","authorWithMostPublications","reduce","prev","current","publications","length","distances","forEach","author","distance","researcher","nodesData","map","distanceFromCenter","angle","Math","random","PI","x","cos","y","sin","id","label","font","size","floor","color","nodes","getEdges","sortedAuthors","sort","a","b","edgesData","filter","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    // Obtener al autor con más publicaciones\n   \n    const authorWithMostPublications = this.nameAuthors.reduce((prev: any, current: any) => (prev.publications.length > current.publications.length) ? prev : current);\n    const distances: { [key: string]: number } = {};\n    this.nameAuthors.forEach((author: any) => {\n      const distance = author === authorWithMostPublications ? 0 : 100 / author.publications.length;\n      distances[author.researcher] = distance;\n    });\n    \n    // Mapear los nodos ajustando el tamaño en función de las publicaciones y la distancia al autor principal\n    const nodesData: Node[] = this.nameAuthors.map((author: any) => {\n      const distanceFromCenter = distances[author.researcher] * 100; // Ajusta el factor de escala según sea necesario\n      const angle = Math.random() * Math.PI * 2; // Escoge un ángulo aleatorio\n    \n      // Calcula las coordenadas x e y basadas en el ángulo y la distancia del centro\n      const x = Math.cos(angle) * distanceFromCenter;\n      const y = Math.sin(angle) * distanceFromCenter;\n    \n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: Math.floor(author.publications.length) + 12, // Tamaño de fuente ajustado\n          color: \"#ffffff\"\n        },\n        x: x,\n        y: y\n      };\n    });\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  getEdges(): DataSet<Edge> {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a: { publications: string | any[]; }, b: { publications: string | any[]; }) => b.publications.length - a.publications.length);\n  \n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n  \n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n  \n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n  \n\n}\n"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAGnE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAO,EAAE;;EAE3BC,QAAQA,CAAA;IACN;IAEA,MAAMC,0BAA0B,GAAG,IAAI,CAACF,WAAW,CAACG,MAAM,CAAC,CAACC,IAAS,EAAEC,OAAY,KAAMD,IAAI,CAACE,YAAY,CAACC,MAAM,GAAGF,OAAO,CAACC,YAAY,CAACC,MAAM,GAAIH,IAAI,GAAGC,OAAO,CAAC;IAClK,MAAMG,SAAS,GAA8B,EAAE;IAC/C,IAAI,CAACR,WAAW,CAACS,OAAO,CAAEC,MAAW,IAAI;MACvC,MAAMC,QAAQ,GAAGD,MAAM,KAAKR,0BAA0B,GAAG,CAAC,GAAG,GAAG,GAAGQ,MAAM,CAACJ,YAAY,CAACC,MAAM;MAC7FC,SAAS,CAACE,MAAM,CAACE,UAAU,CAAC,GAAGD,QAAQ;IACzC,CAAC,CAAC;IAEF;IACA,MAAME,SAAS,GAAW,IAAI,CAACb,WAAW,CAACc,GAAG,CAAEJ,MAAW,IAAI;MAC7D,MAAMK,kBAAkB,GAAGP,SAAS,CAACE,MAAM,CAACE,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;MAC/D,MAAMI,KAAK,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,CAAC;MAE3C;MACA,MAAMC,CAAC,GAAGH,IAAI,CAACI,GAAG,CAACL,KAAK,CAAC,GAAGD,kBAAkB;MAC9C,MAAMO,CAAC,GAAGL,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC,GAAGD,kBAAkB;MAE9C,OAAO;QACLS,EAAE,EAAEd,MAAM,CAACE,UAAU;QACrBa,KAAK,EAAEf,MAAM,CAACE,UAAU;QACxBc,IAAI,EAAE;UACJC,IAAI,EAAEV,IAAI,CAACW,KAAK,CAAClB,MAAM,CAACJ,YAAY,CAACC,MAAM,CAAC,GAAG,EAAE;UACjDsB,KAAK,EAAE;SACR;QACDT,CAAC,EAAEA,CAAC;QACJE,CAAC,EAAEA;OACJ;IACH,CAAC,CAAC;IAEF,MAAMQ,KAAK,GAAkB,IAAIjC,OAAO,CAACgB,SAAS,CAAC;IACnD,OAAOiB,KAAK;EACd;EAEAC,QAAQA,CAAA;IACN;IACA,MAAMC,aAAa,GAAG,IAAI,CAAChC,WAAW,CAACiC,IAAI,CAAC,CAACC,CAAoC,EAAEC,CAAoC,KAAKA,CAAC,CAAC7B,YAAY,CAACC,MAAM,GAAG2B,CAAC,CAAC5B,YAAY,CAACC,MAAM,CAAC;IAE1K;IACA,MAAML,0BAA0B,GAAG8B,aAAa,CAAC,CAAC,CAAC;IAEnD;IACA,MAAMI,SAAS,GAAW,IAAI,CAACpC,WAAW,CAACqC,MAAM,CAAE3B,MAA4B,IAC7EA,MAAM,CAACE,UAAU,KAAKV,0BAA0B,CAACU,UAAU,CAC5D,CAACE,GAAG,CAAEJ,MAA4B,KAChC;MAAE4B,IAAI,EAAEpC,0BAA0B,CAACU,UAAU;MAAE2B,EAAE,EAAE7B,MAAM,CAACE;IAAU,CAAE,CAAC,CACzE;IAED,MAAM4B,KAAK,GAAkB,IAAI3C,OAAO,CAACuC,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBAvDU3C,qBAAqB;EAAA;EAAA,QAAA4C,EAAA,G;WAArB5C,qBAAqB;IAAA6C,OAAA,EAArB7C,qBAAqB,CAAA8C;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../services/selected-nodes.directive\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2, 6)(2, \"h1\");\n    i0.ɵɵtext(3, \" Previous Selected Node\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"selected\", ctx_r0.selectedData);\n  }\n}\nfunction NetworksComponent_h1_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1, \" Selected node\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.menuStatus = true;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.nodeNo = 6;\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n    this.network.on('select', params => this.onSelect(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      this.nodes.add({\n        id: this.nodeNo,\n        label: `Node ${this.nodeNo}`\n      });\n      this.edges.add({\n        from: params.nodes[0],\n        to: this.nodeNo\n      });\n      this.nodeNo++;\n      const result = {\n        edges: params.edges,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      const newEdges = this.edges.get().filter(value => {\n        return this.network.getSelectedEdges().some(val => val == value['id']);\n      }).map(value => {\n        return {\n          to: value['to'],\n          from: value['from']\n        };\n      });\n      const rootSelected = this.network.getSelectedNodes()[0];\n      let newNodes = this.nodes.get().filter(value => {\n        return newEdges.some(s => s.to == value.id);\n      });\n      if (!newNodes.some(value => value.id == rootSelected)) {\n        const self = this.nodes.get().find(val => val.id == rootSelected);\n        if (self !== undefined) {\n          newNodes.unshift(self);\n        }\n      } else {\n        const root = this.nodes.get()[0];\n        newNodes.unshift(root);\n      }\n      this.selectedData.next({\n        edges: newEdges,\n        nodes: newNodes\n      });\n    }\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 5,\n    consts: [[2, \"display\", \"flex\", \"justify-content\", \"center\"], [\"style\", \"flex:4\", 4, \"ngIf\"], [2, \"flex\", \"4\"], [\"treeContainer\", \"\"], [2, \"flex\", \"1\"], [4, \"ngIf\"], [\"menuDiv\", \"\"], [\"selected-nodes\", \"\", 3, \"selected\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, NetworksComponent_div_1_Template, 5, 1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2, 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtemplate(5, NetworksComponent_h1_5_Template, 2, 0, \"h1\", 5);\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"json\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedData);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(8, 3, ctx.selectNode), \" \");\n      }\n    },\n    dependencies: [i3.NgIf, i4.SelectedNodesDirective, i3.JsonPipe],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r0","selectedData","NetworksComponent","constructor","appNetworkService","appNetworkInitService","menuStatus","data","nodes","edges","nodeNo","ngOnInit","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","on","params","onSelect","ngOnDestroy","destroy","length","add","id","label","from","to","result","pointer","selectNode","prevSelectNode","newEdges","get","filter","value","getSelectedEdges","some","val","map","rootSelected","getSelectedNodes","newNodes","s","self","find","undefined","unshift","root","next","_","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵtemplate","NetworksComponent_div_1_Template","NetworksComponent_h1_5_Template","ɵɵtextInterpolate1","ɵɵpipeBind1"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts","/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { SelectedNodesDirective } from '../services/selected-nodes.directive';\nimport { ApiService } from '../services/api.service';\nimport { Chart } from 'chart.js';\nimport { InfoService } from '../services/info.service';\nimport { SpinnerService } from '../services/spinner.service';\nimport { HomeService } from '../services/home.service';\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.css'\n})\nexport class NetworksComponent  implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n\n  menuStatus: boolean = true;\n\n  selectNode: any;\n  prevSelectNode: any;\n\n  private data: any = {};\n\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n\n  public selectedData: Subject<Data>;\n\n  private network!: Network;\n\n  private nodeNo: number = 6;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  private onSelect(params: any): void {\n    if (params.nodes.length == 1) {\n      this.nodes.add({\n        id: this.nodeNo,\n        label: `Node ${this.nodeNo}`,\n      });\n      this.edges.add({\n        from: params.nodes[0],\n        to: this.nodeNo,\n      });\n      this.nodeNo++;\n      const result = {\n        edges: params.edges,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n\n      const newEdges = this.edges\n        .get()\n        .filter((value) => {\n          return this.network\n            .getSelectedEdges()\n            .some((val) => val == value['id']);\n        })\n        .map((value) => {\n          return { to: value['to'], from: value['from'] };\n        });\n\n      const rootSelected: number = <number>this.network.getSelectedNodes()[0];\n\n      let newNodes = this.nodes.get().filter((value) => {\n        return newEdges.some((s) => s.to == value.id);\n      });\n\n      if (!newNodes.some((value) => value.id == rootSelected)) {\n        const self = this.nodes.get().find((val) => val.id == rootSelected);\n        if (self !== undefined) {\n            newNodes.unshift(self);\n        }\n      } else {\n        const root = this.nodes.get()[0];\n        newNodes.unshift(root);\n      }\n      this.selectedData.next({ edges: newEdges, nodes: newNodes });\n    }\n  }\n}\n\n","<div style=\"display:flex; justify-content:center; \">\n\n    <div #menuDiv style=\"flex:4\" *ngIf=\"selectedData\">\n      <h1> Previous Selected Node</h1>\n      <!--<div>{{prevSelectNode | json}}</div>-->\n      <div selected-nodes [selected]=\"selectedData\"> </div>\n    </div>\n\n    <div #treeContainer style=\"flex:4\">\n    </div>\n  <div style=\"flex:1\">\n   <h1 *ngIf=\"selectNode\"> Selected node</h1>\n  <div>{{selectNode| json}} </div>\n  </div>  \n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
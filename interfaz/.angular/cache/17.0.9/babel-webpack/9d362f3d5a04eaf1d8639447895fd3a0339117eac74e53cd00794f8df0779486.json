{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    console.log(this.nameAuthors);\n    const nodesData = this.nameAuthors.map(author => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications\n    }));\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    // Encontrar al autor con más publicaciones\n    const authorWithMostPublications = this.nameAuthors.reduce((prev, current) => prev.publications > current.publications ? prev : current);\n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","console","log","nodesData","map","author","id","researcher","label","value","publications","nodes","getEdges","authorWithMostPublications","reduce","prev","current","edgesData","filter","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    console.log(this.nameAuthors)\n    const nodesData: Node[] = this.nameAuthors.map((author: { researcher: any; publications: any; }) => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications\n    }));\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  getEdges(): DataSet<Edge> {\n    // Encontrar al autor con más publicaciones\n    const authorWithMostPublications = this.nameAuthors.reduce((prev: { publications: number; }, current: { publications: number; }) =>\n      (prev.publications > current.publications) ? prev : current\n    );\n\n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n}\n"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAGnE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAO,EAAE;;EAE3BC,QAAQA,CAAA;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;IAC7B,MAAMI,SAAS,GAAW,IAAI,CAACJ,WAAW,CAACK,GAAG,CAAEC,MAA+C,KAAM;MACnGC,EAAE,EAAED,MAAM,CAACE,UAAU;MACrBC,KAAK,EAAEH,MAAM,CAACE,UAAU;MACxBE,KAAK,EAAEJ,MAAM,CAACK;KACf,CAAC,CAAC;IAEH,MAAMC,KAAK,GAAkB,IAAIf,OAAO,CAACO,SAAS,CAAC;IACnD,OAAOQ,KAAK;EACd;EAEAC,QAAQA,CAAA;IACN;IACA,MAAMC,0BAA0B,GAAG,IAAI,CAACd,WAAW,CAACe,MAAM,CAAC,CAACC,IAA+B,EAAEC,OAAkC,KAC5HD,IAAI,CAACL,YAAY,GAAGM,OAAO,CAACN,YAAY,GAAIK,IAAI,GAAGC,OAAO,CAC5D;IAED;IACA,MAAMC,SAAS,GAAW,IAAI,CAAClB,WAAW,CAACmB,MAAM,CAAEb,MAA4B,IAC7EA,MAAM,CAACE,UAAU,KAAKM,0BAA0B,CAACN,UAAU,CAC5D,CAACH,GAAG,CAAEC,MAA4B,KAChC;MAAEc,IAAI,EAAEN,0BAA0B,CAACN,UAAU;MAAEa,EAAE,EAAEf,MAAM,CAACE;IAAU,CAAE,CAAC,CACzE;IAED,MAAMc,KAAK,GAAkB,IAAIzB,OAAO,CAACqB,SAAS,CAAC;IACnD,OAAOI,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBA/BUzB,qBAAqB;EAAA;EAAA,QAAA0B,EAAA,G;WAArB1B,qBAAqB;IAAA2B,OAAA,EAArB3B,qBAAqB,CAAA4B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"../services/api.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../services/selected-nodes.directive\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3, 6)(2, \"h1\");\n    i0.ɵɵtext(3, \" Previous Selected Node\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selectedData);\n  }\n}\nfunction NetworksComponent_h1_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Selected node \", ctx_r3.selectNode.nodes, \"\");\n  }\n}\nfunction NetworksComponent_div_8_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const key_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r9.publicationsNode[key_r10]);\n  }\n}\nfunction NetworksComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_8_div_1_div_3_Template, 3, 1, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const edge_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r7.selectNode.nodes, \" and \", edge_r8, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.objectKeys(ctx_r7.publicationsNode));\n  }\n}\nfunction NetworksComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_8_div_1_Template, 4, 3, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.selectNode.edges);\n  }\n}\nfunction NetworksComponent_div_9_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r13);\n  }\n}\nfunction NetworksComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3, 6)(2, \"div\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ul\");\n    i0.ɵɵtemplate(5, NetworksComponent_div_9_li_5_Template, 2, 1, \"li\", 8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r5.selectEdge.edge.from, \" and \", ctx_r5.selectEdge.edge.to, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.publications);\n  }\n}\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService, apiService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.apiService = apiService;\n    this.menuStatus = true;\n    this.publications = [];\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.nodeNo = 6;\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClickEdge(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  onClickEdge(params) {\n    // Get the edge information\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n    // Update selectNode with edge information\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      if (author.researcher === researcherName) {\n        // Concatenar las publicaciones del autor a this.publications\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n    console.log(this.publications);\n  }\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      this.selectEdge = [];\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          // Comprobación de nulidad\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n            if (author.researcher === edge.to) {\n              // Concatenar las publicaciones del autor a this.publications\n              this.publicationsNode[author.researcher] = author.publications;\n            }\n            console.log(author.researcher);\n            console.log(this.publicationsNode[author.researcher]);\n            return author;\n          });\n        }\n      });\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge !== null) {\n          // Comprobación de nulidad\n          if (edge.to == params.nodes) {} else {\n            connectedNodes.push(edge.to);\n          }\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n    }\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService), i0.ɵɵdirectiveInject(i3.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 10,\n    vars: 4,\n    consts: [[1, \"container\"], [\"treeContainer\", \"\"], [\"style\", \"flex:4\", 4, \"ngIf\"], [2, \"flex\", \"4\"], [2, \"flex\", \"1\"], [4, \"ngIf\"], [\"menuDiv\", \"\"], [\"selected-nodes\", \"\", 3, \"selected\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", null, 1);\n        i0.ɵɵtemplate(3, NetworksComponent_div_3_Template, 5, 1, \"div\", 2);\n        i0.ɵɵelement(4, \"div\", 3, 1);\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtemplate(7, NetworksComponent_h1_7_Template, 2, 1, \"h1\", 5)(8, NetworksComponent_div_8_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, NetworksComponent_div_9_Template, 6, 3, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedData);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectEdge && ctx.selectEdge.type === \"edge\");\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.SelectedNodesDirective],\n    styles: [\".conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsdUJBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZWluZXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r1","selectedData","ɵɵtextInterpolate1","ctx_r3","selectNode","nodes","ɵɵtextInterpolate","ctx_r9","publicationsNode","key_r10","ɵɵtemplate","NetworksComponent_div_8_div_1_div_3_Template","ɵɵtextInterpolate2","ctx_r7","edge_r8","objectKeys","NetworksComponent_div_8_div_1_Template","ctx_r4","edges","publication_r13","NetworksComponent_div_9_li_5_Template","ctx_r5","selectEdge","edge","from","to","publications","NetworksComponent","constructor","appNetworkService","appNetworkInitService","apiService","menuStatus","Object","keys","data","nodeNo","ngOnInit","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","on","params","onSelect","onClickEdge","ngOnDestroy","destroy","edgeId","get","type","researcherName","nameAuthors","map","author","researcher","concat","console","log","length","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","forEach","push","result","pointer","prevSelectNode","_","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","i3","ApiService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","NetworksComponent_div_3_Template","NetworksComponent_h1_7_Template","NetworksComponent_div_8_Template","NetworksComponent_div_9_Template"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts","/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { SelectedNodesDirective } from '../services/selected-nodes.directive';\nimport { ApiService } from '../services/api.service';\nimport { Chart } from 'chart.js';\nimport { InfoService } from '../services/info.service';\nimport { SpinnerService } from '../services/spinner.service';\nimport { HomeService } from '../services/home.service';\nimport { auth } from 'neo4j-driver';\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent  implements OnInit, OnDestroy {\n[x: string]: any;\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n\n  menuStatus: boolean = true;\n\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n\n  publications: any[] = [];\n  publicationsNode: { [key: string]: string } = {};\n  objectKeys = Object.keys;\n\n\n  private data: any = {};\n\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n\n  public selectedData: Subject<Data>;\n\n  private network!: Network;\n\n  private nodeNo: number = 6;\n\n\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService,\n    private apiService: ApiService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClickEdge(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  private onClickEdge(params: any): void {\n    // Get the edge information\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n\n  \n    // Update selectNode with edge information\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to; \n\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      if (author.researcher === researcherName) {\n        // Concatenar las publicaciones del autor a this.publications\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n\n    console.log(this.publications)\n  }\n\n  private onSelect(params: any): void {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n      this.selectEdge = [];\n  \n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) { // Comprobación de nulidad\n          if(edge.to == params.nodes ){\n            connectedNodes.push(edge.from);\n          }else  {\n            connectedNodes.push(edge.to);\n          }\n\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n            if (author.researcher === edge.to) {\n              // Concatenar las publicaciones del autor a this.publications\n              this.publicationsNode[author.researcher] = author.publications;\n            }\n            console.log(author.researcher)\n            console.log(this.publicationsNode[author.researcher])\n        \n            return author;\n            \n          });\n       \n        }\n    \n      });\n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge !== null) { // Comprobación de nulidad\n          if(edge.to == params.nodes ){\n\n          }else  {\n            connectedNodes.push(edge.to);\n          }\n        }\n    \n      });\n\n  \n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n  \n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n  \n      this.selectNode = result;\n    }\n  }\n}\n\n","<div class=\"container\">\n    \n  <div #treeContainer></div>\n\n  <div #menuDiv style=\"flex:4\" *ngIf=\"selectedData\">\n    <h1> Previous Selected Node</h1>\n      <!--<div>{{prevSelectNode | json}}</div>-->\n    <div selected-nodes [selected]=\"selectedData\"> </div>\n  </div>\n\n  <div #treeContainer style=\"flex:4\"></div>\n\n  <div style=\"flex:1\">\n    <h1 *ngIf=\"selectNode\"> Selected node {{ selectNode.nodes }}</h1> \n    <!-- <div>{{selectNode| json}} </div> -->\n    <div *ngIf=\"selectNode\">\n      <div *ngFor=\"let edge of selectNode.edges\">\n        <div> Common publications of {{ selectNode.nodes }} and {{ edge }}:</div>\n        <div *ngFor=\"let key of objectKeys(publicationsNode)\">\n          <p>{{ publicationsNode[key] }}</p>\n        </div>\n      </div>\n\n   \n\n    </div>\n  </div>  \n\n  <div #menuDiv style=\"flex:4\" *ngIf=\"selectEdge && selectEdge.type === 'edge'\">\n    <div> Common publications of  {{ selectEdge.edge.from }} and {{ selectEdge.edge.to }}:</div>\n    <ul>\n      <li *ngFor=\"let publication of publications\">{{ publication }}</li>\n    </ul>\n  </div>\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n//import { Chart, CategoryScale, LineController  } from 'chart.js';\nimport { Chart, registerables } from 'chart.js';\nimport { singular } from 'pluralize';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"../services/stadistics.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"angular-tag-cloud-module\";\nconst _c0 = [\"chartCanvas\"];\nChart.register(...registerables);\nexport let StatisticsComponent = /*#__PURE__*/(() => {\n  class StatisticsComponent {\n    constructor(apiService, stadisticsService, http) {\n      this.apiService = apiService;\n      this.stadisticsService = stadisticsService;\n      this.http = http;\n      this.selectedTitles = [];\n      this.selectedYears = [];\n      this.conferenceOption = \"\";\n      this.venueName = [];\n      this.papers = [];\n      this.collaborations = [];\n      this.connectedComponents = [];\n      this.singleAuthor = [];\n      this.statistics = [];\n      this.researchers = [];\n      this.researchers2 = [];\n      this.papersWithAuthors = [];\n      this.decadeStats = [];\n      this.commonNames = {};\n      this.options = {\n        width: 500,\n        height: 200,\n        overflow: false,\n        realignOnResize: false,\n        strict: false,\n        step: 2\n      };\n      this.cloudData = [];\n    }\n    ngOnInit() {\n      this.loadCommonNames();\n      this.main();\n    }\n    waitResearcherNoEmpty() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        while (!_this.researchers || _this.researchers.length === 0) {\n          yield new Promise(resolve => setTimeout(resolve, 100));\n        }\n      })();\n    }\n    getSchools() {\n      this.apiService.getSchools().subscribe({\n        next: response => {\n          this.researchers2 = response;\n          const table = document.querySelector('#tableInstitution tbody');\n          if (table instanceof HTMLElement) {\n            this.researchers2.forEach(({\n              School,\n              NumberOfAuthors,\n              Country\n            }) => {\n              const row = document.createElement('tr');\n              row.innerHTML = `\n            <td>${School}</td><td>${NumberOfAuthors}</td><td style=\"padding-left: 100px\">${Country}</td>`;\n              table.appendChild(row);\n            });\n          }\n        },\n        error: error => {\n          console.error('Error in getSchools:', error);\n        }\n      });\n    }\n    getResearchersConference() {\n      this.apiService.getResearchersConference(this.selectedTitles).subscribe({\n        next: response => {\n          this.researchers = response;\n          this.statsResearchers();\n          this.combineAndShowData(this.statistics[0].years, this.statistics[0].numResearchers);\n        },\n        error: error => {\n          console.error('Error in getResearchersConference:', error);\n        }\n      });\n      if (this.researchers.length < 1) {\n        this.apiService.getResearchersJournals(this.selectedTitles).subscribe({\n          next: response => {\n            this.researchers = response;\n            this.statsResearchers();\n            this.combineAndShowData(this.statistics[0].years, this.statistics[0].numResearchers);\n          },\n          error: error => {\n            console.error('Error in getResearchersJournals:', error);\n          }\n        });\n      }\n    }\n    combineAndShowData(researchersConference, researchersJournals) {\n      if (this.lineChart) {\n        this.lineChart.destroy();\n      }\n      this.generateChart3('lineChart1', 'Number of authors', researchersConference, researchersJournals);\n    }\n    getPapers() {\n      this.apiService.getPapers(this.selectedTitles, this.conferenceOption, this.venueName).subscribe({\n        next: response => {\n          this.papers = response;\n          this.statsPapers();\n          this.generateChart3('lineChart2', 'Number of papers', this.statistics[1].years, this.statistics[1].numPapers);\n        },\n        error: error => {\n          console.error('Error in getPapers:', error);\n        }\n      });\n    }\n    getCollaborations() {\n      this.apiService.getCollaborations(this.selectedTitles, this.conferenceOption, this.venueName).subscribe({\n        next: response => {\n          this.collaborations = response;\n          this.statsColaboraciones();\n          this.generateChart3('lineChart3', 'Density', this.statistics[3].years, this.statistics[3].densidades);\n        },\n        error: error => {\n          console.error('Error in getCollaborations:', error);\n        }\n      });\n    }\n    getConnectedComponents() {\n      this.apiService.getConnectedComponents(this.selectedTitles, this.venueName).subscribe({\n        next: response => {\n          this.connectedComponents = response;\n          this.statsConnectedComponents();\n          this.generateChart3('lineChart11', 'Number of Connected Components', this.statistics[5].years, this.statistics[5].connectedComponents);\n        },\n        error: error => {\n          console.error('Error in getConnectedComponents:', error);\n        }\n      });\n    }\n    getConnectedComponentsByvenue() {\n      this.apiService.getConnectedComponentsByvenue(this.selectedTitles, this.venueName).subscribe({\n        next: response => {\n          this.connectedComponents = response;\n          this.statsConnectedComponentsByvenue();\n          this.generateChart4('lineChart12', 'Number of Connected Components', this.statistics[6]);\n          this.generateChart4('lineChart13', 'Number of Connected Components', this.statistics[7]);\n        },\n        error: error => {\n          console.error('Error in getConnectedComponents:', error);\n        }\n      });\n    }\n    getConferencebyProceeding() {\n      this.apiService.getConferencebyProceeding(this.selectedTitles, this.venueName).subscribe({\n        next: response => {\n          const venueTitles = [];\n          const years = [];\n          response.forEach(({\n            title,\n            year\n          }) => {\n            venueTitles.push(title);\n            years.push(year);\n          });\n          this.generateTablesProceeding(venueTitles, years);\n        },\n        error: error => {\n          console.error('Error in getConferencebyProceeding:', error);\n        }\n      });\n    }\n    generateTablesProceeding(venueTitles, years) {\n      const table = document.querySelector('#tableProceeding tbody');\n      if (table instanceof HTMLElement) {\n        table.innerHTML = ''; // Limpiar tabla existente antes de agregar nuevas filas\n        venueTitles.forEach((venueTitle, index) => {\n          // Divide el t√≠tulo en partes usando la coma como delimitador\n          const parts = venueTitle.split(',');\n          if (parts.length == 6) {\n            parts[4] = parts[4].replace(\"Proceedings\", \"\");\n            const date = parts[4].split('.');\n            // Construye el objeto que contiene los datos para la tabla\n            const rowData = {\n              name: parts[0] + '-' + parts[1].trim(),\n              location: parts[2] + ',' + parts[3],\n              date: date.slice(0).join(' ')\n            };\n            // Crea una fila para la tabla y agrega los datos\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n            // Agrega la fila a la tabla\n            table.appendChild(row);\n          }\n          if (parts.length == 5) {\n            parts[3] = parts[3].replace(\"Proceedings\", \"\").trim();\n            const date = parts[3].split('.');\n            const hasNumber = /\\d/.test(date[0]);\n            if (hasNumber) {\n              // Construye el objeto que contiene los datos para la tabla\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim(),\n                location: parts[2],\n                date: date[0]\n              };\n              // Crea una fila para la tabla y agrega los datos\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n              // Agrega la fila a la tabla\n              table.appendChild(row);\n            } else {\n              // Construye el objeto que contiene los datos para la tabla\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim(),\n                location: parts[2] + ', ' + parts[3],\n                date: parts[4]\n              };\n              // Crea una fila para la tabla y agrega los datos\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n              // Agrega la fila a la tabla\n              table.appendChild(row);\n            }\n          }\n          if (parts.length == 7) {\n            parts[5] = parts[5].replace(\"Proceedings\", \"\");\n            const date = parts[5].split('.');\n            if (parts[2].length > 15) {\n              // Construye el objeto que contiene los datos para la tabla\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim() + ', ' + parts[3],\n                location: parts[3] + ', ' + parts[4],\n                date: date[0]\n              };\n              // Crea una fila para la tabla y agrega los datos\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n              // Agrega la fila a la tabla\n              table.appendChild(row);\n            } else {\n              const isValidFormat = /^[a-zA-Z]+\\s+\\d{1,2}(-\\d{1,2}|\\d{1,2}[a-zA-Z]+\\s+\\d{1,2})$/.test(date[0].trim());\n              if (isValidFormat) {\n                // Construye el objeto que contiene los datos para la tabla\n                const rowData = {\n                  name: parts[0] + '-' + parts[1].trim(),\n                  location: parts[2] + ', ' + parts[3] + ', ' + parts[4],\n                  date: date[0]\n                };\n                // Crea una fila para la tabla y agrega los datos\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n                // Agrega la fila a la tabla\n                table.appendChild(row);\n              } else {\n                // Construye el objeto que contiene los datos para la tabla\n                const rowData = {\n                  name: parts[0] + '-' + parts[1].trim(),\n                  location: parts[2] + ', ' + parts[3],\n                  date: parts[4] + ', ' + date[0]\n                };\n                // Crea una fila para la tabla y agrega los datos\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td>`;\n                // Agrega la fila a la tabla\n                table.appendChild(row);\n              }\n            }\n          }\n        });\n      }\n    }\n    waitAuthorsWithPapersNoEmpty() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        while (!_this2.papersWithAuthors || _this2.papersWithAuthors.length === 0) {\n          yield new Promise(resolve => setTimeout(resolve, 100));\n        }\n      })();\n    }\n    waitSingleAuthorsNoEmpty() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        while (!_this3.singleAuthor || _this3.singleAuthor.length === 0) {\n          yield new Promise(resolve => setTimeout(resolve, 100));\n        }\n      })();\n    }\n    getAuthorsPapers() {\n      var _this4 = this;\n      this.apiService.getAuthorsPapers(this.selectedTitles, this.conferenceOption, this.venueName).subscribe({\n        next: function () {\n          var _ref = _asyncToGenerator(function* (response) {\n            _this4.singleAuthor = response;\n            _this4.statsSingleAuthor();\n            _this4.generateBarChart('barChart1', 'Single Author Papers', _this4.statistics[4].years, _this4.statistics[4].porcentajes);\n          });\n          return function next(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        error: error => {\n          console.error('Error in getAuthorsPapers:', error);\n        }\n      });\n    }\n    /**Function to obtain the distributions of both authors by papers and papers by authors\n     *\n     */\n    getDistributions() {\n      const labels = ['1', '2', '3', '4', '5 o m√°s'];\n      // This represents the number of authors that each paper has.\n      const authorsByPaper = [1, 2, 3, 4].map(numAuthors => this.papersWithAuthors.filter(paper => paper.numAuthors === numAuthors).length);\n      authorsByPaper[4] = this.papersWithAuthors.filter(paper => paper.numAuthors >= 5).length;\n      let allPapers = this.papers.reduce((all, paper) => all + paper.numPapers, 0);\n      // This represents the number of published papers that each author has.\n      const papersByAuthor = [1, 2, 3, 4].map(numPubs => this.singleAuthor.filter(paper => paper.numPublications === numPubs).length);\n      papersByAuthor[4] = this.singleAuthor.filter(paper => paper.numPublications >= 5).length;\n      const allAuthors = this.singleAuthor.length;\n      // We create the two tables that are linked with the ids of the html\n      const authorsTable = document.querySelector('#authorsTable tbody');\n      const papersTable = document.querySelector('#papersTable tbody');\n      if (authorsTable !== null) {\n        authorsByPaper.forEach((amount, index) => {\n          const row = document.createElement('tr');\n          const percentage = (amount / allPapers * 100).toFixed(2);\n          const worth = amount.toString() + \"(\" + percentage + \")\";\n          row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n          authorsTable.appendChild(row);\n        });\n      }\n      if (papersTable !== null) {\n        papersByAuthor.forEach((amount, index) => {\n          const row = document.createElement('tr');\n          const percentage = (amount / allAuthors * 100).toFixed(2);\n          const worth = amount.toString() + \"(\" + percentage + \")\";\n          row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n          papersTable.appendChild(row);\n        });\n      }\n    }\n    getDemographicData() {\n      const datasets = this.researchers.map(researcher => {\n        let name = researcher.researcher.properties.name.split(' ')[0];\n        if (name.includes(\"-\")) {\n          name = name.split('-')[0];\n        }\n        const years = Array.isArray(researcher.years) ? researcher.years : [researcher.years];\n        const datasetByYear = years.map(year => {\n          const info = this.commonNames[name];\n          const genero = info ? info.genero : 'Unknown';\n          const frecuencias = info ? info.frec_paises : {};\n          return {\n            year,\n            name,\n            genero,\n            frecuencias\n          };\n        });\n        return datasetByYear;\n      }).flat();\n      this.statsGender(datasets);\n      this.statsGeography(datasets);\n    }\n    generateNGrams(titles, n) {\n      const ngrams = [];\n      titles.forEach(title => {\n        const words = title.toLowerCase().split(\" \");\n        for (let i = 0; i < words.length - n + 1; i++) {\n          ngrams.push(words.slice(i, i + n).join(\" \"));\n        }\n      });\n      return ngrams;\n    }\n    countFrequencies(ngrams) {\n      const frequencies = new Map();\n      ngrams.forEach(ngram => {\n        const count = frequencies.get(ngram) || 0;\n        frequencies.set(ngram, count + 1);\n      });\n      return frequencies;\n    }\n    clearTitle(title, stopwords) {\n      // Separate the title into words\n      const words = title.toLowerCase().split(\" \").map(word => word.replace(/[^\\w\\s]/g, \"\"));\n      // We eliminate repetitions of letters and plurals to improve frequency\n      const wordsNoRepeat = words.map(word => word.replace(/(.)\\1+/g, \"$1\"));\n      const singularWords = wordsNoRepeat.map(word => singular(word));\n      // Filter words to remove stopwords\n      const filteredWords = singularWords.filter(word => !stopwords.includes(word));\n      // Join the filtered words into a new title\n      const newTitle = filteredWords.join(' ');\n      return newTitle;\n    }\n    getTopN(frequencies, n) {\n      const sortedFrequencies = [...frequencies.entries()].sort((a, b) => b[1] - a[1]);\n      return sortedFrequencies.slice(0, n);\n    }\n    getTopicAnalysis() {\n      // We require natural to tokenize and remove stopwords, and calculate frequencies\n      const stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', '.', ','];\n      const cleanTitles = this.papersWithAuthors.map(paper => {\n        const ipName = this.clearTitle(paper.ipName, stopwords);\n        const year = parseInt(paper.year);\n        return {\n          ipName,\n          year\n        };\n      });\n      const bigrams = this.generateNGrams(cleanTitles.map(paper => paper.ipName), 2);\n      const trigrams = this.generateNGrams(cleanTitles.map(paper => paper.ipName), 3);\n      const bigramFrequencies = this.countFrequencies(bigrams);\n      const trigramFrequencies = this.countFrequencies(trigrams);\n      const top20Bigrams = this.getTopN(bigramFrequencies, 20);\n      const top20Trigrams = this.getTopN(trigramFrequencies, 20);\n      const top20BigramsWithYears = top20Bigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: cleanTitles.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n      }));\n      const top20TrigramsWithYears = top20Trigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: cleanTitles.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n      }));\n      const table1 = document.querySelector('#tableBigramas tbody');\n      const table2 = document.querySelector('#tableTrigramas tbody');\n      if (table1 instanceof HTMLElement && table2 instanceof HTMLElement) {\n        top20BigramsWithYears.forEach(({\n          ngram,\n          count,\n          years\n        }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n          table1.appendChild(row);\n        });\n        top20TrigramsWithYears.forEach(({\n          ngram,\n          count,\n          years\n        }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n          table2.appendChild(row);\n        });\n      }\n      const combinedData = [...top20BigramsWithYears, ...top20TrigramsWithYears];\n      combinedData.sort((a, b) => b.count - a.count);\n      const maxFrecuencia = combinedData[0].count;\n      const minWeight = 0;\n      const maxWeight = 20;\n      const wordCloudData = combinedData.map((item, index) => ({\n        text: item.ngram,\n        weight: this.calculateWeight(item.count, maxFrecuencia, minWeight, maxWeight),\n        color: this.randomColor()\n      }));\n      this.cloudData = wordCloudData;\n    }\n    generateTablesDecades() {\n      const table = document.querySelector('#tableInstitution tbody');\n      if (table instanceof HTMLElement) {\n        this.researchers2.forEach(({\n          School,\n          NumberOfAuthors,\n          Country\n        }) => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${School}</td><td>${NumberOfAuthors}</td><td>${Country}</td>`;\n          table.appendChild(row);\n        });\n      }\n    }\n    calculateWeight(frec, maxFrec, minWeight, maxWeight) {\n      const weight = frec / maxFrec;\n      const normWeight = weight * (maxWeight - minWeight) + minWeight;\n      return Math.round(normWeight);\n    }\n    /**\n     * ############################################\n     */\n    statsResearchers() {\n      const years = this.selectedTitles.map(titulo => titulo.properties.name);\n      this.selectedYears = years;\n      const numResearchersPorAnio = years.map(anio => this.researchers.filter(researcher => researcher.years.includes(anio)).length);\n      this.statistics[0] = {\n        years: years,\n        numResearchers: numResearchersPorAnio\n      };\n    }\n    statsPapers() {\n      const years = this.papers.map(paper => paper.year);\n      const numPapers = this.papers.map(paper => paper.numPapers);\n      this.statistics[1] = {\n        years: years,\n        numPapers: numPapers\n      };\n    }\n    statsColaboraciones() {\n      const colabsXtotal = this.papers.map(paper => {\n        const colab = this.collaborations.find(c => c.year === paper.year);\n        return {\n          year: paper.year,\n          numColabs: colab ? colab.numColabs : 0,\n          numPapers: paper.numPapers\n        };\n      });\n      const density = colabsXtotal.map(dato => {\n        const {\n          year,\n          numColabs,\n          numPapers\n        } = dato;\n        const density = numColabs / numPapers;\n        return {\n          density,\n          year\n        };\n      });\n      this.statistics[3] = {\n        years: density.map(dato => dato.year),\n        densidades: density.map(dato => dato.density)\n      };\n    }\n    statsConnectedComponents() {\n      // Copiar los datos originales para no afectar el orden original\n      const copiedData = [...this.connectedComponents];\n      // Ordenar los datos por a√±o\n      copiedData.sort((a, b) => a.year - b.year);\n      // Extraer los a√±os y componentes conectados ordenados\n      const years = copiedData.map(item => item.year);\n      const connectedComponents = copiedData.map(item => item.connectedComponents);\n      this.statistics[5] = {\n        years: years,\n        connectedComponents: connectedComponents\n        // Puedes agregar otras propiedades si es necesario\n      };\n    }\n\n    statsConnectedComponentsByvenue() {\n      const venueDataMap = new Map();\n      const venueDataMapRelative = new Map();\n      let currentIndex = 0;\n      let currentIndex2 = 0;\n      this.connectedComponents.forEach(item => {\n        const venueName = item.venueName;\n        if (!venueDataMap.has(venueName)) {\n          venueDataMap.set(venueName, {\n            years: [],\n            connectedComponents: [],\n            venueName: venueName,\n            index: currentIndex\n          });\n          currentIndex++;\n        }\n        const venueData = venueDataMap.get(venueName);\n        if (venueData) {\n          venueData.years.push(item.year);\n          venueData.connectedComponents.push(item.connectedComponents);\n        }\n      });\n      this.connectedComponents.forEach(item => {\n        const venueName = item.venueName;\n        if (!venueDataMapRelative.has(venueName)) {\n          venueDataMapRelative.set(venueName, {\n            years: [],\n            connectedComponents: [],\n            venueName: venueName,\n            index: currentIndex2\n          });\n          currentIndex2++;\n        }\n        const venueData = venueDataMapRelative.get(venueName);\n        if (venueData) {\n          venueData.years.push(item.year);\n          let adjustedComponents = item.connectedComponents;\n          while (adjustedComponents > 1) {\n            adjustedComponents /= 10;\n          }\n          venueData.connectedComponents.push(adjustedComponents);\n        }\n      });\n      this.statistics[6] = Array.from(venueDataMap.values());\n      this.statistics[7] = Array.from(venueDataMapRelative.values());\n    }\n    statsSingleAuthor() {\n      const papersWithAuthors = [];\n      // Map all the researchers, to create papersWithAuthors, which is an array that has the name of a publication\n      // and the authors who have contributed to it.\n      this.singleAuthor.forEach(author => {\n        author.ipNames.forEach(ipName => {\n          const paperIndex = papersWithAuthors.findIndex(paper => paper.ipName === ipName);\n          if (paperIndex !== -1) {\n            papersWithAuthors[paperIndex].numAuthors++;\n            papersWithAuthors[paperIndex].authorNames.push(author.researcher);\n          } else {\n            papersWithAuthors.push({\n              ipName,\n              numAuthors: 1,\n              authorNames: [author.researcher],\n              year: author.year\n            });\n          }\n        });\n      });\n      this.papersWithAuthors = papersWithAuthors;\n      // We get all the entries whose author is one, for the statistics\n      const papersWithOneAuthor = papersWithAuthors.filter(paper => paper.numAuthors === 1);\n      const porcentajeByYear = this.papers.map(paper => {\n        const year = paper.year;\n        const numPapers = paper.numPapers;\n        const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n        const percentage = numPapersWithSingleAuthor / numPapers * 100;\n        return {\n          year,\n          percentage\n        };\n      });\n      this.statistics[4] = {\n        years: porcentajeByYear.map(dato => dato.year),\n        porcentajes: porcentajeByYear.map(dato => dato.percentage)\n      };\n    }\n    statsGeography(datasets) {\n      const mappingDate = {};\n      const datasetFiltered = datasets.filter(object => Object.keys(object.frecuencias).length > 0);\n      // Obtener todas las fechas √∫nicas\n      const uniqueDates = [...new Set(datasetFiltered.map(dato => dato.year))];\n      // Iterar sobre las fechas\n      for (const date of uniqueDates) {\n        const objectDate = datasetFiltered.filter(dato => dato.year === date);\n        // Crear objeto de mapeo para la fecha actual\n        mappingDate[date] = {};\n        for (const object of objectDate) {\n          let countryHighest = '';\n          let highestFrequency = -1;\n          for (const country in object.frecuencias) {\n            if (object.frecuencias[country] > highestFrequency) {\n              countryHighest = country;\n              highestFrequency = object.frecuencias[country];\n            }\n          }\n          if (!(countryHighest in mappingDate[date])) {\n            mappingDate[date][countryHighest] = 1;\n          } else {\n            mappingDate[date][countryHighest] = mappingDate[date][countryHighest] + 1;\n          }\n        }\n      }\n      // We normalize values according to their total\n      for (const year in mappingDate) {\n        let total = 0;\n        for (const country in mappingDate[year]) {\n          total += mappingDate[year][country];\n        }\n        for (const country in mappingDate[year]) {\n          mappingDate[year][country] = Number((mappingDate[year][country] / total).toFixed(4));\n        }\n      }\n      const years = Object.keys(mappingDate); // Get the keys of the years\n      const countries = Object.keys(mappingDate[years[0]]); // Get country names\n      const datasetsLabels = countries; // Labels of the data sets will be the names of the countries \n      // Create the data matrix for the countries\n      const datasetsData = countries.map(country => years.map(year => mappingDate[year][country]));\n      this.generateMultipleGraph('lineChart5', years, datasetsLabels, datasetsData);\n    }\n    filterAuthorsByDecade(authors, startYear, endYear) {\n      const filteredAuthors = [];\n      // Browse the original authors\n      authors.forEach(author => {\n        // Check if the author is within the specified decade\n        const authorYears = author.year.split(\",\").map(Number).filter(year => year >= startYear && year <= endYear);\n        if (authorYears.length > 0) {\n          // Search if there is already a merged author with the same name and decade\n          const existingAuthor = filteredAuthors.find(filteredAuthor => filteredAuthor.researcher === author.researcher);\n          if (existingAuthor) {\n            // Merge the existing author's entries with the current author's entries\n            existingAuthor.numPublications += author.numPublications;\n            existingAuthor.year += `, ${author.year}`;\n          } else {\n            // Add the current author to the list of filtered authors\n            filteredAuthors.push({\n              ipNames: author.ipNames,\n              numPublications: author.numPublications,\n              researcher: author.researcher,\n              year: author.year\n            });\n          }\n        }\n      });\n      return filteredAuthors;\n    }\n    statsProlificAuthors(selectedYears) {\n      // Get the range of years selected by the user\n      const startYear = Math.min(...selectedYears);\n      const endYear = Math.max(...selectedYears);\n      // Calculate the decades corresponding to the selected range of years\n      const startDecade = Math.floor(startYear / 10) * 10;\n      const endDecade = Math.floor(endYear / 10) * 10;\n      // Generate the decades within the selected year range\n      const decades = [];\n      for (let decade = startDecade; decade <= endDecade; decade += 10) {\n        const decadeLabel = `${decade}s`;\n        const decadeStartYear = decade;\n        const decadeEndYear = decade + 9;\n        const decadeAuthors = this.filterAuthorsByDecade(this.singleAuthor, decadeStartYear, decadeEndYear);\n        decades.push({\n          label: decadeLabel,\n          startYear: decadeStartYear,\n          endYear: decadeEndYear,\n          authors: decadeAuthors\n        });\n      }\n      // Sort authors by number of publications in each decade\n      decades.forEach(decade => {\n        decade.authors.sort((a, b) => b.numPublications - a.numPublications);\n        if (decade.authors.length > 20) {\n          decade.authors = decade.authors.slice(0, 20);\n        }\n      });\n      // Return the decades with the authors ordered\n      return decades;\n    }\n    statsProlificAuthors2(selectedYears) {\n      const startYear = Math.min(...selectedYears);\n      const endYear = Math.max(...selectedYears);\n      const allAuthors = this.filterAuthorsByDecade(this.singleAuthor, startYear, endYear);\n      const topAuthors = allAuthors.sort((a, b) => b.numPublications - a.numPublications).slice(0, 20);\n      const tables = {\n        'degree': document.querySelector('#degree tbody')\n      };\n      for (const author of topAuthors) {\n        const table = tables['degree'];\n        if (table instanceof HTMLElement) {\n          const yearsArray = author.year.split(\",\").map(Number);\n          const minYear = Math.min(...yearsArray);\n          const maxYear = Math.max(...yearsArray);\n          const row = document.createElement('tr');\n          row.innerHTML = `\n  \n                         <td >${author.researcher}</td>\n                         <td style=\"padding-left: 50px\" >${author.numPublications}</td>\n                         <td style=\"padding-left: 50px\">${minYear}</td> \n                         <td style=\"padding-left: 80px\">${maxYear}</td>`;\n          table.appendChild(row);\n        }\n      }\n    }\n    generateTablesDecades2(decadeStats) {\n      const tables = {\n        '1990s': document.querySelector('#table90 tbody'),\n        '2000s': document.querySelector('#table00 tbody'),\n        '2010s': document.querySelector('#table10 tbody'),\n        '2020s': document.querySelector('#table20 tbody')\n      };\n      for (const decade of decadeStats) {\n        const table = tables[decade.label];\n        if (table instanceof HTMLElement) {\n          decade.authors.slice(0, 20).forEach(autor => {\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${autor.researcher}</td><td>${autor.numPublications}</td>`;\n            table.appendChild(row);\n          });\n        }\n      }\n    }\n    generateChart3(idChart, label, labels, data) {\n      if (idChart == \"lineChart1\") {\n        this.lineChart = new Chart(idChart, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: label,\n              data: data,\n              fill: false,\n              borderColor: 'rgb(0, 22, 68)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                labels: {\n                  color: 'black',\n                  font: {\n                    size: 18,\n                    family: 'Roboto'\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                type: 'linear',\n                display: true\n              }\n            }\n          }\n        });\n      }\n      if (idChart == \"lineChart2\" || idChart == \"lineChart11\" || idChart == \"lineChart3\") {\n        this.lineChart2 = new Chart(idChart, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: label,\n              data: data,\n              fill: false,\n              borderColor: 'rgb(0, 22, 68)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                labels: {\n                  color: 'black',\n                  font: {\n                    size: 18,\n                    family: 'Roboto'\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                type: 'linear',\n                display: true\n              }\n            }\n          }\n        });\n      }\n    }\n    generateChart4(idChart, label, venueDataMap) {\n      const datasets = venueDataMap.map(venue => {\n        return {\n          label: venue.venueName,\n          data: venue.connectedComponents,\n          years: venue.years,\n          backgroundColor: 'rgba(0, 0, 0, 0.1)',\n          borderColor: this.getRandomColor(venue.index)\n        };\n      });\n      const allYears = Array.from(new Set([].concat(...datasets.map(dataset => dataset.years))));\n      allYears.sort();\n      this.lineChart = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: allYears,\n          datasets: datasets.map(dataset => {\n            return {\n              label: dataset.label,\n              data: allYears.map(year => {\n                const index = dataset.years.indexOf(year);\n                return index !== -1 ? dataset.data[index] : null;\n              }),\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              borderColor: dataset.borderColor\n            };\n          })\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n    getRandomColor2(seed) {\n      const colorSeed = seed.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n      const randomColor = Math.floor(Math.abs(Math.sin(colorSeed) * 16777215) % 16777215).toString(16);\n      return '#' + randomColor;\n    }\n    statsGender(datasets) {\n      const datasetsByGenre = {};\n      datasets.forEach(data => {\n        const {\n          year,\n          genero\n        } = data;\n        let genderKey = '';\n        if (genero == 'M' || genero == '?M' || genero == '1M' || genero == '?') {\n          genderKey = 'Men';\n        } else if (genero == 'F' || genero == '?F' || genero == '1F') {\n          genderKey = 'Women';\n        } else {\n          genderKey = 'Unknown';\n        }\n        if (!datasetsByGenre[genderKey]) {\n          datasetsByGenre[genderKey] = [];\n        }\n        const existingData = datasetsByGenre[genderKey].find(d => d.year === year);\n        if (existingData) {\n          existingData.count++;\n        } else {\n          datasetsByGenre[genderKey].push({\n            year,\n            count: 1\n          });\n        }\n      });\n      // Create an object to store the ordered data\n      const sortedData = {};\n      const men = datasetsByGenre['Men'];\n      const women = datasetsByGenre['Women'];\n      // Sort men's data\n      men.forEach(dato => {\n        const year = dato.year;\n        const count = dato.count;\n        sortedData[year] = {\n          hombres: count,\n          mujeres: 0,\n          total: count\n        };\n      });\n      // Sort the women's data and combine it with the men's data\n      women.forEach(dato => {\n        const year = dato.year;\n        const count = dato.count;\n        if (sortedData[year]) {\n          sortedData[year].mujeres = count;\n          sortedData[year].total += count;\n        } else {\n          sortedData[year] = {\n            mujeres: count,\n            hombres: 0,\n            total: count\n          };\n        }\n      });\n      // Get the years sorted\n      const organizedYears = Object.keys(sortedData).sort();\n      const countMen = organizedYears.map(anio => Number((sortedData[anio].hombres / sortedData[anio].total).toFixed(4)));\n      const countWoman = organizedYears.map(anio => Number((sortedData[anio].mujeres / sortedData[anio].total).toFixed(4)));\n      this.generateCircularChart('lineChart4', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n      this.generateMultipleGraph('lineChart8', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n    }\n    generateMultipleGraph(chartId, labels, datasetsLabels, datasetsData) {\n      const datasets = datasetsLabels.map((label, index) => ({\n        label: label,\n        data: datasetsData[index],\n        backgroundColor: 'rgba(0, 0, 0, 0.1)',\n        borderColor: this.getRandomColor(index)\n      }));\n      const chartConfig = {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      };\n      const ctx = document.getElementById(chartId);\n      new Chart(ctx, chartConfig);\n    }\n    generateCircularChart(chartId, labels, datasetsLabels, datasetsData) {\n      const colors = ['#FF5733', '#3399FF'];\n      const datasets = datasetsLabels.map((label, index) => ({\n        label: label,\n        data: datasetsData[index],\n        backgroundColor: colors[index],\n        borderColor: 'black'\n      }));\n      const chartConfig = {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false,\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          }\n        }\n      };\n      const ctx = document.getElementById(chartId);\n      new Chart(ctx, chartConfig);\n    }\n    generateBarChart(idChart, label, labels, data) {\n      this.barChart = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: label,\n            data: data,\n            backgroundColor: 'rgb(0, 22, 68)',\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n    randomColor() {\n      const r = Math.floor(Math.random() * 256);\n      const g = Math.floor(Math.random() * 256);\n      const b = Math.floor(Math.random() * 256);\n      return `rgba(${r}, ${g}, ${b}, 1)`;\n    }\n    getRandomColor(index) {\n      let colors = {\n        0: \"rgba(75, 192, 192, 1)\",\n        1: \"rgba(192, 75, 75, 1)\",\n        2: \"rgba(98, 192, 75, 1)\",\n        3: \"rbga(192, 141, 75, 1)\",\n        4: \"rgba(226, 232, 107, 1)\",\n        5: \"rgba(176, 75, 192, 1)\"\n      };\n      return colors[index];\n    }\n    loadCommonNames() {\n      this.http.get('assets/common_names.txt', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.commonNames = this.parseCommonNames(data);\n      }, error => {\n        console.error('Error al cargar los datos:', error);\n      });\n    }\n    parseCommonNames(data) {\n      const lines = data.split('\\n');\n      const dict = {};\n      let currentName = '';\n      let currentData = {\n        frec_paises: {},\n        genero: ''\n      };\n      for (const linea of lines) {\n        if (linea.startsWith('nombre:')) {\n          currentName = linea.split(':')[1].trim();\n          currentData = {\n            frec_paises: {},\n            genero: ''\n          };\n        } else if (linea.startsWith('frec_paises:')) {\n          const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n          const frec_paises = JSON.parse(frec_paisesStr);\n          currentData.frec_paises = frec_paises;\n        } else if (linea.startsWith('genero:')) {\n          currentData.genero = linea.split(':')[1].trim();\n        } else if (linea.trim() === '') {\n          dict[currentName] = currentData;\n        }\n      }\n      return dict;\n    }\n    main() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this5.selectedTitles = _this5.stadisticsService.getSelectedTitles();\n          console.log(_this5.selectedTitles);\n          _this5.conferenceOption = _this5.stadisticsService.getConferenceOption();\n          console.log(_this5.conferenceOption);\n          _this5.venueName = _this5.stadisticsService.getVenueName();\n          console.log(_this5.venueName);\n          _this5.getPapers();\n          _this5.getCollaborations();\n          _this5.getAuthorsPapers();\n          _this5.getResearchersConference();\n          _this5.getSchools();\n          _this5.generateTablesDecades();\n          _this5.getConferencebyProceeding();\n          if (_this5.researchers.length == 0) {\n            yield _this5.waitResearcherNoEmpty();\n            _this5.getDemographicData();\n          } else {\n            _this5.getDemographicData();\n          }\n          if (_this5.papersWithAuthors.length == 0) {\n            yield _this5.waitAuthorsWithPapersNoEmpty();\n            _this5.getTopicAnalysis();\n            _this5.getDistributions();\n          } else {\n            _this5.getTopicAnalysis();\n            _this5.getDistributions();\n          }\n          if (_this5.singleAuthor.length == 0) {\n            yield _this5.waitSingleAuthorsNoEmpty();\n            _this5.decadeStats = _this5.statsProlificAuthors(_this5.selectedYears);\n            _this5.generateTablesDecades2(_this5.decadeStats);\n          } else {\n            _this5.decadeStats = _this5.statsProlificAuthors(_this5.selectedYears);\n            _this5.generateTablesDecades2(_this5.decadeStats);\n          }\n          _this5.statsProlificAuthors2(_this5.selectedYears);\n          _this5.getConnectedComponents();\n          _this5.getConnectedComponentsByvenue();\n        } catch (error) {\n          console.error('Error in getData with:', error);\n        }\n      })();\n    }\n    static #_ = this.…µfac = function StatisticsComponent_Factory(t) {\n      return new (t || StatisticsComponent)(i0.…µ…µdirectiveInject(i1.ApiService), i0.…µ…µdirectiveInject(i2.StadisticsService), i0.…µ…µdirectiveInject(i3.HttpClient));\n    };\n    static #_2 = this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n      type: StatisticsComponent,\n      selectors: [[\"app-statistics\"]],\n      viewQuery: function StatisticsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.…µ…µqueryRefresh(_t = i0.…µ…µloadQuery()) && (ctx.chartCanvas = _t.first);\n        }\n      },\n      decls: 243,\n      vars: 2,\n      consts: [[1, \"flex-container\"], [1, \"flex-item\"], [1, \"canvas-container\"], [\"id\", \"lineChart1\"], [\"id\", \"lineChart2\"], [1, \"line\"], [\"id\", \"lineChart3\"], [\"id\", \"barChart1\"], [1, \"special\"], [1, \"container-table\"], [1, \"table\"], [\"id\", \"authorsTable\"], [1, \"linev\"], [\"id\", \"papersTable\"], [1, \"flex-container2\"], [1, \"graph-bars\"], [1, \"canvas-container1\"], [1, \"legend\"], [1, \"men\"], [1, \"women\"], [\"id\", \"lineChart4\", 1, \"circular\"], [1, \"graph-bars2\"], [1, \"canvas-container2\"], [\"id\", \"lineChart8\"], [\"id\", \"lineChart5\"], [\"id\", \"tableBigramas\"], [\"id\", \"tableTrigramas\"], [1, \"conceptual\"], [3, \"config\", \"data\"], [1, \"container-table2\"], [\"id\", \"table90\"], [\"colspan\", \"2\"], [\"id\", \"table00\"], [\"id\", \"table10\", 1, \"centered-table\"], [\"id\", \"table20\", 1, \"centered-table\"], [1, \"line3\"], [\"id\", \"degree\"], [\"id\", \"tableProceeding\"], [\"id\", \"lineChart11\"], [\"id\", \"lineChart12\"], [\"id\", \"lineChart13\"], [\"id\", \"tableInstitution\"]],\n      template: function StatisticsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µelementStart(0, \"div\")(1, \"h2\");\n          i0.…µ…µtext(2, \"Statistics\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(3, \"div\", 0)(4, \"div\", 1)(5, \"h3\");\n          i0.…µ…µtext(6, \"Authors by year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(7, \"div\", 2);\n          i0.…µ…µelement(8, \"canvas\", 3);\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(9, \"div\", 1)(10, \"h3\");\n          i0.…µ…µtext(11, \"Papers by year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(12, \"div\", 2);\n          i0.…µ…µelement(13, \"canvas\", 4);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(14, \"hr\", 5);\n          i0.…µ…µelementStart(15, \"div\", 0)(16, \"div\", 1)(17, \"h3\");\n          i0.…µ…µtext(18, \"Density evolution over the years\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(19, \"div\", 2);\n          i0.…µ…µelement(20, \"canvas\", 6);\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(21, \"div\", 1)(22, \"h3\");\n          i0.…µ…µtext(23, \"Percentage of single-author papers per year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(24, \"div\", 2);\n          i0.…µ…µelement(25, \"canvas\", 7);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(26, \"hr\", 5);\n          i0.…µ…µelementStart(27, \"h3\", 8);\n          i0.…µ…µtext(28, \"Distributions of authors per paper and of papers per author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(29, \"div\", 9)(30, \"div\", 10)(31, \"table\", 11)(32, \"thead\")(33, \"tr\")(34, \"th\");\n          i0.…µ…µtext(35, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(36, \"th\");\n          i0.…µ…µtext(37, \"Papers (%)\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(38, \"tbody\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(39, \"div\", 12);\n          i0.…µ…µelementStart(40, \"div\", 10)(41, \"table\", 13)(42, \"thead\")(43, \"tr\")(44, \"th\");\n          i0.…µ…µtext(45, \"Papers\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(46, \"th\");\n          i0.…µ…µtext(47, \"Author (%)\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(48, \"tbody\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(49, \"hr\", 5);\n          i0.…µ…µelementStart(50, \"h3\", 8);\n          i0.…µ…µtext(51, \" Percentage of Publications Men-Women / Year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(52, \"div\", 14)(53, \"div\", 15)(54, \"div\", 16)(55, \"div\", 17);\n          i0.…µ…µelement(56, \"div\", 18);\n          i0.…µ…µtext(57, \" Men \");\n          i0.…µ…µelement(58, \"div\", 19);\n          i0.…µ…µtext(59, \" Women \");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelement(60, \"canvas\", 20);\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(61, \"div\", 21)(62, \"div\", 22);\n          i0.…µ…µelement(63, \"canvas\", 23);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(64, \"hr\", 5);\n          i0.…µ…µelementStart(65, \"h3\");\n          i0.…µ…µtext(66, \" Percentage of publications by Country / Year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(67, \"div\", 0)(68, \"div\", 1)(69, \"div\", 2);\n          i0.…µ…µelement(70, \"canvas\", 24);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(71, \"hr\", 5);\n          i0.…µ…µelementStart(72, \"h3\", 8);\n          i0.…µ…µtext(73, \"Most frequent Bigrams and Trigrams\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(74, \"div\", 9)(75, \"div\", 10)(76, \"table\", 25)(77, \"thead\")(78, \"tr\")(79, \"th\");\n          i0.…µ…µtext(80, \"Bigrams\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(81, \"th\");\n          i0.…µ…µtext(82, \"Appearances\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(83, \"th\");\n          i0.…µ…µtext(84, \"First \");\n          i0.…µ…µelement(85, \"br\");\n          i0.…µ…µtext(86, \" a\\u00F1o\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(87, \"th\");\n          i0.…µ…µtext(88, \"Recent \");\n          i0.…µ…µelement(89, \"br\");\n          i0.…µ…µtext(90, \" a\\u00F1o\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(91, \"tbody\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(92, \"div\", 12);\n          i0.…µ…µelementStart(93, \"div\", 10)(94, \"table\", 26)(95, \"thead\")(96, \"tr\")(97, \"th\");\n          i0.…µ…µtext(98, \"Trigrams\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(99, \"th\");\n          i0.…µ…µtext(100, \"Appearances\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(101, \"th\");\n          i0.…µ…µtext(102, \"First \");\n          i0.…µ…µelement(103, \"br\");\n          i0.…µ…µtext(104, \" a\\u00F1o\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(105, \"th\");\n          i0.…µ…µtext(106, \"Recent \");\n          i0.…µ…µelement(107, \"br\");\n          i0.…µ…µtext(108, \" a\\u00F1o\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(109, \"tbody\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(110, \"hr\", 5);\n          i0.…µ…µelementStart(111, \"h3\", 8);\n          i0.…µ…µtext(112, \"Frequent terms from all titles of papers\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(113, \"div\", 27);\n          i0.…µ…µelement(114, \"angular-tag-cloud\", 28);\n          i0.…µ…µelementEnd();\n          i0.…µ…µelement(115, \"hr\", 5);\n          i0.…µ…µelementStart(116, \"h3\", 8);\n          i0.…µ…µtext(117, \"Most prolific authors according to their number of publications accumulated by decade\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(118, \"div\", 29)(119, \"div\", 10)(120, \"table\", 30)(121, \"thead\")(122, \"tr\")(123, \"th\", 31);\n          i0.…µ…µtext(124, \" (a) 1989-1999 \");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(125, \"hr\");\n          i0.…µ…µelementStart(126, \"tr\")(127, \"th\");\n          i0.…µ…µtext(128, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(129, \"th\");\n          i0.…µ…µtext(130, \"#\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(131, \"tbody\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(132, \"div\", 12);\n          i0.…µ…µelementStart(133, \"div\", 10)(134, \"table\", 32)(135, \"thead\")(136, \"tr\")(137, \"th\", 31);\n          i0.…µ…µtext(138, \" (b) 1999-2009 \");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(139, \"hr\");\n          i0.…µ…µelementStart(140, \"tr\")(141, \"th\");\n          i0.…µ…µtext(142, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(143, \"th\");\n          i0.…µ…µtext(144, \"#\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(145, \"tbody\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(146, \"div\", 12);\n          i0.…µ…µelementStart(147, \"div\", 10)(148, \"table\", 33)(149, \"thead\")(150, \"tr\")(151, \"th\", 31);\n          i0.…µ…µtext(152, \" (a) 2009-2019 \");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(153, \"hr\");\n          i0.…µ…µelementStart(154, \"tr\")(155, \"th\");\n          i0.…µ…µtext(156, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(157, \"th\");\n          i0.…µ…µtext(158, \"#\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(159, \"tbody\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(160, \"div\", 12);\n          i0.…µ…µelementStart(161, \"div\", 10)(162, \"table\", 34)(163, \"thead\")(164, \"tr\")(165, \"th\", 31);\n          i0.…µ…µtext(166, \" (a) 2019-2024 \");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelement(167, \"hr\");\n          i0.…µ…µelementStart(168, \"tr\")(169, \"th\");\n          i0.…µ…µtext(170, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(171, \"th\");\n          i0.…µ…µtext(172, \"#\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(173, \"tbody\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(174, \"hr\", 35);\n          i0.…µ…µelementStart(175, \"h3\");\n          i0.…µ…µtext(176, \"Authors with their first and most recent year of publication\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(177, \"div\", 29)(178, \"div\", 10)(179, \"table\", 36)(180, \"thead\")(181, \"tr\")(182, \"th\");\n          i0.…µ…µtext(183, \"Author\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(184, \"th\");\n          i0.…µ…µtext(185, \"Degree\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(186, \"th\");\n          i0.…µ…µtext(187, \"First \");\n          i0.…µ…µelement(188, \"br\");\n          i0.…µ…µtext(189, \" year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(190, \"th\");\n          i0.…µ…µtext(191, \"Recent \");\n          i0.…µ…µelement(192, \"br\");\n          i0.…µ…µtext(193, \" year\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(194, \"tbody\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(195, \"hr\", 35);\n          i0.…µ…µelementStart(196, \"h3\");\n          i0.…µ…µtext(197, \"Proceeding by Conference\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(198, \"div\", 29)(199, \"div\", 10)(200, \"table\", 37)(201, \"thead\")(202, \"tr\")(203, \"th\");\n          i0.…µ…µtext(204, \"Name\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(205, \"th\");\n          i0.…µ…µtext(206, \"Location\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(207, \"th\");\n          i0.…µ…µtext(208, \"Date\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(209, \"th\");\n          i0.…µ…µtext(210, \"Year\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(211, \"tbody\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(212, \"hr\", 35);\n          i0.…µ…µelementStart(213, \"div\", 0)(214, \"div\", 1)(215, \"h3\");\n          i0.…µ…µtext(216, \"All Connected Components by year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(217, \"div\", 2);\n          i0.…µ…µelement(218, \"canvas\", 38);\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(219, \"div\", 1)(220, \"h3\");\n          i0.…µ…µtext(221, \"Connected components for each Conference by year\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(222, \"div\", 2);\n          i0.…µ…µelement(223, \"canvas\", 39);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelementStart(224, \"h3\");\n          i0.…µ…µtext(225, \"Relative size of components connected by conference\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(226, \"div\", 0)(227, \"div\", 1)(228, \"div\", 2);\n          i0.…µ…µelement(229, \"canvas\", 40);\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(230, \"hr\", 35);\n          i0.…µ…µelementStart(231, \"div\", 29)(232, \"div\", 10)(233, \"table\", 41)(234, \"thead\")(235, \"tr\")(236, \"th\");\n          i0.…µ…µtext(237, \"Institution\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(238, \"th\");\n          i0.…µ…µtext(239, \"Number of Authors\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(240, \"th\");\n          i0.…µ…µtext(241, \"Country\");\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelement(242, \"tbody\");\n          i0.…µ…µelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.…µ…µadvance(114);\n          i0.…µ…µproperty(\"config\", ctx.options)(\"data\", ctx.cloudData);\n        }\n      },\n      dependencies: [i4.TagCloudComponent],\n      styles: [\"@charset \\\"UTF-8\\\";h2[_ngcontent-%COMP%]{text-align:center;font-size:30px}h3[_ngcontent-%COMP%]{text-align:center;font-size:20px;margin-bottom:10px}.flex-container[_ngcontent-%COMP%], .flex-container2[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;overflow:auto}.graph-bars[_ngcontent-%COMP%], .graph-bars2[_ngcontent-%COMP%]{padding:20px;margin-bottom:50px}.canvas-container1[_ngcontent-%COMP%]{border:2px solid rgb(0,22,68);padding:20px;width:91%}.canvas-container2[_ngcontent-%COMP%]{border:2px solid rgb(0,22,68);padding:20px;width:96%}.legend[_ngcontent-%COMP%]{display:flex;justify-content:center;font-size:18px;margin-bottom:20px}.flex-item[_ngcontent-%COMP%]{padding:20px;margin-bottom:50px}.canvas-container[_ngcontent-%COMP%]{border:2px solid rgb(0,22,68);padding:20px;width:95%}canvas[_ngcontent-%COMP%]{max-width:100%;height:auto;display:block}.line3[_ngcontent-%COMP%]{margin-top:30px;margin-bottom:30px}.line[_ngcontent-%COMP%]{margin-top:20px;margin-bottom:20px;background-color:#001644}.container-table[_ngcontent-%COMP%]{width:100%;justify-content:center;display:flex;overflow:auto}.container-table2[_ngcontent-%COMP%]{justify-content:center;display:flex;margin-right:100px}.linev[_ngcontent-%COMP%]{border-right:1px solid rgb(0,22,68);margin-right:45px;margin-left:20px}.table[_ngcontent-%COMP%]{text-align:center}td[_ngcontent-%COMP%], th[_ngcontent-%COMP%]{padding:20px;vertical-align:middle;text-align:center;vertical-align:center;font-size:20px}div[_ngcontent-%COMP%]{min-width:40px;min-height:1px;margin-right:5px}.special[_ngcontent-%COMP%]{margin-bottom:40px}#tableInstitution[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(3){padding-left:120px}#degree[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(2), #degree[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(3){padding-left:60px}#degree[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(4){padding-left:90px}.men[_ngcontent-%COMP%]{background-color:#39f}.women[_ngcontent-%COMP%]{background-color:#ff5733;margin-left:20PX}@media screen and (max-width: 768px){td[_ngcontent-%COMP%], th[_ngcontent-%COMP%]{padding:10px}.legend[_ngcontent-%COMP%]{display:flex;justify-content:center;font-size:10px;margin-bottom:20px}.container-table[_ngcontent-%COMP%], .container-table2[_ngcontent-%COMP%]{flex-direction:column}.table[_ngcontent-%COMP%]{border-right:none;padding-right:0;padding-bottom:20px}#tableInstitution[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(3){padding-left:0}#tableInstitution[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3){padding-left:0}}.conceptual[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:200px}.aparte[_ngcontent-%COMP%]{margin-top:500px}\"]\n    });\n  }\n  return StatisticsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\n//import { Chart, CategoryScale, LineController  } from 'chart.js';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nimport { singular } from 'pluralize';\nlet StatisticsComponent = class StatisticsComponent {\n  constructor(apiService, stadisticsService, http, spinnerService) {\n    this.apiService = apiService;\n    this.stadisticsService = stadisticsService;\n    this.http = http;\n    this.spinnerService = spinnerService;\n    this.selectedTitles = [];\n    this.selectedYears = [];\n    this.conferenceOption = \"\";\n    this.venueName = [];\n    this.papers = [];\n    this.articles = [];\n    this.collaborations = [];\n    this.connectedComponents = [];\n    this.singleAuthor = [];\n    this.statistics = [];\n    this.statsAuthors = [];\n    this.statsPaper = [];\n    this.statsArticle = [];\n    this.journalsCount = 0;\n    this.ConferencesCount = 0;\n    this.totalAuthorsByYear = [];\n    this.totalPapersByYear = [];\n    this.totalArticlesByYear = [];\n    this.singleArticles = [];\n    this.singlePapers = [];\n    this.decadeStats = [];\n    this.researchers = [];\n    this.papersWithAuthors = [];\n    this.loadingTable1 = true;\n    this.loadingTable2 = true;\n    this.conferenceName = [];\n    this.commonNames = {};\n    this.options = {\n      width: 500,\n      height: 200,\n      overflow: false,\n      realignOnResize: false,\n      strict: false,\n      step: 2\n    };\n    this.cloudData = [];\n  }\n  ngOnInit() {\n    this.loadCommonNames();\n    this.main();\n  }\n  waitResearcherNoEmpty() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      while (!_this.researchers || _this.researchers.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  waitPapersNoEmpty() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      while (!_this2.papers || _this2.papers.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  getResearchersConference() {\n    this.apiService.getResearchersConference(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.researchers = [];\n        this.researchers = response;\n        this.statsResearchers();\n        this.statsTotalAuthorsByYear();\n        if (this.researchers.length > 1) {\n          if (this.lineChart) {\n            this.lineChart.destroy();\n          }\n          this.generateChart('lineChart1', 'Number of authors', this.statsAuthors);\n          this.generateTotalAuthorsChart('lineChart6', 'Total Authors by Year', this.totalAuthorsByYear);\n        }\n      },\n      error: error => {\n        console.error('Error in getResearchersConference:', error);\n      }\n    });\n  }\n  statsTotalAuthorsByYear() {\n    const years = this.selectedTitles.map(title => title.properties.name);\n    years.sort((a, b) => parseInt(a) - parseInt(b));\n    this.totalArticlesByYear = [];\n    this.totalAuthorsByYear = years.map(year => {\n      const totalAuthors = this.researchers.reduce((total, researcher) => {\n        if (researcher.years.includes(year)) {\n          return total + 1;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalAuthors\n      };\n    });\n  }\n  getPapers() {\n    this.apiService.getPapers(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.papers = response;\n        this.statsPapers();\n        this.statsTotalPapersByYear();\n        if (this.papers.length > 0) {\n          this.generateChart('lineChart2', 'Number of papers', this.statsPaper);\n          this.generateTotalAuthorsChart('lineChart7', 'Total Papers by Year', this.totalPapersByYear);\n        }\n      },\n      error: error => {\n        console.error('Error in getPapers:', error);\n      }\n    });\n  }\n  getArticles() {\n    this.apiService.getArticles(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.articles = response;\n        this.statsArticles();\n        this.statsTotalArticlesByYear();\n        if (this.articles && this.articles.length > 0) {\n          this.generateChart('lineChart15', 'Number of Articles', this.statsArticle);\n          this.generateTotalAuthorsChart('lineChart14', 'Total Articles by Year', this.totalArticlesByYear);\n        }\n      },\n      error: error => {\n        console.error('Error in getPapers:', error);\n      }\n    });\n  }\n  statsTotalPapersByYear() {\n    const years = this.papers.map(paper => paper.year);\n    this.totalPapersByYear = years.map(year => {\n      const totalPapers = this.papers.reduce((total, paper) => {\n        if (paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalPapers\n      };\n    });\n  }\n  statsTotalArticlesByYear() {\n    const years = this.articles.map(paper => paper.year);\n    this.totalArticlesByYear = years.map(year => {\n      const totalPapers = this.articles.reduce((total, paper) => {\n        if (paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalPapers\n      };\n    });\n  }\n  getCollaborations() {\n    this.apiService.getCollaborations(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.collaborations = response;\n        this.statsColaboraciones();\n        this.generateChart3('lineChart3', 'Density', this.statistics[3].years, this.statistics[3].densidades);\n      },\n      error: error => {\n        console.error('Error in getCollaborations:', error);\n      }\n    });\n  }\n  getConnectedComponents() {\n    this.apiService.getConnectedComponents(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.connectedComponents = response;\n        this.statsConnectedComponents();\n        this.generateChart3('lineChart11', 'Number of Connected Components', this.statistics[5].years, this.statistics[5].connectedComponents);\n      },\n      error: error => {\n        console.error('Error in getConnectedComponents:', error);\n      }\n    });\n  }\n  getConnectedComponentsByvenue() {\n    this.apiService.getConnectedComponentsByvenue(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.connectedComponents = response;\n        this.statsConnectedComponentsByvenue();\n        this.generateChart4('lineChart12', 'Number of Connected Components', this.statistics[6]);\n        this.generateChart4('lineChart13', 'Number of Connected Components', this.statistics[7]);\n      },\n      error: error => {\n        console.error('Error in getConnectedComponents:', error);\n      }\n    });\n  }\n  getConferencebyProceeding() {\n    this.apiService.getConferencebyProceeding(this.selectedTitles, this.venueName).subscribe({\n      next: response => {\n        this.stadisticsService.conferencesNames = [];\n        this.stadisticsService.years = [];\n        this.stadisticsService.inprocedings = [];\n        response.forEach(({\n          title,\n          year,\n          numberOfInProceedings\n        }) => {\n          this.stadisticsService.conferencesNames.push(title);\n          this.stadisticsService.years.push(year);\n          this.stadisticsService.inprocedings.push(numberOfInProceedings);\n        });\n        this.loadingTable1 = false;\n        this.generateTablesProceeding(this.stadisticsService.conferencesNames, this.stadisticsService.years, this.stadisticsService.inprocedings);\n      },\n      error: error => {\n        console.error('Error in getConferencebyProceeding:', error);\n      }\n    });\n  }\n  generateTablesProceeding(venueTitles, years, numberOfInProceedings) {\n    const table = document.querySelector('#tableProceeding tbody');\n    if (table instanceof HTMLElement) {\n      table.innerHTML = ''; // Limpiar tabla existente antes de agregar nuevas filas\n      venueTitles.forEach((venueTitle, index) => {\n        // Divide el t√≠tulo en partes usando la coma como delimitador\n        const parts = venueTitle.split(',');\n        if (parts.length == 6) {\n          parts[4] = parts[4].replace(\"Proceedings\", \"\");\n          const date = parts[4].split('.');\n          // Construye el objeto que contiene los datos para la tabla\n          const rowData = {\n            name: parts[0] + '-' + parts[1].trim(),\n            location: parts[2] + ',' + parts[3],\n            date: date.slice(0).join(' ')\n          };\n          // Crea una fila para la tabla y agrega los datos\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n          // Agrega la fila a la tabla\n          table.appendChild(row);\n        }\n        if (parts.length == 5) {\n          parts[3] = parts[3].replace(\"Proceedings\", \"\").trim();\n          const date = parts[3].split('.');\n          const hasNumber = /\\d/.test(date[0]);\n          if (hasNumber) {\n            if (parts[1].includes(\"Florence\")) {\n              const rowData = {\n                name: parts[0],\n                location: parts[1].trim() + ',' + parts[2],\n                date: date[0]\n              };\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n              table.appendChild(row);\n            } else {\n              // Construye el objeto que contiene los datos para la tabla\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim(),\n                location: parts[2],\n                date: date[0]\n              };\n              // Crea una fila para la tabla y agrega los datos\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n              // Agrega la fila a la tabla\n              table.appendChild(row);\n            }\n          } else {\n            // Construye el objeto que contiene los datos para la tabla\n            const rowData = {\n              name: parts[0] + '-' + parts[1].trim(),\n              location: parts[2] + ', ' + parts[3],\n              date: parts[4]\n            };\n            // Crea una fila para la tabla y agrega los datos\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n            // Agrega la fila a la tabla\n            table.appendChild(row);\n          }\n        }\n        if (parts.length == 7) {\n          parts[5] = parts[5].replace(\"Proceedings\", \"\");\n          const date = parts[5].split('.');\n          if (parts[2].length > 15) {\n            const rowData = {\n              name: parts[0] + '-' + parts[1].trim(),\n              location: parts[3] + ', ' + parts[4],\n              date: date[0]\n            };\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n            table.appendChild(row);\n          } else {\n            const isValidFormat = /^[a-zA-Z]+\\s+\\d{1,2}(-\\d{1,2}|\\d{1,2}[a-zA-Z]+\\s+\\d{1,2})$/.test(date[0].trim());\n            if (isValidFormat) {\n              if (parts[2].includes(\"ER\")) {\n                const rowData = {\n                  name: parts[0] + ',' + parts[1].trim() + '-' + parts[2],\n                  location: parts[3] + ', ' + parts[4],\n                  date: date[0]\n                };\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n                table.appendChild(row);\n              } else {\n                const rowData = {\n                  name: parts[0] + '-' + parts[1].trim(),\n                  location: parts[2] + ', ' + parts[3] + ', ' + parts[4],\n                  date: date[0]\n                };\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n                table.appendChild(row);\n              }\n            } else {\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim(),\n                location: parts[2] + ', ' + parts[3],\n                date: parts[4] + ', ' + date[0]\n              };\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n              table.appendChild(row);\n            }\n          }\n        }\n      });\n    }\n  }\n  waitAuthorsWithPapersNoEmpty() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      while (!_this3.papersWithAuthors || _this3.papersWithAuthors.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  waitSingleAuthorsNoEmpty() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      while (!_this4.singleAuthor || _this4.singleAuthor.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  getAuthorsPapers() {\n    var _this5 = this;\n    this.apiService.getAuthorsPapers(this.selectedTitles, this.conferenceOption, this.venueName).subscribe({\n      next: function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          _this5.singleAuthor = response;\n          _this5.statsSingleAuthor();\n          if (_this5.barChart) {\n            _this5.barChart.destroy();\n          }\n          if (_this5.barChart2) {\n            _this5.barChart2.destroy();\n          }\n          _this5.generateBarChartArticles('barChart2', 'Single Author Articles', _this5.statistics[8].years, _this5.statistics[8].porcentajes);\n          _this5.generateBarChart('barChart1', 'Single Author Papers', _this5.statistics[4].years, _this5.statistics[4].porcentajes);\n        });\n        return function next(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      error: error => {\n        console.error('Error in getAuthorsPapers:', error);\n      }\n    });\n  }\n  /**Function to obtain the distributions of both authors by papers and papers by authors*/\n  getDistributions() {\n    const labels = ['1', '2', '3', '4', '5 o m√°s'];\n    // This represents the number of authors that each paper has.\n    const authorsByPaper = [1, 2, 3, 4].map(numAuthors => this.papersWithAuthors.filter(paper => paper.numAuthors === numAuthors).length);\n    authorsByPaper[4] = this.papersWithAuthors.filter(paper => paper.numAuthors >= 5).length;\n    let allPapers = this.papers.reduce((all, paper) => all + paper.numPapers, 0);\n    allPapers += this.articles.reduce((all, paper) => all + paper.numPapers, 0);\n    // This represents the number of published papers that each author has.\n    const papersByAuthor = [1, 2, 3, 4].map(numPubs => this.singleAuthor.filter(paper => paper.numPublications === numPubs).length);\n    papersByAuthor[4] = this.singleAuthor.filter(paper => paper.numPublications >= 5).length;\n    const allAuthors = this.singleAuthor.length;\n    // We create the two tables that are linked with the ids of the html\n    const authorsTable = document.querySelector('#authorsTable tbody');\n    const papersTable = document.querySelector('#papersTable tbody');\n    if (authorsTable !== null) {\n      authorsByPaper.forEach((amount, index) => {\n        const row = document.createElement('tr');\n        const percentage = (amount / allPapers * 100).toFixed(2);\n        const worth = amount.toString() + \"(\" + percentage + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n        authorsTable.appendChild(row);\n      });\n    }\n    if (papersTable !== null) {\n      papersByAuthor.forEach((amount, index) => {\n        const row = document.createElement('tr');\n        const percentage = (amount / allAuthors * 100).toFixed(2);\n        const worth = amount.toString() + \"(\" + percentage + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n        papersTable.appendChild(row);\n      });\n    }\n  }\n  getDemographicData() {\n    const datasets = this.researchers.map(researcher => {\n      let name = researcher.researcher.properties.name.split(' ')[0];\n      if (name.includes(\"-\")) {\n        name = name.split('-')[0];\n      }\n      const years = Array.isArray(researcher.years) ? researcher.years : [researcher.years];\n      const datasetByYear = years.map(year => {\n        const info = this.commonNames[name];\n        const genero = info ? info.genero : 'Unknown';\n        const frecuencias = info ? info.frec_paises : {};\n        return {\n          year,\n          name,\n          genero,\n          frecuencias\n        };\n      });\n      return datasetByYear;\n    }).flat();\n    this.statsGender(datasets);\n    this.statsGeography(datasets);\n  }\n  generateNGrams(titles, n) {\n    const ngrams = [];\n    titles.forEach(title => {\n      const words = title.toLowerCase().split(\" \");\n      for (let i = 0; i < words.length - n + 1; i++) {\n        ngrams.push(words.slice(i, i + n).join(\" \"));\n      }\n    });\n    return ngrams;\n  }\n  countFrequencies(ngrams) {\n    const frequencies = new Map();\n    ngrams.forEach(ngram => {\n      const count = frequencies.get(ngram) || 0;\n      frequencies.set(ngram, count + 1);\n    });\n    return frequencies;\n  }\n  clearTitle(title, stopwords) {\n    // Separate the title into words\n    const words = title.toLowerCase().split(\" \").map(word => word.replace(/[^\\w\\s]/g, \"\"));\n    // We eliminate repetitions of letters and plurals to improve frequency\n    const wordsNoRepeat = words.map(word => word.replace(/(.)\\1+/g, \"$1\"));\n    const singularWords = wordsNoRepeat.map(word => singular(word));\n    // Filter words to remove stopwords\n    const filteredWords = singularWords.filter(word => !stopwords.includes(word));\n    // Join the filtered words into a new title\n    const newTitle = filteredWords.join(' ');\n    return newTitle;\n  }\n  getTopN(frequencies, n) {\n    const sortedFrequencies = [...frequencies.entries()].sort((a, b) => b[1] - a[1]);\n    return sortedFrequencies.slice(0, n);\n  }\n  getTopicAnalysis() {\n    // We require natural to tokenize and remove stopwords, and calculate frequencies\n    const stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', '.', ','];\n    const cleanTitles = this.papersWithAuthors.map(paper => {\n      const ipName = this.clearTitle(paper.ipName, stopwords);\n      const year = parseInt(paper.year);\n      return {\n        ipName,\n        year\n      };\n    });\n    const bigrams = this.generateNGrams(cleanTitles.map(paper => paper.ipName), 2);\n    const trigrams = this.generateNGrams(cleanTitles.map(paper => paper.ipName), 3);\n    const bigramFrequencies = this.countFrequencies(bigrams);\n    const trigramFrequencies = this.countFrequencies(trigrams);\n    const top20Bigrams = this.getTopN(bigramFrequencies, 20);\n    const top20Trigrams = this.getTopN(trigramFrequencies, 20);\n    const top20BigramsWithYears = top20Bigrams.map(([ngram, count]) => ({\n      ngram,\n      count,\n      years: cleanTitles.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n    }));\n    const top20TrigramsWithYears = top20Trigrams.map(([ngram, count]) => ({\n      ngram,\n      count,\n      years: cleanTitles.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n    }));\n    const table1 = document.querySelector('#tableBigramas tbody');\n    const table2 = document.querySelector('#tableTrigramas tbody');\n    if (table1 instanceof HTMLElement && table2 instanceof HTMLElement) {\n      top20BigramsWithYears.forEach(({\n        ngram,\n        count,\n        years\n      }) => {\n        const minYear = Math.min(...years);\n        const maxYear = Math.max(...years);\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n        table1.appendChild(row);\n      });\n      top20TrigramsWithYears.forEach(({\n        ngram,\n        count,\n        years\n      }) => {\n        const minYear = Math.min(...years);\n        const maxYear = Math.max(...years);\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n        table2.appendChild(row);\n      });\n    }\n    const combinedData = [...top20BigramsWithYears, ...top20TrigramsWithYears];\n    combinedData.sort((a, b) => b.count - a.count);\n    const maxFrecuencia = combinedData[0].count;\n    const minWeight = 0;\n    const maxWeight = 20;\n    const wordCloudData = combinedData.map((item, index) => ({\n      text: item.ngram,\n      weight: this.calculateWeight(item.count, maxFrecuencia, minWeight, maxWeight),\n      color: this.randomColor()\n    }));\n    this.cloudData = wordCloudData;\n  }\n  calculateWeight(frec, maxFrec, minWeight, maxWeight) {\n    const weight = frec / maxFrec;\n    const normWeight = weight * (maxWeight - minWeight) + minWeight;\n    return Math.round(normWeight);\n  }\n  /**\n   * ############################################\n   */\n  statsResearchers() {\n    const names = new Set(this.researchers.map(researcher => researcher.name));\n    this.statsAuthors = [];\n    this.statsAuthors = Array.from(names).map(name => {\n      const years = this.selectedTitles.map(titulo => titulo.properties.name);\n      years.sort((a, b) => parseInt(a) - parseInt(b));\n      this.selectedYears = years;\n      const numResearchersPorAnio = years.map(anio => this.researchers.reduce((total, researcher) => {\n        if (researcher.name === name && researcher.years.includes(anio)) {\n          return total + 1;\n        }\n        return total;\n      }, 0));\n      return {\n        name: name,\n        years: years,\n        numResearchers: numResearchersPorAnio\n      };\n    });\n  }\n  statsPapers() {\n    const names = new Set(this.papers.map(paper => paper.name));\n    this.ConferencesCount = names.size;\n    this.statsPaper = Array.from(names).map(name => {\n      const years = this.papers.map(paper => paper.year);\n      const numPapersPorAnio = years.map(year => this.papers.reduce((total, paper) => {\n        if (paper.name === name && paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0));\n      return {\n        name: name,\n        years: years,\n        numResearchers: numPapersPorAnio\n      };\n    });\n  }\n  statsArticles() {\n    const names = new Set(this.articles.map(paper => paper.name));\n    this.journalsCount = names.size;\n    this.statsArticle = Array.from(names).map(name => {\n      const years = this.articles.map(paper => paper.year);\n      const numPapersPorAnio = years.map(year => this.articles.reduce((total, paper) => {\n        if (paper.name === name && paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0));\n      return {\n        name: name,\n        years: years,\n        numResearchers: numPapersPorAnio\n      };\n    });\n  }\n  statsColaboraciones() {\n    let colabsXtotal = [];\n    if (this.papers.length > 1) {\n      const colabsPapers = this.papers.map(paper => {\n        const colab = this.collaborations.find(c => c.year === paper.year);\n        return {\n          year: paper.year,\n          numColabs: colab ? colab.numColabs : 0,\n          numPapers: paper.numPapers\n        };\n      });\n      colabsXtotal = colabsXtotal.concat(colabsPapers);\n    }\n    if (this.articles.length > 1) {\n      const colabsArticles = this.articles.map(article => {\n        const colab = this.collaborations.find(c => c.year === article.year);\n        return {\n          year: article.year,\n          numColabs: colab ? colab.numColabs : 0,\n          numPapers: article.numPapers\n        };\n      });\n      colabsXtotal = colabsXtotal.concat(colabsArticles);\n    }\n    //colabsXtotal debe tener la suma de los dos valores si ha entrao en los dos ifs\n    const density = colabsXtotal.map(dato => {\n      const {\n        year,\n        numColabs,\n        numPapers\n      } = dato;\n      const density = numColabs / numPapers;\n      return {\n        density,\n        year\n      };\n    });\n    this.statistics[3] = {\n      years: density.map(dato => dato.year),\n      densidades: density.map(dato => dato.density)\n    };\n  }\n  statsConnectedComponents() {\n    // Copiar los datos originales para no afectar el orden original\n    const copiedData = [...this.connectedComponents];\n    // Ordenar los datos por a√±o\n    copiedData.sort((a, b) => a.year - b.year);\n    // Extraer los a√±os y componentes conectados ordenados\n    const years = copiedData.map(item => item.year);\n    const connectedComponents = copiedData.map(item => item.connectedComponents);\n    this.statistics[5] = {\n      years: years,\n      connectedComponents: connectedComponents\n      // Puedes agregar otras propiedades si es necesario\n    };\n  }\n\n  statsConnectedComponentsByvenue() {\n    const venueDataMap = new Map();\n    const venueDataMapRelative = new Map();\n    this.connectedComponents.forEach(item => {\n      const venueName = item.venueName;\n      if (!venueDataMap.has(venueName)) {\n        venueDataMap.set(venueName, {\n          years: [],\n          connectedComponents: [],\n          venueName: venueName\n        });\n      }\n      const venueData = venueDataMap.get(venueName);\n      if (venueData) {\n        venueData.years.push(item.year);\n        venueData.connectedComponents.push(item.connectedComponents);\n      }\n    });\n    this.connectedComponents.forEach(item => {\n      const venueName = item.venueName;\n      if (!venueDataMapRelative.has(venueName)) {\n        venueDataMapRelative.set(venueName, {\n          years: [],\n          connectedComponents: [],\n          venueName: venueName\n        });\n      }\n      const venueData = venueDataMapRelative.get(venueName);\n      if (venueData) {\n        venueData.years.push(item.year);\n        let adjustedComponents = item.connectedComponents;\n        while (adjustedComponents > 1) {\n          adjustedComponents /= 10;\n        }\n        venueData.connectedComponents.push(adjustedComponents);\n      }\n    });\n    this.statistics[6] = Array.from(venueDataMap.values());\n    this.statistics[7] = Array.from(venueDataMapRelative.values());\n  }\n  statsSingleAuthor() {\n    const papersWithAuthors = [];\n    // Map all the researchers, to create papersWithAuthors, which is an array that has the name of a publication\n    // and the authors who have contributed to it.\n    this.singleAuthor.forEach(author => {\n      author.ipNames.forEach(ipName => {\n        const paperIndex = papersWithAuthors.findIndex(paper => paper.ipName === ipName);\n        if (paperIndex !== -1) {\n          papersWithAuthors[paperIndex].numAuthors++;\n          papersWithAuthors[paperIndex].authorNames.push(author.researcher);\n        } else {\n          papersWithAuthors.push({\n            ipName,\n            numAuthors: 1,\n            authorNames: [author.researcher],\n            year: author.year\n          });\n        }\n      });\n    });\n    this.papersWithAuthors = papersWithAuthors;\n    console.log(this.papersWithAuthors);\n    // We get all the entries whose author is one, for the statistics\n    const papersWithOneAuthor = papersWithAuthors.filter(paper => paper.numAuthors === 1);\n    const porcentajeByYear = this.papers.map(paper => {\n      const year = paper.year;\n      const numPapers = paper.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const percentage = numPapersWithSingleAuthor / numPapers * 100;\n      return {\n        year,\n        percentage\n      };\n    });\n    const porcentajeByYear2 = this.articles.map(article => {\n      const year = article.year;\n      const numPapers = article.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const percentage = numPapersWithSingleAuthor / numPapers * 100;\n      return {\n        year,\n        percentage\n      };\n    });\n    this.statistics[4] = {\n      years: porcentajeByYear.map(dato => dato.year),\n      porcentajes: porcentajeByYear.map(dato => dato.percentage)\n    };\n    this.statistics[8] = {\n      years: porcentajeByYear2.map(dato => dato.year),\n      porcentajes: porcentajeByYear2.map(dato => dato.percentage)\n    };\n    this.singleArticles = this.statistics[8];\n    this.singlePapers = this.statistics[4];\n  }\n  statsGeography(datasets) {\n    const mappingDate = {};\n    const datasetFiltered = datasets.filter(object => Object.keys(object.frecuencias).length > 0);\n    // Obtener todas las fechas √∫nicas\n    const uniqueDates = [...new Set(datasetFiltered.map(dato => dato.year))];\n    // Iterar sobre las fechas\n    for (const date of uniqueDates) {\n      const objectDate = datasetFiltered.filter(dato => dato.year === date);\n      // Crear objeto de mapeo para la fecha actual\n      mappingDate[date] = {};\n      for (const object of objectDate) {\n        let countryHighest = '';\n        let highestFrequency = -1;\n        for (const country in object.frecuencias) {\n          if (object.frecuencias[country] > highestFrequency) {\n            countryHighest = country;\n            highestFrequency = object.frecuencias[country];\n          }\n        }\n        if (!(countryHighest in mappingDate[date])) {\n          mappingDate[date][countryHighest] = 1;\n        } else {\n          mappingDate[date][countryHighest] = mappingDate[date][countryHighest] + 1;\n        }\n      }\n    }\n    // We normalize values according to their total\n    for (const year in mappingDate) {\n      let total = 0;\n      for (const country in mappingDate[year]) {\n        total += mappingDate[year][country];\n      }\n      for (const country in mappingDate[year]) {\n        mappingDate[year][country] = Number((mappingDate[year][country] / total).toFixed(4));\n      }\n    }\n    const years = Object.keys(mappingDate); // Get the keys of the years\n    const countries = Object.keys(mappingDate[years[0]]); // Get country names\n    const datasetsLabels = countries; // Labels of the data sets will be the names of the countries \n    // Create the data matrix for the countries\n    const datasetsData = countries.map(country => years.map(year => mappingDate[year][country]));\n    this.generateMultipleGraph('lineChart5', years, datasetsLabels, datasetsData);\n  }\n  filterAuthorsByDecade(authors, startYear, endYear) {\n    const filteredAuthors = [];\n    // Browse the original authors\n    authors.forEach(author => {\n      // Check if the author is within the specified decade\n      const authorYears = author.year.split(\",\").map(Number).filter(year => year >= startYear && year <= endYear);\n      if (authorYears.length > 0) {\n        // Search if there is already a merged author with the same name and decade\n        const existingAuthor = filteredAuthors.find(filteredAuthor => filteredAuthor.researcher === author.researcher);\n        if (existingAuthor) {\n          // Merge the existing author's entries with the current author's entries\n          existingAuthor.numPublications += author.numPublications;\n          existingAuthor.year += `, ${author.year}`;\n        } else {\n          // Add the current author to the list of filtered authors\n          filteredAuthors.push({\n            ipNames: author.ipNames,\n            numPublications: author.numPublications,\n            researcher: author.researcher,\n            year: author.year\n          });\n        }\n      }\n    });\n    return filteredAuthors;\n  }\n  statsProlificAuthors(selectedYears) {\n    // Get the range of years selected by the user\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n    // Calculate the decades corresponding to the selected range of years\n    const startDecade = Math.floor(startYear / 10) * 10;\n    const endDecade = Math.floor(endYear / 10) * 10;\n    // Generate the decades within the selected year range\n    const decades = [];\n    for (let decade = startDecade; decade <= endDecade; decade += 10) {\n      const decadeLabel = `${decade}s`;\n      const decadeStartYear = decade;\n      const decadeEndYear = decade + 9;\n      const decadeAuthors = this.filterAuthorsByDecade(this.singleAuthor, decadeStartYear, decadeEndYear);\n      decades.push({\n        label: decadeLabel,\n        startYear: decadeStartYear,\n        endYear: decadeEndYear,\n        authors: decadeAuthors\n      });\n    }\n    // Sort authors by number of publications in each decade\n    decades.forEach(decade => {\n      decade.authors.sort((a, b) => b.numPublications - a.numPublications);\n      if (decade.authors.length > 20) {\n        decade.authors = decade.authors.slice(0, 20);\n      }\n    });\n    // Return the decades with the authors ordered\n    return decades;\n  }\n  statsProlificAuthors2(selectedYears) {\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n    const allAuthors = this.filterAuthorsByDecade(this.singleAuthor, startYear, endYear);\n    const topAuthors = allAuthors.sort((a, b) => b.numPublications - a.numPublications).slice(0, 20);\n    const tables = {\n      'degree': document.querySelector('#degree tbody')\n    };\n    for (const author of topAuthors) {\n      const table = tables['degree'];\n      if (table instanceof HTMLElement) {\n        const yearsArray = author.year.split(\",\").map(Number);\n        const minYear = Math.min(...yearsArray);\n        const maxYear = Math.max(...yearsArray);\n        const row = document.createElement('tr');\n        row.innerHTML = `\n  \n                         <td >${author.researcher}</td>\n                         <td style=\"padding-left: 50px\" >${author.numPublications}</td>\n                         <td style=\"padding-left: 50px\">${minYear}</td> \n                         <td style=\"padding-left: 80px\">${maxYear}</td>`;\n        table.appendChild(row);\n      }\n    }\n  }\n  generateTablesDecades2(decadeStats) {\n    const tables = {\n      '1990s': document.querySelector('#table90 tbody'),\n      '2000s': document.querySelector('#table00 tbody'),\n      '2010s': document.querySelector('#table10 tbody'),\n      '2020s': document.querySelector('#table20 tbody')\n    };\n    for (const decade of decadeStats) {\n      const table = tables[decade.label];\n      if (table instanceof HTMLElement) {\n        decade.authors.slice(0, 20).forEach(autor => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${autor.researcher}</td><td>${autor.numPublications}</td>`;\n          table.appendChild(row);\n        });\n      }\n    }\n  }\n  generateTotalAuthorsChart(idChart, label, data) {\n    const years = data.map(entry => entry.year);\n    const totalAuthors = data.map(entry => entry.totalAuthors);\n    if (idChart == \"lineChart6\") {\n      this.lineChart6 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: years,\n          datasets: [{\n            label: label,\n            data: totalAuthors,\n            fill: false,\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n    if (idChart == \"lineChart7\") {\n      this.lineChart7 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: years,\n          datasets: [{\n            label: label,\n            data: totalAuthors,\n            fill: false,\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n    if (idChart = \"lineChart14\") {\n      this.lineChart14 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: years,\n          datasets: [{\n            label: label,\n            data: totalAuthors,\n            fill: false,\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n  }\n  generateChart(idChart, label, data) {\n    const datasets = data.map((entry, index) => ({\n      label: entry.name,\n      data: entry.numResearchers,\n      fill: false,\n      borderColor: this.getRandomColor(index),\n      borderWidth: 1\n    }));\n    if (idChart == \"lineChart2\") {\n      this.lineChart2 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n    if (idChart == \"lineChart1\") {\n      this.lineChart = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n    if (idChart == \"lineChart15\") {\n      this.lineChart15 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n  }\n  generateChart3(idChart, label, labels, data) {\n    if (idChart == \"lineChart11\" || idChart == \"lineChart3\") {\n      this.lineChart3 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: label,\n            data: data,\n            fill: false,\n            borderColor: 'rgb(0, 22, 68)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          }\n        }\n      });\n    }\n  }\n  generateChart4(idChart, label, data) {\n    const datasets = data.map((venue, index) => {\n      return {\n        label: venue.venueName,\n        data: venue.connectedComponents,\n        years: venue.years,\n        fill: false,\n        borderColor: this.getRandomColor(index),\n        borderWidth: 1\n      };\n    });\n    const allYears = Array.from(new Set([].concat(...datasets.map(dataset => dataset.years))));\n    allYears.sort();\n    this.lineChart = new Chart(idChart, {\n      type: 'line',\n      data: {\n        labels: allYears,\n        datasets: datasets\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              color: 'black',\n              font: {\n                size: 18,\n                family: 'Roboto'\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            display: true\n          }\n        }\n      }\n    });\n  }\n  statsGender(datasets) {\n    const datasetsByGenre = {};\n    datasets.forEach(data => {\n      const {\n        year,\n        genero\n      } = data;\n      let genderKey = '';\n      if (genero == 'M' || genero == '?M' || genero == '1M' || genero == '?') {\n        genderKey = 'Men';\n      } else if (genero == 'F' || genero == '?F' || genero == '1F') {\n        genderKey = 'Women';\n      } else {\n        genderKey = 'Unknown';\n      }\n      if (!datasetsByGenre[genderKey]) {\n        datasetsByGenre[genderKey] = [];\n      }\n      const existingData = datasetsByGenre[genderKey].find(d => d.year === year);\n      if (existingData) {\n        existingData.count++;\n      } else {\n        datasetsByGenre[genderKey].push({\n          year,\n          count: 1\n        });\n      }\n    });\n    // Create an object to store the ordered data\n    const sortedData = {};\n    const men = datasetsByGenre['Men'];\n    const women = datasetsByGenre['Women'];\n    // Sort men's data\n    men.forEach(dato => {\n      const year = dato.year;\n      const count = dato.count;\n      sortedData[year] = {\n        hombres: count,\n        mujeres: 0,\n        total: count\n      };\n    });\n    // Sort the women's data and combine it with the men's data\n    women.forEach(dato => {\n      const year = dato.year;\n      const count = dato.count;\n      if (sortedData[year]) {\n        sortedData[year].mujeres = count;\n        sortedData[year].total += count;\n      } else {\n        sortedData[year] = {\n          mujeres: count,\n          hombres: 0,\n          total: count\n        };\n      }\n    });\n    // Get the years sorted\n    const organizedYears = Object.keys(sortedData).sort();\n    const countMen = organizedYears.map(anio => Number((sortedData[anio].hombres / sortedData[anio].total).toFixed(4)));\n    const countWoman = organizedYears.map(anio => Number((sortedData[anio].mujeres / sortedData[anio].total).toFixed(4)));\n    this.generateCircularChart('lineChart4', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n    this.generateMultipleGraph('lineChart8', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n  }\n  generateMultipleGraph(chartId, labels, datasetsLabels, datasetsData) {\n    const datasets = datasetsLabels.map((label, index) => ({\n      label: label,\n      data: datasetsData[index],\n      backgroundColor: 'rgba(0, 0, 0, 0.1)',\n      borderColor: this.getRandomColor(index)\n    }));\n    const chartConfig = {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              color: 'black',\n              font: {\n                size: 18,\n                family: 'Roboto'\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            display: true\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById(chartId);\n    new Chart(ctx, chartConfig);\n  }\n  generateCircularChart(chartId, labels, datasetsLabels, datasetsData) {\n    const colors = ['#FF5733', '#3399FF'];\n    const datasets = datasetsLabels.map((label, index) => ({\n      label: label,\n      data: datasetsData[index],\n      backgroundColor: colors[index],\n      borderColor: 'black'\n    }));\n    const chartConfig = {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n            labels: {\n              color: 'black',\n              font: {\n                size: 18,\n                family: 'Roboto'\n              }\n            }\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById(chartId);\n    new Chart(ctx, chartConfig);\n  }\n  generateBarChart(idChart, label, labels, data) {\n    if (idChart = \"barChart1\") {\n      this.barChart = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: label,\n            data: data,\n            backgroundColor: 'rgb(51, 153, 255)',\n            borderColor: 'rgb(51, 153, 255)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }\n  generateBarChartArticles(idChart, label, labels, data) {\n    if (idChart = \"barChart2\") {\n      this.barChart2 = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: label,\n            data: data,\n            backgroundColor: 'rgb(255, 87, 51)',\n            borderColor: 'rgb(255, 87, 51)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto'\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }\n  randomColor() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgba(${r}, ${g}, ${b}, 1)`;\n  }\n  getRandomColor(index) {\n    let colors = {\n      0: \"rgba(51, 153, 255)\",\n      1: \"rgba(255, 0, 0, 1)\",\n      2: \"rgba(98, 192, 75, 1)\",\n      3: \"rbga(192, 141, 75, 1)\",\n      4: \"rgba(226, 232, 107, 1)\",\n      5: \"rgba(176, 75, 192, 1)\"\n    };\n    return colors[index];\n  }\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.commonNames = this.parseCommonNames(data);\n    }, error => {\n      console.error('Error al cargar los datos:', error);\n    });\n  }\n  parseCommonNames(data) {\n    const lines = data.split('\\n');\n    const dict = {};\n    let currentName = '';\n    let currentData = {\n      frec_paises: {},\n      genero: ''\n    };\n    for (const linea of lines) {\n      if (linea.startsWith('nombre:')) {\n        currentName = linea.split(':')[1].trim();\n        currentData = {\n          frec_paises: {},\n          genero: ''\n        };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        currentData.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        currentData.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        dict[currentName] = currentData;\n      }\n    }\n    return dict;\n  }\n  main() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this6.selectedTitles = _this6.stadisticsService.getSelectedTitles();\n        _this6.conferenceOption = _this6.stadisticsService.getConferenceOption();\n        _this6.venueName = _this6.stadisticsService.getVenueName();\n        if (_this6.stadisticsService.venueNameConfirm != _this6.stadisticsService.getVenueName()) {\n          _this6.getConferencebyProceeding();\n        } else {\n          _this6.generateTablesProceeding(_this6.stadisticsService.conferencesNames, _this6.stadisticsService.years, _this6.stadisticsService.inprocedings);\n        }\n        _this6.getResearchersConference();\n        _this6.getPapers();\n        _this6.getArticles();\n        _this6.getConferencebyProceeding();\n        if (_this6.researchers.length == 0) {\n          yield _this6.waitResearcherNoEmpty();\n          _this6.getDemographicData();\n          _this6.getCollaborations();\n          _this6.getAuthorsPapers();\n        } else {\n          _this6.getDemographicData();\n          _this6.getCollaborations();\n          _this6.getAuthorsPapers();\n        }\n        if (_this6.papersWithAuthors.length == 0) {\n          yield _this6.waitAuthorsWithPapersNoEmpty();\n          console.log(\"si\");\n          _this6.getTopicAnalysis();\n          _this6.getDistributions();\n        } else {\n          _this6.getTopicAnalysis();\n          _this6.getDistributions();\n        }\n        if (_this6.singleAuthor.length == 0) {\n          yield _this6.waitSingleAuthorsNoEmpty();\n          _this6.decadeStats = _this6.statsProlificAuthors(_this6.selectedYears);\n          _this6.generateTablesDecades2(_this6.decadeStats);\n        } else {\n          _this6.decadeStats = _this6.statsProlificAuthors(_this6.selectedYears);\n          _this6.generateTablesDecades2(_this6.decadeStats);\n        }\n        _this6.statsProlificAuthors2(_this6.selectedYears);\n        _this6.getConnectedComponents();\n        _this6.getConnectedComponentsByvenue();\n        while (_this6.stadisticsService.conferencesNames.length < 1) {\n          _this6.loadingTable1 = true;\n          yield new Promise(resolve => setTimeout(resolve, 1000));\n          _this6.spinnerService.show();\n        }\n        _this6.loadingTable1 = false;\n        _this6.stadisticsService.venueNameConfirm = _this6.stadisticsService.getVenueName();\n      } catch (error) {\n        console.error('Error in getData with:', error);\n      }\n    })();\n  }\n};\n__decorate([ViewChild('chartCanvas')], StatisticsComponent.prototype, \"chartCanvas\", void 0);\nStatisticsComponent = __decorate([Component({\n  selector: 'istics',\n  templateUrl: './statistics.component.html',\n  styleUrls: ['./statistics.component.scss']\n})], StatisticsComponent);\nexport { StatisticsComponent };","map":{"version":3,"names":["Component","ViewChild","Chart","registerables","register","singular","StatisticsComponent","constructor","apiService","stadisticsService","http","spinnerService","selectedTitles","selectedYears","conferenceOption","venueName","papers","articles","collaborations","connectedComponents","singleAuthor","statistics","statsAuthors","statsPaper","statsArticle","journalsCount","ConferencesCount","totalAuthorsByYear","totalPapersByYear","totalArticlesByYear","singleArticles","singlePapers","decadeStats","researchers","papersWithAuthors","loadingTable1","loadingTable2","conferenceName","commonNames","options","width","height","overflow","realignOnResize","strict","step","cloudData","ngOnInit","loadCommonNames","main","waitResearcherNoEmpty","_this","_asyncToGenerator","length","Promise","resolve","setTimeout","waitPapersNoEmpty","_this2","getResearchersConference","subscribe","next","response","statsResearchers","statsTotalAuthorsByYear","lineChart","destroy","generateChart","generateTotalAuthorsChart","error","console","years","map","title","properties","name","sort","a","b","parseInt","year","totalAuthors","reduce","total","researcher","includes","getPapers","statsPapers","statsTotalPapersByYear","getArticles","statsArticles","statsTotalArticlesByYear","paper","totalPapers","numPapers","getCollaborations","statsColaboraciones","generateChart3","densidades","getConnectedComponents","statsConnectedComponents","getConnectedComponentsByvenue","statsConnectedComponentsByvenue","generateChart4","getConferencebyProceeding","conferencesNames","inprocedings","forEach","numberOfInProceedings","push","generateTablesProceeding","venueTitles","table","document","querySelector","HTMLElement","innerHTML","venueTitle","index","parts","split","replace","date","rowData","trim","location","slice","join","row","createElement","appendChild","hasNumber","test","isValidFormat","waitAuthorsWithPapersNoEmpty","_this3","waitSingleAuthorsNoEmpty","_this4","getAuthorsPapers","_this5","_ref","statsSingleAuthor","barChart","barChart2","generateBarChartArticles","porcentajes","generateBarChart","_x","apply","arguments","getDistributions","labels","authorsByPaper","numAuthors","filter","allPapers","all","papersByAuthor","numPubs","numPublications","allAuthors","authorsTable","papersTable","amount","percentage","toFixed","worth","toString","getDemographicData","datasets","Array","isArray","datasetByYear","info","genero","frecuencias","frec_paises","flat","statsGender","statsGeography","generateNGrams","titles","n","ngrams","words","toLowerCase","i","countFrequencies","frequencies","Map","ngram","count","get","set","clearTitle","stopwords","word","wordsNoRepeat","singularWords","filteredWords","newTitle","getTopN","sortedFrequencies","entries","getTopicAnalysis","cleanTitles","ipName","bigrams","trigrams","bigramFrequencies","trigramFrequencies","top20Bigrams","top20Trigrams","top20BigramsWithYears","top20TrigramsWithYears","table1","table2","minYear","Math","min","maxYear","max","combinedData","maxFrecuencia","minWeight","maxWeight","wordCloudData","item","text","weight","calculateWeight","color","randomColor","frec","maxFrec","normWeight","round","names","Set","from","titulo","numResearchersPorAnio","anio","numResearchers","size","numPapersPorAnio","colabsXtotal","colabsPapers","colab","find","c","numColabs","concat","colabsArticles","article","density","dato","copiedData","venueDataMap","venueDataMapRelative","has","venueData","adjustedComponents","values","author","ipNames","paperIndex","findIndex","authorNames","log","papersWithOneAuthor","porcentajeByYear","numPapersWithSingleAuthor","porcentajeByYear2","mappingDate","datasetFiltered","object","Object","keys","uniqueDates","objectDate","countryHighest","highestFrequency","country","Number","countries","datasetsLabels","datasetsData","generateMultipleGraph","filterAuthorsByDecade","authors","startYear","endYear","filteredAuthors","authorYears","existingAuthor","filteredAuthor","statsProlificAuthors","startDecade","floor","endDecade","decades","decade","decadeLabel","decadeStartYear","decadeEndYear","decadeAuthors","label","statsProlificAuthors2","topAuthors","tables","yearsArray","generateTablesDecades2","autor","idChart","data","entry","lineChart6","type","fill","borderColor","borderWidth","plugins","legend","font","family","scales","y","display","lineChart7","lineChart14","getRandomColor","lineChart2","lineChart15","lineChart3","venue","allYears","dataset","datasetsByGenre","genderKey","existingData","d","sortedData","men","women","hombres","mujeres","organizedYears","countMen","countWoman","generateCircularChart","chartId","backgroundColor","chartConfig","ctx","getElementById","colors","beginAtZero","r","random","g","responseType","parseCommonNames","lines","dict","currentName","currentData","linea","startsWith","frec_paisesStr","substring","indexOf","lastIndexOf","JSON","parse","_this6","getSelectedTitles","getConferenceOption","getVenueName","venueNameConfirm","show","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/estadisticas/statistics.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, destroyPlatform } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '../services/api.service';\nimport { StadisticsService } from '../services/stadistics.service';\n//import { Chart, CategoryScale, LineController  } from 'chart.js';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nimport { HttpClient } from '@angular/common/http';\nimport { CloudData, CloudOptions } from 'angular-tag-cloud-module';\nimport { singular } from 'pluralize';\nimport { ChartConfiguration, ChartData, ChartOptions } from 'chart.js';\nimport { SpinnerService } from '../services/spinner.service';\n\ninterface Author {\n  ipNames: string[];\n  numPublications: number;\n  researcher: string;\n  year: string;\n}\n\ninterface DecadeStats {\n  label: string;\n  startYear: number;\n  endYear: number;\n  authors: Author[];\n}\n\n@Component({\n  selector: 'istics',\n  templateUrl: './statistics.component.html',\n  styleUrls: ['./statistics.component.scss'],\n})\n\nexport class StatisticsComponent implements OnInit {\n  @ViewChild('chartCanvas') chartCanvas!: ElementRef;\n\n  selectedTitles: any[] = [];\n  selectedYears: any[] = [];\n  conferenceOption: string = \"\";\n  venueName: any[] = [];\n  papers: any[] = [];\n  articles: any[] = [];\n  collaborations: any[] = [];\n  connectedComponents: any[] = [];\n  singleAuthor: any[] = [];\n  statistics: any[] = [];\n  statsAuthors: any[] = []\n  statsPaper: any[] = []\n  statsArticle: any[] = []\n  journalsCount: number = 0;\n  ConferencesCount: number = 0;\n  lineChart!: Chart;\n  lineChart2!: Chart;\n  lineChart3!: Chart;\n  lineChart4!: Chart;\n  lineChart5!: Chart;\n  lineChart7!: Chart;\n  lineChart6!: Chart;\n  lineChart8!: Chart;\n  lineChart14!: Chart;\n  lineChart15!: Chart;\n  totalAuthorsByYear: any[] = []\n  totalPapersByYear: any[] = []\n  totalArticlesByYear: any[] = []\n  singleArticles: any[] = []\n  singlePapers: any[] = []\n  barChart!: Chart;\n  barChart2!: Chart;\n  decadeStats: any[] = [];\n  researchers: any[] = [];\n  papersWithAuthors: any[] = [];\n  loadingTable1 = true;\n  loadingTable2 = true;\n  conferenceName: string[] = [];\n  commonNames: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n  options: CloudOptions = {\n    width: 500,\n    height: 200,\n    overflow: false,\n    realignOnResize: false,\n    strict: false,\n    step: 2,\n  };\n  cloudData: CloudData[] = []\n\n  constructor(\n    private apiService: ApiService,\n    private stadisticsService: StadisticsService,\n    private http: HttpClient,\n    private spinnerService: SpinnerService,\n  ) {}\n\n\n  ngOnInit() {\n    this.loadCommonNames();\n    this.main();\n  }\n\n  async waitResearcherNoEmpty() {\n    while (!this.researchers || this.researchers.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  async waitPapersNoEmpty() {\n    while (!this.papers || this.papers.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  getResearchersConference() {\n    this.apiService.getResearchersConference(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.researchers = [];\n        this.researchers = response;\n        this.statsResearchers();\n        this.statsTotalAuthorsByYear();\n        if(this.researchers.length > 1){\n          if (this.lineChart) {\n            this.lineChart.destroy();\n          }\n          this.generateChart('lineChart1', 'Number of authors', this.statsAuthors);\n          this.generateTotalAuthorsChart('lineChart6', 'Total Authors by Year', this.totalAuthorsByYear);\n        }\n      },\n      error: (error: any) => {\n        console.error('Error in getResearchersConference:', error);\n      }\n    });\n  }\n\n  statsTotalAuthorsByYear() {\n    const years = this.selectedTitles.map(title => title.properties.name);\n    years.sort((a, b) => parseInt(a) - parseInt(b));\n    this.totalArticlesByYear = [];\n    this.totalAuthorsByYear = years.map(year => {\n      const totalAuthors = this.researchers.reduce((total, researcher) => {\n        if (researcher.years.includes(year)) {\n          return total + 1;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalAuthors\n      };\n    });\n  }\n  \n  getPapers() {\n    this.apiService.getPapers(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.papers = response;\n        this.statsPapers();\n        this.statsTotalPapersByYear();\n        if(this.papers.length > 0){\n          this.generateChart('lineChart2', 'Number of papers', this.statsPaper);\n          this.generateTotalAuthorsChart('lineChart7', 'Total Papers by Year', this.totalPapersByYear);\n        }\n      },\n      error: (error: any) => {\n        console.error('Error in getPapers:', error);\n      }\n    });\n  }\n\n  getArticles() {\n    this.apiService.getArticles(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.articles = response;\n        this.statsArticles();\n        this.statsTotalArticlesByYear();\n        if(this.articles && this.articles.length > 0){\n          this.generateChart('lineChart15', 'Number of Articles', this.statsArticle);\n          this.generateTotalAuthorsChart('lineChart14', 'Total Articles by Year', this.totalArticlesByYear);\n        }\n      },\n      error: (error: any) => {\n        console.error('Error in getPapers:', error);\n      }\n    });\n  }\n\n\n  statsTotalPapersByYear() {\n    const years = this.papers.map(paper => paper.year);\n    this.totalPapersByYear = years.map(year => {\n      const totalPapers = this.papers.reduce((total, paper) => {\n        if (paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalPapers\n      };\n    });\n  }\n\n\n  statsTotalArticlesByYear() {\n    const years = this.articles.map(paper => paper.year);\n    this.totalArticlesByYear = years.map(year => {\n      const totalPapers = this.articles.reduce((total, paper) => {\n        if (paper.year === year) {\n          return total + paper.numPapers;\n        }\n        return total;\n      }, 0);\n      return {\n        year: year,\n        totalAuthors: totalPapers\n      };\n    });\n  }\n\n\n  getCollaborations() {\n    this.apiService.getCollaborations(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.collaborations = response;\n        this.statsColaboraciones();\n        this.generateChart3('lineChart3', 'Density', this.statistics[3].years, this.statistics[3].densidades);\n      },\n      error: (error: any) => {\n        console.error('Error in getCollaborations:', error);\n      }\n    });\n  }\n\n  getConnectedComponents(){\n    this.apiService.getConnectedComponents(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.connectedComponents = response;\n        this.statsConnectedComponents();\n        this.generateChart3('lineChart11', 'Number of Connected Components', this.statistics[5].years, this.statistics[5].connectedComponents);\n      },\n      error: (error: any) => {\n        console.error('Error in getConnectedComponents:', error);\n      }\n    });\n  }\n\n  getConnectedComponentsByvenue(){\n    this.apiService.getConnectedComponentsByvenue(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.connectedComponents = response;\n        this.statsConnectedComponentsByvenue();\n        this.generateChart4('lineChart12', 'Number of Connected Components', this.statistics[6]);\n        this.generateChart4('lineChart13', 'Number of Connected Components', this.statistics[7]);\n        \n      },\n      error: (error: any) => {\n        console.error('Error in getConnectedComponents:', error);\n      }\n    });\n  }\n\n  getConferencebyProceeding(){\n    this.apiService.getConferencebyProceeding(this.selectedTitles, this.venueName).subscribe({\n      next: (response: any) => {\n        this.stadisticsService.conferencesNames = [];\n        this.stadisticsService.years = [];\n        this.stadisticsService.inprocedings = [];\n      \n        response.forEach(({ title, year, numberOfInProceedings }: { title: string, year: string, numberOfInProceedings: number}) => {\n          this.stadisticsService.conferencesNames.push(title);\n          this.stadisticsService.years.push(year);\n          this.stadisticsService.inprocedings.push(numberOfInProceedings);\n        });\n        this.loadingTable1 = false;\n      \n        this.generateTablesProceeding(this.stadisticsService.conferencesNames, this.stadisticsService.years, this.stadisticsService.inprocedings);\n     \n      },\n      error: (error: any) => {\n        console.error('Error in getConferencebyProceeding:', error);\n      }\n    });\n  }\n\n  \n  generateTablesProceeding(venueTitles: string[], years: string[], numberOfInProceedings: number[]) {\n    const table = document.querySelector('#tableProceeding tbody');\n    if (table instanceof HTMLElement) {\n      table.innerHTML = ''; // Limpiar tabla existente antes de agregar nuevas filas\n  \n      venueTitles.forEach((venueTitle, index) => {\n        // Divide el t√≠tulo en partes usando la coma como delimitador\n        const parts = venueTitle.split(',');\n\n        if( parts.length== 6){\n            \n          parts[4]= parts[4].replace(\"Proceedings\",\"\");\n          const date = parts[4].split('.')\n          \n\n          // Construye el objeto que contiene los datos para la tabla\n          const rowData = {\n            name: parts[0] + '-' + parts[1].trim(),\n            location: parts[2] + ',' + parts[3],\n            date: date.slice(0).join(' ')\n          };\n\n          // Crea una fila para la tabla y agrega los datos\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n          \n\n          // Agrega la fila a la tabla\n          table.appendChild(row);\n        }\n\n\n        if(parts.length== 5){\n          \n            \n          parts[3] = parts[3].replace(\"Proceedings\",\"\").trim();\n          const date = parts[3].split('.')\n          const hasNumber = /\\d/.test(date[0]);\n\n          if(hasNumber){\n\n            if(parts[1].includes(\"Florence\")){\n \n              const rowData = {\n                name: parts[0],\n                location: parts[1].trim() + ',' + parts[2],\n                date: date[0]\n              };\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n              table.appendChild(row);\n            }else{\n\n              // Construye el objeto que contiene los datos para la tabla\n              const rowData = {\n                name: parts[0] + '-' + parts[1].trim(),\n                location: parts[2],\n                date: date[0]\n              };\n              // Crea una fila para la tabla y agrega los datos\n              const row = document.createElement('tr');\n              row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n              // Agrega la fila a la tabla\n              table.appendChild(row);\n            }\n\n          }else{\n\n            // Construye el objeto que contiene los datos para la tabla\n            const rowData = {\n              name: parts[0] + '-' + parts[1].trim(),\n              location: parts[2] + ', ' + parts[3],\n              date: parts[4] \n            };\n\n            // Crea una fila para la tabla y agrega los datos\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n            // Agrega la fila a la tabla\n            table.appendChild(row);\n          }\n\n        }\n\n\n        if( parts.length== 7){\n            \n          parts[5]= parts[5].replace(\"Proceedings\",\"\");\n          const date = parts[5].split('.')\n\n          if(parts[2].length > 15){\n          const rowData = {\n            name: parts[0] + '-' + parts[1].trim(),\n            location: parts[3] + ', ' + parts[4],\n            date: date[0]\n          };\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n          table.appendChild(row);\n          }else{\n\n            const isValidFormat = /^[a-zA-Z]+\\s+\\d{1,2}(-\\d{1,2}|\\d{1,2}[a-zA-Z]+\\s+\\d{1,2})$/.test(date[0].trim());\n\n            if(isValidFormat){\n\n              if(parts[2].includes(\"ER\")){\n \n                const rowData = {\n                  name: parts[0] + ',' + parts[1].trim() + '-' +  parts[2] ,\n                  location: parts[3] + ', ' + parts[4],\n                  date: date[0]\n                };\n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n                table.appendChild(row);\n              }else{\n\n                const rowData = {\n                  name: parts[0] + '-' + parts[1].trim(),\n                  location: parts[2]+ ', ' + parts[3] + ', ' + parts[4],\n                  date: date[0]\n                };\n    \n                const row = document.createElement('tr');\n                row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n                table.appendChild(row);\n\n              }\n\n            }else{\n                            \n            const rowData = {\n              name: parts[0] + '-' + parts[1].trim(),\n              location: parts[2] + ', ' + parts[3],\n              date: parts[4] + ', ' + date[0]\n            };\n            const row = document.createElement('tr');\n            row.innerHTML = `<td>${rowData.name}</td><td>${rowData.location}</td><td>${rowData.date}</td><td>${years[index]}</td><td>${numberOfInProceedings[index]}</td>`;\n            table.appendChild(row);\n            }\n  \n          }       \n        }  \n      });\n    }\n  }\n  \n  \n  async waitAuthorsWithPapersNoEmpty(){\n    while (!this.papersWithAuthors || this.papersWithAuthors.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  async waitSingleAuthorsNoEmpty(){\n    while (!this.singleAuthor || this.singleAuthor.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  getAuthorsPapers() {\n      this.apiService.getAuthorsPapers(this.selectedTitles, this.conferenceOption, this.venueName)\n        .subscribe({\n          next: async (response: any) => {\n            this.singleAuthor = response;\n            this.statsSingleAuthor();\n            if(this.barChart){\n              this.barChart.destroy();\n            }\n            if(this.barChart2){\n              this.barChart2.destroy();\n            }\n            this.generateBarChartArticles('barChart2', 'Single Author Articles', this.statistics[8].years, this.statistics[8].porcentajes);          \n            this.generateBarChart('barChart1', 'Single Author Papers', this.statistics[4].years, this.statistics[4].porcentajes);          \n          },\n          error: (error: any) => {\n            console.error('Error in getAuthorsPapers:', error);\n          }\n        });\n  }\n\n  /**Function to obtain the distributions of both authors by papers and papers by authors*/\n  getDistributions(){\n    const labels: string[] = ['1', '2', '3', '4', '5 o m√°s'];\n\n    // This represents the number of authors that each paper has.\n    const authorsByPaper: number[] = [1, 2, 3, 4].map((numAuthors) =>\n    this.papersWithAuthors.filter((paper) => paper.numAuthors === numAuthors).length\n    );\n    authorsByPaper[4] = this.papersWithAuthors.filter((paper) => paper.numAuthors >= 5).length;\n    let allPapers = this.papers.reduce((all, paper) => all + paper.numPapers, 0);\n    allPapers += this.articles.reduce((all, paper) => all + paper.numPapers, 0);\n\n    // This represents the number of published papers that each author has.\n    const papersByAuthor: number[] = [1, 2, 3, 4].map((numPubs) =>\n    this.singleAuthor.filter((paper) => paper.numPublications === numPubs).length\n    );\n    papersByAuthor[4] = this.singleAuthor.filter((paper) => paper.numPublications >= 5).length\n    const allAuthors = this.singleAuthor.length;\n\n    // We create the two tables that are linked with the ids of the html\n    const authorsTable = document.querySelector('#authorsTable tbody');\n    const papersTable = document.querySelector('#papersTable tbody');\n\n    \n    \n    if (authorsTable !== null) {\n      authorsByPaper.forEach((amount, index) => {\n        const row = document.createElement('tr');\n        const percentage = (amount / allPapers * 100).toFixed(2);\n        const worth = amount.toString() + \"(\" + percentage + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n        authorsTable.appendChild(row);\n      });\n    }\n\n    if (papersTable !== null) {\n      papersByAuthor.forEach((amount, index) => {\n        const row = document.createElement('tr');\n        const percentage = (amount / allAuthors * 100).toFixed(2);\n        const worth = amount.toString() + \"(\" + percentage + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${worth}</td>`;\n        papersTable.appendChild(row);\n      });\n    }\n  }\n\n  getDemographicData(){\n      const datasets = this.researchers.map(researcher => {\n        let name = researcher.researcher.properties.name.split(' ')[0];\n        if(name.includes(\"-\")){\n          name = name.split('-')[0];\n        }\n        const years = Array.isArray(researcher.years) ? researcher.years : [researcher.years];\n      \n        const datasetByYear = years.map((year: any) => {\n          const info = this.commonNames[name];\n          const genero = info ? info.genero : 'Unknown';\n          const frecuencias = info ? info.frec_paises : {};\n      \n          return {\n            year,\n            name,\n            genero,\n            frecuencias\n          };\n        });\n        return datasetByYear;\n      }).flat(); \n\n      this.statsGender(datasets);\n      this.statsGeography(datasets);\n  }\n\n  generateNGrams(titles: string[], n: number): string[] {\n    const ngrams: string[] = [];\n    titles.forEach((title) => {\n      const words = title.toLowerCase().split(\" \");\n      for (let i = 0; i < words.length - n + 1; i++) {\n        ngrams.push(words.slice(i, i + n).join(\" \"));\n      }\n    });\n    return ngrams;\n  }\n  \n  countFrequencies(ngrams: string[]): Map<string, number> {\n    const frequencies = new Map<string, number>();\n    ngrams.forEach((ngram) => {\n      const count = frequencies.get(ngram) || 0;\n      frequencies.set(ngram, count + 1);\n    });\n    return frequencies;\n  }\n\n  clearTitle(title: string, stopwords: string[]) {\n    // Separate the title into words\n    const words = title.toLowerCase().split(\" \").map(word => word.replace(/[^\\w\\s]/g, \"\"));\n\n    // We eliminate repetitions of letters and plurals to improve frequency\n    const wordsNoRepeat = words.map(word => word.replace(/(.)\\1+/g, \"$1\"));\n    const singularWords = wordsNoRepeat.map(word => singular(word));\n    \n    // Filter words to remove stopwords\n    const filteredWords = singularWords.filter(word => !stopwords.includes(word));\n  \n    // Join the filtered words into a new title\n    const newTitle = filteredWords.join(' ');\n    \n    return newTitle;\n  }\n\n  getTopN(frequencies: Map<string, number>, n: number): [string, number][] {\n    const sortedFrequencies = [...frequencies.entries()].sort((a, b) => b[1] - a[1]);\n    return sortedFrequencies.slice(0, n);\n  }\n\n  getTopicAnalysis(){\n\n      // We require natural to tokenize and remove stopwords, and calculate frequencies\n      const stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', '.', ','];\n\n      const cleanTitles = this.papersWithAuthors.map(paper => {\n        const ipName = this.clearTitle(paper.ipName, stopwords);\n        const year = parseInt(paper.year);\n        return { ipName, year };\n      });\n\n      const bigrams = this.generateNGrams(cleanTitles.map((paper) => paper.ipName), 2);\n      const trigrams = this.generateNGrams(cleanTitles.map((paper) => paper.ipName), 3);\n\n      const bigramFrequencies = this.countFrequencies(bigrams);\n      const trigramFrequencies = this.countFrequencies(trigrams);\n\n      const top20Bigrams = this.getTopN(bigramFrequencies, 20);\n      const top20Trigrams = this.getTopN(trigramFrequencies, 20);\n\n    \n      const top20BigramsWithYears = top20Bigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: cleanTitles.filter((paper) => paper.ipName.includes(ngram)).map((paper) => paper.year),\n      }));\n    \n      const top20TrigramsWithYears = top20Trigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: cleanTitles.filter((paper) => paper.ipName.includes(ngram)).map((paper) => paper.year),\n      }));\n\n      const table1 = document.querySelector('#tableBigramas tbody');\n      const table2 = document.querySelector('#tableTrigramas tbody');\n    \n      if (table1 instanceof HTMLElement && table2 instanceof HTMLElement) {\n        top20BigramsWithYears.forEach(({ ngram, count, years }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n      \n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n      \n          table1.appendChild(row);\n        });\n      \n        top20TrigramsWithYears.forEach(({ ngram, count, years }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n      \n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n      \n          table2.appendChild(row);\n        });\n      }\n\n      const combinedData = [...top20BigramsWithYears, ...top20TrigramsWithYears];\n      \n      combinedData.sort((a, b) => b.count - a.count);\n\n      const maxFrecuencia = combinedData[0].count;\n      const minWeight = 0;\n      const maxWeight = 20;\n\n\n      const wordCloudData = combinedData.map((item, index) => ({\n        text: item.ngram,\n        weight: this.calculateWeight(item.count, maxFrecuencia, minWeight, maxWeight),\n        color: this.randomColor()\n      }));\n\n      this.cloudData = wordCloudData;\n     \n  }\n  \n  calculateWeight(frec: number, maxFrec: number, minWeight: number, maxWeight: number): number {\n    const weight = frec / maxFrec;\n    const normWeight = weight * (maxWeight - minWeight) + minWeight;\n    return Math.round(normWeight);\n  }\n\n  /**\n   * ############################################\n   */\n\n  statsResearchers() {\n    const names = new Set(this.researchers.map(researcher => researcher.name));\n    this.statsAuthors = [];\n    this.statsAuthors = Array.from(names).map(name => {\n      const years = this.selectedTitles.map(titulo => titulo.properties.name);\n      years.sort((a, b) => parseInt(a) - parseInt(b));\n      this.selectedYears = years;\n      const numResearchersPorAnio = years.map(anio =>\n        this.researchers.reduce((total, researcher) => {\n          if (researcher.name === name && researcher.years.includes(anio)) {\n            return total + 1;\n          }\n          return total;\n        }, 0)\n      );\n      return {\n        name: name,\n        years: years,\n        numResearchers: numResearchersPorAnio\n      };\n    });\n  }\n  \n  statsPapers() {\n    const names = new Set(this.papers.map(paper => paper.name));\n    this.ConferencesCount = names.size;\n    this.statsPaper = Array.from(names).map(name => {\n      const years = this.papers.map(paper => paper.year);\n      const numPapersPorAnio = years.map(year =>\n        this.papers.reduce((total, paper) => {\n          if (paper.name === name && paper.year === year) {\n            return total + paper.numPapers;\n          }\n          return total;\n        }, 0)\n      );\n      return {\n        name: name,\n        years: years,\n        numResearchers: numPapersPorAnio\n      };\n    });\n  }  \n\n  statsArticles() {\n    \n    const names = new Set(this.articles.map(paper => paper.name));\n    this.journalsCount = names.size;\n    this.statsArticle = Array.from(names).map(name => {\n      const years = this.articles.map(paper => paper.year);\n      const numPapersPorAnio = years.map(year =>\n        this.articles.reduce((total, paper) => {\n          if (paper.name === name && paper.year === year) {\n            return total + paper.numPapers;\n          }\n          return total;\n        }, 0)\n      );\n      return {\n        name: name,\n        years: years,\n        numResearchers: numPapersPorAnio\n      };\n    });\n  }  \n\n\n  statsColaboraciones(){  \n\n    let colabsXtotal: { year: number; numColabs: number; numPapers: number }[] = [];\n\n    if (this.papers.length > 1) {\n      const colabsPapers = this.papers.map(paper => {\n        const colab = this.collaborations.find(c => c.year === paper.year);\n        return {\n          year: paper.year,\n          numColabs: colab ? colab.numColabs : 0,\n          numPapers: paper.numPapers\n        };\n      });\n      colabsXtotal = colabsXtotal.concat(colabsPapers);\n    }\n  \n    if (this.articles.length > 1) {\n      const colabsArticles = this.articles.map(article => {\n        const colab = this.collaborations.find(c => c.year === article.year);\n        return {\n          year: article.year,\n          numColabs: colab ? colab.numColabs : 0,\n          numPapers: article.numPapers\n        };\n      });\n      colabsXtotal = colabsXtotal.concat(colabsArticles);\n    }\n\n    //colabsXtotal debe tener la suma de los dos valores si ha entrao en los dos ifs\n    const density = colabsXtotal.map(dato => {\n      const { year, numColabs, numPapers } = dato;\n      const density = numColabs / numPapers;\n      return { density, year };\n    });\n\n    this.statistics[3] = {\n      years: density.map(dato => dato.year),\n      densidades: density.map(dato => dato.density)\n    };\n  }\n\n\n\n  statsConnectedComponents() {\n    // Copiar los datos originales para no afectar el orden original\n    const copiedData = [...this.connectedComponents];\n\n    // Ordenar los datos por a√±o\n    copiedData.sort((a, b) => a.year - b.year);\n\n    // Extraer los a√±os y componentes conectados ordenados\n    const years = copiedData.map(item => item.year);\n    const connectedComponents = copiedData.map(item => item.connectedComponents);\n  \n    this.statistics[5] = {\n        years: years,\n        connectedComponents: connectedComponents\n        // Puedes agregar otras propiedades si es necesario\n    };\n}\n\n  statsConnectedComponentsByvenue() {\n    const venueDataMap: Map<string, { years: any[], connectedComponents: any[], venueName: string} | undefined> = new Map();\n    const venueDataMapRelative: Map<string, { years: any[], connectedComponents: any[], venueName: string, index?: number } | undefined> = new Map();\n\n    this.connectedComponents.forEach((item) => {\n      const venueName = item.venueName;\n\n      if (!venueDataMap.has(venueName)) {\n        venueDataMap.set(venueName, {\n          years: [],\n          connectedComponents: [],\n          venueName: venueName,\n        });\n\n      }\n\n      const venueData = venueDataMap.get(venueName);\n      if (venueData) {\n        venueData.years.push(item.year);\n        venueData.connectedComponents.push(item.connectedComponents);\n      }\n    });\n\n    this.connectedComponents.forEach((item) => {\n      const venueName = item.venueName;\n\n      if (!venueDataMapRelative.has(venueName)) {\n        venueDataMapRelative.set(venueName, {\n          years: [],\n          connectedComponents: [],\n          venueName: venueName,\n        });\n      }\n\n      const venueData = venueDataMapRelative.get(venueName);\n      if (venueData) {\n        venueData.years.push(item.year);\n        let adjustedComponents = item.connectedComponents;\n        while (adjustedComponents > 1) {\n          adjustedComponents /= 10;\n        }\n  \n        venueData.connectedComponents.push(adjustedComponents);\n      }\n    });\n\n    this.statistics[6] = Array.from(venueDataMap.values());\n    this.statistics[7] = Array.from(venueDataMapRelative.values());\n  }\n  \n\n  statsSingleAuthor() {\n    \n    const papersWithAuthors: { ipName: string, numAuthors: number, authorNames: string[], year: string }[] = [];\n\n    // Map all the researchers, to create papersWithAuthors, which is an array that has the name of a publication\n    // and the authors who have contributed to it.\n    this.singleAuthor.forEach((author: { ipNames: string[], researcher: string, year: string }) => {\n      author.ipNames.forEach(ipName => {\n        const paperIndex = papersWithAuthors.findIndex(paper => paper.ipName === ipName);\n        if (paperIndex !== -1) {\n          papersWithAuthors[paperIndex].numAuthors++;\n          papersWithAuthors[paperIndex].authorNames.push(author.researcher);\n        } else {\n            papersWithAuthors.push({\n              ipName,\n              numAuthors: 1,\n              authorNames: [author.researcher],\n              year: author.year\n            });\n          }\n        });\n    });\n\n    this.papersWithAuthors = papersWithAuthors;\n    console.log(this.papersWithAuthors)\n\n    // We get all the entries whose author is one, for the statistics\n    const papersWithOneAuthor = papersWithAuthors.filter(paper => paper.numAuthors === 1);\n\n    const porcentajeByYear = this.papers.map(paper => {\n      const year = paper.year;\n      const numPapers = paper.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const percentage = (numPapersWithSingleAuthor / numPapers) * 100;\n    \n      return { year, percentage };\n    });\n\n    const porcentajeByYear2 = this.articles.map(article => {\n      const year = article.year;\n      const numPapers = article.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const percentage = (numPapersWithSingleAuthor / numPapers) * 100;\n      return { year, percentage };\n    });\n    \n    this.statistics[4] = {\n      years: porcentajeByYear.map(dato => dato.year),\n      porcentajes: porcentajeByYear.map(dato => dato.percentage)\n    };\n\n    this.statistics[8] = {\n      years: porcentajeByYear2.map(dato => dato.year),\n      porcentajes: porcentajeByYear2.map(dato => dato.percentage)\n    };\n\n    this.singleArticles = this.statistics[8];\n    this.singlePapers = this.statistics[4];\n\n  }  \n\n  statsGeography(datasets: any[]){\n    const mappingDate: {[date: string]: {[country: string]: number}} = {};\n    const datasetFiltered = datasets.filter((object: any) => Object.keys(object.frecuencias).length > 0);\n    \n    // Obtener todas las fechas √∫nicas\n    const uniqueDates = [...new Set(datasetFiltered.map(dato => dato.year))];\n\n    // Iterar sobre las fechas\n    for (const date of uniqueDates) {\n      const objectDate = datasetFiltered.filter(dato => dato.year === date);\n\n      // Crear objeto de mapeo para la fecha actual\n      mappingDate[date] = {};\n  \n    for (const object of objectDate) {\n      let countryHighest = '';\n      let highestFrequency = -1;\n\n      for (const country in object.frecuencias) {\n          if (object.frecuencias[country] > highestFrequency) {\n            countryHighest = country;\n            highestFrequency = object.frecuencias[country];\n          }\n        }\n        if(!(countryHighest in mappingDate[date])){\n          mappingDate[date][countryHighest] = 1;\n        }else{\n          mappingDate[date][countryHighest] = mappingDate[date][countryHighest] + 1;\n        }\n      }\n    }\n\n    // We normalize values according to their total\n    for (const year in mappingDate) {\n      let total = 0;\n      for (const country in mappingDate[year]) {\n        total += mappingDate[year][country];\n      }\n      for (const country in mappingDate[year]) {\n        mappingDate[year][country] = Number((mappingDate[year][country]/total).toFixed(4));\n      }\n    }\n\n    const years = Object.keys(mappingDate); // Get the keys of the years\n    const countries = Object.keys(mappingDate[years[0]]); // Get country names\n    const datasetsLabels = countries; // Labels of the data sets will be the names of the countries \n\n    // Create the data matrix for the countries\n    const datasetsData = countries.map((country) =>\n      years.map((year) => mappingDate[year][country])\n    );\n\n    this.generateMultipleGraph('lineChart5', years, datasetsLabels, datasetsData);\n    \n  }\n\n  filterAuthorsByDecade(authors: Author[], startYear: number, endYear: number): Author[] {\n    const filteredAuthors: Author[] = [];\n  \n    // Browse the original authors\n    authors.forEach((author) => {\n      // Check if the author is within the specified decade\n      const authorYears = author.year.split(\",\").map(Number).filter((year) => year >= startYear && year <= endYear);\n\n      if (authorYears.length > 0) {\n        // Search if there is already a merged author with the same name and decade\n        const existingAuthor = filteredAuthors.find((filteredAuthor) => filteredAuthor.researcher === author.researcher);\n        if (existingAuthor) {\n          // Merge the existing author's entries with the current author's entries\n          existingAuthor.numPublications += author.numPublications;\n          existingAuthor.year += `, ${author.year}`;\n        } else {\n          // Add the current author to the list of filtered authors\n          filteredAuthors.push({\n            ipNames: author.ipNames,\n            numPublications: author.numPublications,\n            researcher: author.researcher,\n            year: author.year\n          });\n        }\n      }\n    });\n\n    return filteredAuthors;\n  }\n\n  statsProlificAuthors(selectedYears: number[]): DecadeStats[] {\n    // Get the range of years selected by the user\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n  \n    // Calculate the decades corresponding to the selected range of years\n    const startDecade = Math.floor(startYear / 10) * 10;\n    const endDecade = Math.floor(endYear / 10) * 10;\n  \n    // Generate the decades within the selected year range\n    const decades: DecadeStats[] = [];\n    for (let decade = startDecade; decade <= endDecade; decade += 10) {\n      const decadeLabel = `${decade}s`;\n      const decadeStartYear = decade;\n      const decadeEndYear = decade + 9;\n      const decadeAuthors = this.filterAuthorsByDecade(this.singleAuthor, decadeStartYear, decadeEndYear);\n  \n      decades.push({\n        label: decadeLabel,\n        startYear: decadeStartYear,\n        endYear: decadeEndYear,\n        authors: decadeAuthors\n      });\n    }  \n    // Sort authors by number of publications in each decade\n    decades.forEach((decade) => {\n      decade.authors.sort((a, b) => b.numPublications - a.numPublications);\n      if (decade.authors.length > 20){\n        decade.authors = decade.authors.slice(0, 20); \n      } \n    });\n  \n    // Return the decades with the authors ordered\n    return decades;\n  }\n\n  statsProlificAuthors2(selectedYears: number[]) {\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n  \n    const allAuthors = this.filterAuthorsByDecade(this.singleAuthor, startYear, endYear);\n    const topAuthors = allAuthors.sort((a, b) => b.numPublications - a.numPublications).slice(0, 20);\n  \n    const tables = {\n      'degree': document.querySelector('#degree tbody'),\n    };\n  \n    for (const author of topAuthors) {\n      const table = tables['degree'];\n  \n      if (table instanceof HTMLElement) {\n        const yearsArray = author.year.split(\",\").map(Number);\n        const minYear = Math.min(...yearsArray);\n        const maxYear = Math.max(...yearsArray);\n\n  \n        const row = document.createElement('tr');\n        row.innerHTML = `\n  \n                         <td >${author.researcher}</td>\n                         <td style=\"padding-left: 50px\" >${author.numPublications}</td>\n                         <td style=\"padding-left: 50px\">${minYear}</td> \n                         <td style=\"padding-left: 80px\">${maxYear}</td>`;\n  \n        table.appendChild(row);\n      }\n    }\n\n  }\n\n  generateTablesDecades2(decadeStats: any[]){\n    const tables: { [key: string]: HTMLElement | null } = {\n      '1990s': document.querySelector('#table90 tbody'),\n      '2000s': document.querySelector('#table00 tbody'),\n      '2010s': document.querySelector('#table10 tbody'),\n      '2020s': document.querySelector('#table20 tbody'),\n    };\n    for (const decade of decadeStats) {\n      const table = tables[decade.label];\n  \n      if (table instanceof HTMLElement) {\n        decade.authors.slice(0, 20).forEach((autor: { researcher: any; numPublications: any; year: any; }) => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${autor.researcher}</td><td>${autor.numPublications}</td>`;\n  \n          table.appendChild(row);\n        });\n      }\n    }\n  }\n\n  generateTotalAuthorsChart(idChart: string, label: string, data: any[]) {\n    const years = data.map(entry => entry.year);\n    const totalAuthors = data.map(entry => entry.totalAuthors);\n\n    if(idChart == \"lineChart6\"){\n      this.lineChart6 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: years,\n          datasets: [\n            {\n              label: label,\n              data: totalAuthors,\n              fill: false,\n              borderColor: 'rgb(0, 22, 68)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n    }\n\n\n    if(idChart == \"lineChart7\"){\n      this.lineChart7 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: years,\n          datasets: [\n            {\n              label: label,\n              data: totalAuthors,\n              fill: false,\n              borderColor: 'rgb(0, 22, 68)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18,\n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n    }\n\n    if(idChart = \"lineChart14\"){\n        this.lineChart14 = new Chart(idChart, {\n          type: 'line',\n          data: {\n            labels: years,\n            datasets: [\n              {\n                label: label,\n                data: totalAuthors,\n                fill: false,\n                borderColor: 'rgb(0, 22, 68)',\n                borderWidth: 1\n              }\n            ]\n          },\n          options: {\n            plugins: {\n              legend: {\n                labels: {\n                  color: 'black',\n                  font: {\n                    size: 18,\n                    family: 'Roboto',\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                type: 'linear',\n                display: true\n              }\n            },\n          }\n        });\n      \n    }\n\n\n\n\n\n  }\n\n  generateChart(idChart: string, label: string, data: any[]) {\n    const datasets = data.map((entry, index) => ({\n      label: entry.name,\n      data: entry.numResearchers,\n      fill: false,\n      borderColor: this.getRandomColor(index),\n      borderWidth: 1\n    }));\n\n    if(idChart == \"lineChart2\"){\n      this.lineChart2 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n  \n    }\n\n    if(idChart == \"lineChart1\"){\n      this.lineChart = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n  \n    }\n\n    if(idChart == \"lineChart15\"){\n      this.lineChart15 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: data[0].years,\n          datasets: datasets\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n    \n      \n    }\n\n  }\n\n  generateChart3(idChart: string, label: string, labels: any[], data: any[]) {\n    if(idChart==\"lineChart11\" || idChart==\"lineChart3\"){\n      this.lineChart3 = new Chart(idChart, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: label,\n              data: data,\n              fill: false,\n              borderColor: 'rgb(0, 22, 68)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              type: 'linear',\n              display: true\n            }\n          },\n        }\n      });\n    }\n    \n   \n  }\n\n  generateChart4(idChart: string, label: string, data: any) {\n \n    const datasets = data.map((venue: any, index: any) => {\n      return {\n        label: venue.venueName,\n        data: venue.connectedComponents,\n        years: venue.years,\n        fill: false,\n        borderColor: this.getRandomColor(index),\n        borderWidth: 1\n      };\n    });\n  \n    const allYears = Array.from(new Set([].concat(...datasets.map((dataset: any) => dataset.years))));\n    allYears.sort();\n  \n    this.lineChart = new Chart(idChart, {\n      type: 'line',\n      data: {\n        labels: allYears,\n        datasets: datasets\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              color: 'black',\n              font: {\n                size: 18,\n                family: 'Roboto',\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            display: true\n          }\n        },\n      }\n    });\n  }\n  \n\n  statsGender(datasets: any[]){\n    const datasetsByGenre: { [genero: string]: { year: string; count: number }[] } = {};\n\n      datasets.forEach((data: { year: any; genero: any; }) => {\n        const { year, genero } = data;\n        \n        let genderKey = '';\n        \n        if (genero == 'M' || genero == '?M' || genero == '1M' || genero == '?') {\n          genderKey = 'Men';\n        } else if (genero == 'F' || genero == '?F' || genero == '1F') {\n          genderKey = 'Women';\n        } else{\n          genderKey = 'Unknown';\n        }\n        \n        if (!datasetsByGenre[genderKey]) {\n          datasetsByGenre[genderKey] = [];\n        }\n        \n        const existingData = datasetsByGenre[genderKey].find(d => d.year === year);\n        \n        if (existingData) {\n          existingData.count++;\n        } else {\n          datasetsByGenre[genderKey].push({\n            year,\n            count: 1\n          });\n        }\n      });\n\n      // Create an object to store the ordered data\n      const sortedData: { [anio: string]: { hombres: number; mujeres: number; total: number} } = {};\n      const men = datasetsByGenre['Men'];\n      const women = datasetsByGenre['Women'];\n\n      // Sort men's data\n      men.forEach(dato => {\n        const year = dato.year;\n        const count = dato.count;\n\n        sortedData[year] = { hombres: count, mujeres: 0, total: count };\n      });\n\n      // Sort the women's data and combine it with the men's data\n      women.forEach(dato => {\n        const year = dato.year;\n        const count = dato.count;\n\n        if (sortedData[year]) {\n          sortedData[year].mujeres = count;\n          sortedData[year].total += count;\n        } else {\n          sortedData[year] = { mujeres: count, hombres: 0, total: count };\n        }\n      });\n\n\n      // Get the years sorted\n      const organizedYears = Object.keys(sortedData).sort();\n\n\n      const countMen = organizedYears.map(anio => Number((sortedData[anio].hombres/(sortedData[anio].total)).toFixed(4)));\n      const countWoman = organizedYears.map(anio => Number((sortedData[anio].mujeres/(sortedData[anio].total)).toFixed(4)));\n\n      \n      this.generateCircularChart('lineChart4', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n      this.generateMultipleGraph('lineChart8', organizedYears, ['Hombres', 'Mujeres'], [countMen, countWoman]);\n  }\n\n  generateMultipleGraph(chartId: string, labels: string[], datasetsLabels: string[], datasetsData: number[][]) {\n    const datasets = datasetsLabels.map((label, index) => ({\n      label: label,\n      data: datasetsData[index],\n      backgroundColor: 'rgba(0, 0, 0, 0.1)',\n      borderColor: this.getRandomColor(index),\n    }));\n  \n    const chartConfig: ChartConfiguration<'line'> = {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets,\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              color: 'black',\n              font: {\n                size: 18, \n                family: 'Roboto',\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            type: 'linear',\n            display: true,\n          },\n        },\n      },\n    };\n  \n    const ctx = document.getElementById(chartId) as HTMLCanvasElement;\n    new Chart(ctx, chartConfig);\n  }\n\n  generateCircularChart(chartId: string, labels: string[], datasetsLabels: string[], datasetsData: number[][]) {\n    const colors = ['#FF5733', '#3399FF'];\n\n    const datasets = datasetsLabels.map((label, index) => ({\n      label: label,\n      data: datasetsData[index],\n      backgroundColor: colors[index],  // Cambia la opacidad a un valor m√°s alto\n      borderColor: 'black',\n    }));\n  \n    const chartConfig: ChartConfiguration<'pie'> = {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: datasets,\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n            labels: {\n              color: 'black',\n              font: {\n                size: 18,\n                family: 'Roboto',\n              }\n            }\n          }\n        },\n      },\n    };\n    const ctx = document.getElementById(chartId) as HTMLCanvasElement;\n    new Chart(ctx, chartConfig);\n  }\n\n  \n\n  generateBarChart(idChart: string, label: string, labels: any[], data: any[]) {\n    if(idChart = \"barChart1\"){\n      this.barChart = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: label,\n              data: data,\n              backgroundColor: 'rgb(51, 153, 255)',\n              borderColor: 'rgb(51, 153, 255)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }  \n\n  generateBarChartArticles(idChart: string, label: string, labels: any[], data: any[]) {\n    if(idChart = \"barChart2\"){\n      this.barChart2 = new Chart(idChart, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: label,\n              data: data,\n              backgroundColor: 'rgb(255, 87, 51)',\n              borderColor: 'rgb(255, 87, 51)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          plugins: {\n            legend: {\n              labels: {\n                color: 'black',\n                font: {\n                  size: 18, \n                  family: 'Roboto',\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }  \n\n\n  randomColor(){\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgba(${r}, ${g}, ${b}, 1)`;\n  }\n\n  getRandomColor(index: number) {\n    let colors: Record<number, string> = {\n      0: \"rgba(51, 153, 255)\",\n      1: \"rgba(255, 0, 0, 1)\",\n      2: \"rgba(98, 192, 75, 1)\", \n      3: \"rbga(192, 141, 75, 1)\",\n      4: \"rgba(226, 232, 107, 1)\",\n      5: \"rgba(176, 75, 192, 1)\"\n    };\n\n    return colors[index];\n  }\n\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', { responseType: 'text' }).subscribe(\n      (data: string) => {\n        this.commonNames = this.parseCommonNames(data);\n      },\n      (error: any) => {\n        console.error('Error al cargar los datos:', error);\n      }\n    );\n  }\n\n  parseCommonNames(data: string) {\n\n    const lines = data.split('\\n');\n    const dict: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n    let currentName = '';\n    let currentData: { frec_paises: { [key: string]: number }, genero: string } = {\n      frec_paises: {},\n      genero: ''\n    };\n  \n    for (const linea of lines) {\n      if (linea.startsWith('nombre:')) {\n        currentName = linea.split(':')[1].trim();\n        currentData = { frec_paises: {}, genero: '' };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        currentData.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        currentData.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        dict[currentName] = currentData;\n      }\n    }\n    return dict;\n  }\n\n  async main(){\n    try {\n      this.selectedTitles = this.stadisticsService.getSelectedTitles();\n      this.conferenceOption = this.stadisticsService.getConferenceOption();\n      this.venueName = this.stadisticsService.getVenueName();\n      if(this.stadisticsService.venueNameConfirm != this.stadisticsService.getVenueName()){\n        this.getConferencebyProceeding();\n      }else{\n        this.generateTablesProceeding(this.stadisticsService.conferencesNames, this.stadisticsService.years, this.stadisticsService.inprocedings);\n      }\n      this.getResearchersConference();\n      this.getPapers(); \n      this.getArticles();\n      this.getConferencebyProceeding();\n  \n      if(this.researchers.length == 0){\n        await this.waitResearcherNoEmpty();\n        this.getDemographicData();\n        this.getCollaborations();\n        this.getAuthorsPapers();\n     \n      } else{\n        this.getDemographicData();\n        this.getCollaborations();\n        this.getAuthorsPapers();\n      }    \n\n      if(this.papersWithAuthors.length == 0){\n        await this.waitAuthorsWithPapersNoEmpty();\n        console.log(\"si\")\n        this.getTopicAnalysis();\n        this.getDistributions();\n      }else{\n        this.getTopicAnalysis();\n        this.getDistributions();\n      }\n      \n      if(this.singleAuthor.length == 0){\n        await this.waitSingleAuthorsNoEmpty();\n        this.decadeStats = this.statsProlificAuthors(this.selectedYears);\n        this.generateTablesDecades2(this.decadeStats)\n      }else{\n        this.decadeStats = this.statsProlificAuthors(this.selectedYears);\n        this.generateTablesDecades2(this.decadeStats)\n      }\n      this.statsProlificAuthors2(this.selectedYears);\n \n      this.getConnectedComponents();\n      this.getConnectedComponentsByvenue();\n\n      while(this.stadisticsService.conferencesNames.length <1){\n        this.loadingTable1 = true;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        this.spinnerService.show()\n      }\n      this.loadingTable1 = false;\n      this.stadisticsService.venueNameConfirm = this.stadisticsService.getVenueName();\n\n     \n  } catch (error) {\n    console.error('Error in getData with:', error);\n  }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
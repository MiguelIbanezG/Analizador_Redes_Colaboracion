{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.menuStatus = true;\n    this.publications = [];\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  onClick(params) {\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n    this.selectNode = null;\n  }\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n            var uniquePublicationsSet = new Set();\n            if (author.researcher === edge.to) {\n              var uniquePublications = [];\n              author.publications.forEach(publication => {\n                uniquePublicationsSet.add(publication);\n              });\n              var uniquePublications = Array.from(uniquePublicationsSet);\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"tree\"], [\"treeContainer\", \"\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"div\", 1, 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.nameAuthor, \" Collaboration Network\");\n      }\n    },\n    styles: [\"@charset \\\"UTF-8\\\";\\n.conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  min-height: 100vh;\\n}\\n\\nh2[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 40px;\\n}\\n\\n.tree[_ngcontent-%COMP%] {\\n  height: 1000px; \\n\\n  margin-bottom: 100px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQWhCO0VBQ0ksYUFBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7QUFFSjs7QUFFQTtFQUNJLGtCQUFBO0VBQ0EsZUFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQSxFQUFBLG1FQUFBO0VBQ0Esb0JBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZWluZXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICBcbn1cblxuaDJ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogNDBweDtcbn1cblxuLnRyZWUge1xuICAgIGhlaWdodDogMTAwMHB4OyAvKiBPIGVzdGFibGVjZSB1bmEgYWx0dXJhIGVzcGVjw4PCrWZpY2EsIHBvciBlamVtcGxvOiBoZWlnaHQ6IDUwMHB4OyAqL1xuICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICB9XG5cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","NetworksComponent","constructor","appNetworkService","appNetworkInitService","menuStatus","publications","publicationsNode","objectKeys","Object","keys","data","nodes","edges","selectedData","ngOnInit","nameAuthor","selectedAuthors","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","on","params","onSelect","onClick","ngOnDestroy","destroy","length","onClickEdge","edgeId","edge","get","selectEdge","type","researcherName","to","nameAuthors","map","author","researcher","concat","selectNode","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","forEach","push","from","uniquePublicationsSet","Set","uniquePublications","publication","add","Array","result","pointer","prevSelectNode","_","i0","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts","/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { ApiService } from '../services/api.service';\n\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n  nameAuthor: any;\n\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  publications: any[] = [];\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  private onClick(params: any): void {\n   \n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n\n}\n\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publications = [];\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n\n    this.selectNode = null;\n\n  }\n\n  private onSelect(params: any): void {\n\n\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n            var uniquePublicationsSet = new Set();\n\n            if (author.researcher === edge.to) {\n              var uniquePublications: any = []\n              author.publications.forEach((publication: any) => {\n                 uniquePublicationsSet.add(publication);\n              });\n\n              var uniquePublications: any = Array.from(uniquePublicationsSet);\n\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n\n          });\n\n        }\n\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n}\n\n","<div class=\"container\">\n\n   <!-- Title -->\n   <h2>{{nameAuthor}} Collaboration Network</h2>\n    \n  <div class=\"tree\"  #treeContainer></div>\n\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
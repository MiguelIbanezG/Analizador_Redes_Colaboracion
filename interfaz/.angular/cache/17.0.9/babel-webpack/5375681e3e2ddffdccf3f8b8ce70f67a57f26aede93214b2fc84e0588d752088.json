{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"../services/api.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../services/selected-nodes.directive\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5, 6)(2, \"h1\");\n    i0.ɵɵtext(3, \" Previous Selected Node\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selectedData);\n  }\n}\nfunction NetworksComponent_h1_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1, \" Selected node\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService, apiService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.apiService = apiService;\n    this.menuStatus = true;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.nodeNo = 6;\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService), i0.ɵɵdirectiveInject(i3.ApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 5,\n    consts: [[1, \"container\"], [\"treeContainer\", \"\"], [\"style\", \"flex:4\", 4, \"ngIf\"], [2, \"flex\", \"1\"], [4, \"ngIf\"], [2, \"flex\", \"4\"], [\"menuDiv\", \"\"], [\"selected-nodes\", \"\", 3, \"selected\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", null, 1);\n        i0.ɵɵtemplate(3, NetworksComponent_div_3_Template, 5, 1, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtemplate(5, NetworksComponent_h1_5_Template, 2, 0, \"h1\", 4);\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"json\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedData);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(8, 3, ctx.selectNode), \" \");\n      }\n    },\n    dependencies: [i4.NgIf, i5.SelectedNodesDirective, i4.JsonPipe],\n    styles: [\".conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsdUJBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZWluZXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r1","selectedData","NetworksComponent","constructor","appNetworkService","appNetworkInitService","apiService","menuStatus","data","nodes","edges","nodeNo","ngOnInit","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","ngOnDestroy","destroy","_","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","i3","ApiService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵtemplate","NetworksComponent_div_3_Template","NetworksComponent_h1_5_Template","selectNode","ɵɵtextInterpolate1","ɵɵpipeBind1"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts","/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { SelectedNodesDirective } from '../services/selected-nodes.directive';\nimport { ApiService } from '../services/api.service';\nimport { Chart } from 'chart.js';\nimport { InfoService } from '../services/info.service';\nimport { SpinnerService } from '../services/spinner.service';\nimport { HomeService } from '../services/home.service';\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent  implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n\n  menuStatus: boolean = true;\n\n  selectNode: any;\n  prevSelectNode: any;\n\n  private data: any = {};\n\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n\n  public selectedData: Subject<Data>;\n\n  private network!: Network;\n\n  private nodeNo: number = 6;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService,\n    private apiService: ApiService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n  \n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  // private onSelect(params: any): void {\n  //   if (params.nodes.length == 1) {\n  //     this.nodes.add({\n  //       id: this.nodeNo,\n  //       label: `Node ${this.nodeNo}`,\n  //     });\n  //     this.edges.add({\n  //       from: params.nodes[0],\n  //       to: this.nodeNo,\n  //     });\n  //     this.nodeNo++;\n  //     const result = {\n  //       edges: params.edges,\n  //       nodes: params.nodes,\n  //       pointer: params.pointer,\n  //     };\n  //     if (this.selectNode) {\n  //       this.prevSelectNode = this.selectNode;\n  //     }\n  //     this.selectNode = result;\n\n  //     const newEdges = this.edges\n  //       .get()\n  //       .filter((value) => {\n  //         return this.network\n  //           .getSelectedEdges()\n  //           .some((val) => val == value['id']);\n  //       })\n  //       .map((value) => {\n  //         return { to: value['to'], from: value['from'] };\n  //       });\n\n  //     const rootSelected: number = <number>this.network.getSelectedNodes()[0];\n\n  //     let newNodes = this.nodes.get().filter((value) => {\n  //       return newEdges.some((s) => s.to == value.id);\n  //     });\n\n  //     if (!newNodes.some((value) => value.id == rootSelected)) {\n  //       const self = this.nodes.get().find((val) => val.id == rootSelected);\n  //       if (self !== undefined) {\n  //           newNodes.unshift(self);\n  //       }\n  //     } else {\n  //       const root = this.nodes.get()[0];\n  //       newNodes.unshift(root);\n  //     }\n  //     this.selectedData.next({ edges: newEdges, nodes: newNodes });\n  //   }\n  // }\n}\n\n","<div class=\"container\">\n    \n    <div #treeContainer > </div>\n\n    <div #menuDiv style=\"flex:4\" *ngIf=\"selectedData\">\n      <h1> Previous Selected Node</h1>\n      <!--<div>{{prevSelectNode | json}}</div>-->\n      <div selected-nodes [selected]=\"selectedData\"> </div>\n    </div>\n\n  <div style=\"flex:1\">\n   <h1 *ngIf=\"selectNode\"> Selected node</h1>\n\n    <div>{{selectNode| json}} </div>\n  </div>  \n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
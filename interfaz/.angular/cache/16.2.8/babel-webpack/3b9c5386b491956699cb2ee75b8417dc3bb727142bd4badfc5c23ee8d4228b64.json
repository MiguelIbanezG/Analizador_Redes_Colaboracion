{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { singular } from 'pluralize';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"../seleccion.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class ConfigComponent {\n  constructor(route, apiService, seleccionService, http) {\n    this.route = route;\n    this.apiService = apiService;\n    this.seleccionService = seleccionService;\n    this.http = http;\n    this.titulosSeleccionados = [];\n    this.yearsSeleccionados = [];\n    this.conferenceOption = \"\";\n    this.venueName = [];\n    this.papers = [];\n    this.colaboraciones = [];\n    this.singleAuthor = [];\n    this.estadisticas = [];\n    this.researchers = [];\n    this.papersWithAuthors = [];\n    this.autoresPorPapersTable = [];\n    this.papersPorAutoresTable = [];\n    this.decadeStats = [];\n    this.commonNames = {};\n    this.options = {\n      // if width is between 0 and 1 it will be set to the width of the upper element multiplied by the value\n      width: 500,\n      // if height is between 0 and 1 it will be set to the height of the upper element multiplied by the value\n      height: 200,\n      overflow: false,\n      realignOnResize: false,\n      strict: false,\n      step: 2\n    };\n    this.cloudData = [];\n  }\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.commonNames = this.parseCommonNames(data);\n    }, error => {\n      console.error('Error al cargar los datos:', error);\n    });\n  }\n  parseCommonNames(data) {\n    const lineas = data.split('\\n');\n    const diccionario = {};\n    let nombreActual = '';\n    let datosActuales = {\n      frec_paises: {},\n      genero: ''\n    };\n    for (const linea of lineas) {\n      if (linea.startsWith('nombre:')) {\n        nombreActual = linea.split(':')[1].trim();\n        datosActuales = {\n          frec_paises: {},\n          genero: ''\n        };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        datosActuales.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        datosActuales.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        diccionario[nombreActual] = datosActuales;\n      }\n    }\n    return diccionario;\n  }\n  ngOnInit() {\n    this.loadCommonNames();\n    //LLamada a la funcion principal para la ejecucion de todo\n    this.main();\n  }\n  ngAfterViewInit() {\n    // Este método se ejecutará después de que Angular haya inicializado la vista\n    // Perfe para realizar cualquier manipulación adicional del DOM relacionada con el gráfico\n    // como ajustes de estilo, cambios dinámicos en los datos, etc.\n  }\n  esperarResearcherNoVacio() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      while (!_this.researchers || _this.researchers.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  obtenerResearchersConference() {\n    this.apiService.obtenerResearchersConference(this.titulosSeleccionados).subscribe({\n      next: response => {\n        this.researchers = response;\n        this.statsResearchers();\n        this.combinarYMostrarDatos(this.estadisticas[0].anios, this.estadisticas[0].numResearchers);\n      },\n      error: error => {\n        console.error('Error al obtener los researchers:', error);\n      }\n    });\n    if (this.researchers.length < 1) {\n      this.apiService.obtenerResearchersJournals(this.titulosSeleccionados).subscribe({\n        next: response => {\n          this.researchers = response;\n          this.statsResearchers();\n          this.combinarYMostrarDatos(this.estadisticas[0].anios, this.estadisticas[0].numResearchers);\n        },\n        error: error => {\n          console.error('Error al obtener los researchers:', error);\n        }\n      });\n    }\n  }\n  combinarYMostrarDatos(researchersConference, researchersJournals) {\n    if (this.lineChart) {\n      this.lineChart.destroy();\n    }\n  }\n  obtenerPapers() {\n    this.apiService.obtenerPapers(this.titulosSeleccionados, this.conferenceOption, this.venueName).subscribe({\n      next: response => {\n        this.papers = response;\n        this.statsPapers();\n      },\n      error: error => {\n        console.error('Error al obtener los papers:', error);\n      }\n    });\n  }\n  obtenerColaboraciones() {\n    this.apiService.obtenerColaboraciones(this.titulosSeleccionados, this.conferenceOption, this.venueName).subscribe({\n      next: response => {\n        console.log(\"resss\" + response);\n        this.colaboraciones = response;\n        this.statsColaboraciones();\n      },\n      error: error => {\n        console.error('Error al obtener las colaboraciones:', error);\n      }\n    });\n  }\n  obtenerInstituciones() {\n    // que son las instituciones?\n  }\n  esperarAuthorsWithPapersNoVacio() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      while (!_this2.papersWithAuthors || _this2.papersWithAuthors.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  esperarSingleAuthorsNoVacio() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      while (!_this3.singleAuthor || _this3.singleAuthor.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  obtenerSingleAuthorPapers() {\n    var _this4 = this;\n    this.apiService.obtenerAuthorsPapers(this.titulosSeleccionados, this.conferenceOption, this.venueName).subscribe({\n      next: function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          console.log(\"wpoiefjwpej\" + response);\n          _this4.singleAuthor = response;\n          _this4.statsSingleAuthor();\n        });\n        return function next(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      error: error => {\n        console.error('Error al obtener los Author Papers:', error);\n      }\n    });\n  }\n  /**\n   * Función para obtener las distribuciones tanto de autores por papers como de papers por autores\n   */\n  obtenerDistribuciones() {\n    const labels = ['1', '2', '3', '4', '5 o más'];\n    // Este representa el número de autores que tiene cada paper\n    const autoresPorPaper = [1, 2, 3, 4].map(numAuthors => this.papersWithAuthors.filter(paper => paper.numAuthors === numAuthors).length);\n    autoresPorPaper[4] = this.papersWithAuthors.filter(paper => paper.numAuthors >= 5).length;\n    let totalPapers = this.papers.reduce((total, paper) => total + paper.numPapers, 0);\n    // Ese representa el número de papers publicados que tiene cada autor\n    const papersPorAutor = [1, 2, 3, 4].map(numPubs => this.singleAuthor.filter(paper => paper.numPublications === numPubs).length);\n    papersPorAutor[4] = this.singleAuthor.filter(paper => paper.numPublications >= 5).length;\n    const totalAutores = this.singleAuthor.length;\n    // Creamos las dos tablas que se vinculan con los ids del html\n    const autoresTabla = document.querySelector('#autoresTabla tbody');\n    const papersTabla = document.querySelector('#papersTabla tbody');\n    if (autoresTabla !== null) {\n      autoresPorPaper.forEach((cantidad, index) => {\n        const row = document.createElement('tr');\n        const porcentaje = (cantidad / totalPapers * 100).toFixed(2);\n        const valor = cantidad.toString() + \"(\" + porcentaje + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${valor}</td>`;\n        autoresTabla.appendChild(row);\n      });\n    }\n    if (papersTabla !== null) {\n      papersPorAutor.forEach((cantidad, index) => {\n        const row = document.createElement('tr');\n        const porcentaje = (cantidad / totalAutores * 100).toFixed(2);\n        const valor = cantidad.toString() + \"(\" + porcentaje + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${valor}</td>`;\n        papersTabla.appendChild(row);\n      });\n    }\n  }\n  obtenerDatosDemograficos() {\n    const datasets = this.researchers.map(researcher => {\n      let nombre = researcher.researcher.properties.name.split(' ')[0];\n      if (nombre.includes(\"-\")) {\n        nombre = nombre.split('-')[0];\n      }\n      const anios = Array.isArray(researcher.years) ? researcher.years : [researcher.years];\n      const datasetPorAnio = anios.map(year => {\n        const info = this.commonNames[nombre];\n        const genero = info ? info.genero : 'Desconocido';\n        const frecuencias = info ? info.frec_paises : {};\n        return {\n          year,\n          nombre,\n          genero,\n          frecuencias\n        };\n      });\n      return datasetPorAnio;\n    }).flat();\n    this.statsGenero(datasets);\n    this.statsGeografia(datasets);\n  }\n  generarNGrams(titles, n) {\n    const ngrams = [];\n    titles.forEach(title => {\n      const words = title.toLowerCase().split(\" \");\n      for (let i = 0; i < words.length - n + 1; i++) {\n        ngrams.push(words.slice(i, i + n).join(\" \"));\n      }\n    });\n    return ngrams;\n  }\n  countFrequencies(ngrams) {\n    const frequencies = new Map();\n    ngrams.forEach(ngram => {\n      const count = frequencies.get(ngram) || 0;\n      frequencies.set(ngram, count + 1);\n    });\n    return frequencies;\n  }\n  limpiarTitulo(titulo, stopwords) {\n    // Separar el título en palabras\n    const palabras = titulo.toLowerCase().split(\" \").map(palabra => palabra.replace(/[^\\w\\s]/g, \"\"));\n    // Eliminamos repeticiones de letras y plurales para hacer mejor la frecuencia\n    const palabrasSinRepetir = palabras.map(palabra => palabra.replace(/(.)\\1+/g, \"$1\"));\n    const palabrasSingulares = palabrasSinRepetir.map(palabra => singular(palabra));\n    // Filtrar las palabras para eliminar las stopwords\n    const palabrasFiltradas = palabrasSingulares.filter(palabra => !stopwords.includes(palabra));\n    // Unir las palabras filtradas en un nuevo título\n    const nuevoTitulo = palabrasFiltradas.join(' ');\n    return nuevoTitulo;\n  }\n  getTopN(frequencies, n) {\n    const sortedFrequencies = [...frequencies.entries()].sort((a, b) => b[1] - a[1]);\n    return sortedFrequencies.slice(0, n);\n  }\n  obtenerTopicAnalisis() {\n    // Requerimos natural para tokenizar y eliminar las stopwords, y calcular frecuencias\n    const stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', '.', ','];\n    const titulosLimpios = this.papersWithAuthors.map(paper => {\n      const ipName = this.limpiarTitulo(paper.ipName, stopwords);\n      const year = parseInt(paper.year);\n      return {\n        ipName,\n        year\n      };\n    });\n    const bigrams = this.generarNGrams(titulosLimpios.map(paper => paper.ipName), 2);\n    const trigrams = this.generarNGrams(titulosLimpios.map(paper => paper.ipName), 3);\n    const bigramFrequencies = this.countFrequencies(bigrams);\n    const trigramFrequencies = this.countFrequencies(trigrams);\n    const top20Bigrams = this.getTopN(bigramFrequencies, 20);\n    const top20Trigrams = this.getTopN(trigramFrequencies, 20);\n    const top20BigramsWithYears = top20Bigrams.map(([ngram, count]) => ({\n      ngram,\n      count,\n      years: titulosLimpios.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n    }));\n    const top20TrigramsWithYears = top20Trigrams.map(([ngram, count]) => ({\n      ngram,\n      count,\n      years: titulosLimpios.filter(paper => paper.ipName.includes(ngram)).map(paper => paper.year)\n    }));\n    const table1 = document.querySelector('#tablaBigramas tbody');\n    const table2 = document.querySelector('#tablaTrigramas tbody');\n    if (table1 instanceof HTMLElement && table2 instanceof HTMLElement) {\n      top20BigramsWithYears.forEach(({\n        ngram,\n        count,\n        years\n      }) => {\n        const minYear = Math.min(...years);\n        const maxYear = Math.max(...years);\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n        table1.appendChild(row);\n      });\n      top20TrigramsWithYears.forEach(({\n        ngram,\n        count,\n        years\n      }) => {\n        const minYear = Math.min(...years);\n        const maxYear = Math.max(...years);\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n        table2.appendChild(row);\n      });\n    }\n    const combinedData = [...top20BigramsWithYears, ...top20TrigramsWithYears];\n    combinedData.sort((a, b) => b.count - a.count);\n    const maxFrecuencia = combinedData[0].count;\n    const minWeight = 0;\n    const maxWeight = 20;\n    const wordCloudData = combinedData.map((item, index) => ({\n      text: item.ngram,\n      weight: this.calcularWeight(item.count, maxFrecuencia, minWeight, maxWeight)\n    }));\n    this.cloudData = wordCloudData;\n  }\n  calcularWeight(frecuencia, maxFrecuencia, minWeight, maxWeight) {\n    const peso = frecuencia / maxFrecuencia;\n    const pesoNormalizado = peso * (maxWeight - minWeight) + minWeight;\n    return Math.round(pesoNormalizado);\n  }\n  /**\n   * ############################################\n   */\n  statsResearchers() {\n    const numResearchers = this.researchers.length;\n    const anios = this.titulosSeleccionados.map(titulo => titulo.properties.name);\n    this.yearsSeleccionados = anios;\n    const numResearchersPorAnio = anios.map(anio => this.researchers.filter(researcher => researcher.years.includes(anio)).length);\n    this.estadisticas[0] = {\n      anios: anios,\n      numResearchers: numResearchersPorAnio\n    };\n  }\n  statsPapers() {\n    const anios = this.papers.map(paper => paper.year); // Extraer los años de this.numPapers\n    const numPapers = this.papers.map(paper => paper.numPapers);\n    this.estadisticas[1] = {\n      anios: anios,\n      numPapers: numPapers\n    };\n  }\n  statsInstitutions() {\n    const anios = this.papers.map(paper => paper.year);\n    // Extraer los años de this.numPapers\n    // const numPapers = this.papers.map(paper => paper.numPapers); \n    this.estadisticas[2] = {\n      anios: anios,\n      numPapers: anios\n    };\n  }\n  statsColaboraciones() {\n    const colabsXtotal = this.papers.map(paper => {\n      const colab = this.colaboraciones.find(c => c.year === paper.year);\n      return {\n        year: paper.year,\n        numColabs: colab ? colab.numColabs : 0,\n        numPapers: paper.numPapers\n      };\n    });\n    const densidad = colabsXtotal.map(dato => {\n      const {\n        year,\n        numColabs,\n        numPapers\n      } = dato;\n      const densidad = numColabs / numPapers;\n      return {\n        densidad,\n        year\n      };\n    });\n    this.estadisticas[3] = {\n      anios: densidad.map(dato => dato.year),\n      densidades: densidad.map(dato => dato.densidad)\n    };\n  }\n  statsSingleAuthor() {\n    const papersWithAuthors = [];\n    // Mapea todos los researchers, para crear papersWithAuthors, que es un array que tiene el nombre de una publicacion\n    // y los autores que han contribuido él.\n    this.singleAuthor.forEach(author => {\n      author.ipNames.forEach(ipName => {\n        const paperIndex = papersWithAuthors.findIndex(paper => paper.ipName === ipName);\n        if (paperIndex !== -1) {\n          papersWithAuthors[paperIndex].numAuthors++;\n          papersWithAuthors[paperIndex].authorNames.push(author.researcher);\n        } else {\n          papersWithAuthors.push({\n            ipName,\n            numAuthors: 1,\n            authorNames: [author.researcher],\n            year: author.year\n          });\n        }\n      });\n    });\n    this.papersWithAuthors = papersWithAuthors;\n    // Conseguimos todas las entradas cuyo autor sea uno, para las estadisticas\n    const papersWithOneAuthor = papersWithAuthors.filter(paper => paper.numAuthors === 1);\n    const porcentajeByYear = this.papers.map(paper => {\n      const year = paper.year;\n      const numPapers = paper.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const porcentaje = numPapersWithSingleAuthor / numPapers * 100;\n      return {\n        year,\n        porcentaje\n      };\n    });\n    this.estadisticas[4] = {\n      anios: porcentajeByYear.map(dato => dato.year),\n      porcentajes: porcentajeByYear.map(dato => dato.porcentaje)\n    };\n  }\n  statsGeografia(datasets) {\n    const mapeoFecha = {};\n    const datasetFiltrado = datasets.filter(objeto => Object.keys(objeto.frecuencias).length > 0);\n    // Obtener todas las fechas únicas\n    const fechasUnicas = [...new Set(datasetFiltrado.map(dato => dato.year))];\n    // Iterar sobre las fechas\n    for (const fecha of fechasUnicas) {\n      const objetosFecha = datasetFiltrado.filter(dato => dato.year === fecha);\n      // Crear objeto de mapeo para la fecha actual\n      mapeoFecha[fecha] = {};\n      for (const objeto of objetosFecha) {\n        let paisMasAlto = '';\n        let frecuenciaMasAlta = -1;\n        for (const pais in objeto.frecuencias) {\n          if (objeto.frecuencias[pais] > frecuenciaMasAlta) {\n            paisMasAlto = pais;\n            frecuenciaMasAlta = objeto.frecuencias[pais];\n          }\n        }\n        if (!(paisMasAlto in mapeoFecha[fecha])) {\n          mapeoFecha[fecha][paisMasAlto] = 1;\n        } else {\n          mapeoFecha[fecha][paisMasAlto] = mapeoFecha[fecha][paisMasAlto] + 1;\n        }\n      }\n    }\n    // Normalizamos valores según su total\n    for (const year in mapeoFecha) {\n      let total = 0;\n      for (const country in mapeoFecha[year]) {\n        total += mapeoFecha[year][country];\n      }\n      for (const country in mapeoFecha[year]) {\n        mapeoFecha[year][country] = Number((mapeoFecha[year][country] / total).toFixed(4));\n      }\n    }\n    const years = Object.keys(mapeoFecha); // Obtener las llaves de los años\n    const countries = Object.keys(mapeoFecha[years[0]]); // Obtener los nombres de los países\n    const datasetsLabels = countries; // Etiquetas de los conjuntos de datos serán los nombres de los países\n    // Crear la matriz de datos para los países\n    const datasetsData = countries.map(country => years.map(year => mapeoFecha[year][country]));\n  }\n  filterAuthorsByDecade(authors, startYear, endYear) {\n    const filteredAuthors = [];\n    // Recorrer los autores originales\n    authors.forEach(author => {\n      // Verificar si el autor está dentro de la década especificada\n      const authorYears = author.year.split(\",\").map(Number).filter(year => year >= startYear && year <= endYear);\n      if (authorYears.length > 0) {\n        // Buscar si ya existe un autor fusionado con el mismo nombre y década\n        const existingAuthor = filteredAuthors.find(filteredAuthor => filteredAuthor.researcher === author.researcher);\n        if (existingAuthor) {\n          // Fusionar las entradas del autor existente con las del autor actual\n          existingAuthor.numPublications += author.numPublications;\n          existingAuthor.year += `, ${author.year}`;\n        } else {\n          // Agregar el autor actual a la lista de autores filtrados\n          filteredAuthors.push({\n            ipNames: author.ipNames,\n            numPublications: author.numPublications,\n            researcher: author.researcher,\n            year: author.year\n          });\n        }\n      }\n    });\n    return filteredAuthors;\n  }\n  statsProlificAuthors(selectedYears) {\n    // Obtener el rango de años seleccionados por el usuario\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n    // Calcular las décadas correspondientes al rango de años seleccionados\n    const startDecade = Math.floor(startYear / 10) * 10;\n    const endDecade = Math.floor(endYear / 10) * 10;\n    // Generar las décadas dentro del rango de años seleccionados\n    const decades = [];\n    for (let decade = startDecade; decade <= endDecade; decade += 10) {\n      const decadeLabel = `${decade}s`;\n      const decadeStartYear = decade;\n      const decadeEndYear = decade + 9;\n      const decadeAuthors = this.filterAuthorsByDecade(this.singleAuthor, decadeStartYear, decadeEndYear);\n      decades.push({\n        label: decadeLabel,\n        startYear: decadeStartYear,\n        endYear: decadeEndYear,\n        authors: decadeAuthors\n      });\n    }\n    // Ordenar los autores por número de publicaciones en cada década\n    decades.forEach(decade => {\n      decade.authors.sort((a, b) => b.numPublications - a.numPublications);\n      if (decade.authors.length > 20) {\n        decade.authors = decade.authors.slice(0, 20);\n      }\n    });\n    // Devolver las décadas con los autores ordenados\n    return decades;\n  }\n  generarTablasDecadas(decadeStats) {\n    const tablas = {\n      '1990s': document.querySelector('#tabla90 tbody'),\n      '2000s': document.querySelector('#tabla00 tbody'),\n      '2010s': document.querySelector('#tabla10 tbody'),\n      '2020s': document.querySelector('#tabla20 tbody')\n    };\n    for (const decada of decadeStats) {\n      const tabla = tablas[decada.label];\n      if (tabla instanceof HTMLElement) {\n        decada.authors.slice(0, 20).forEach(autor => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${autor.researcher}</td><td>${autor.numPublications}</td>`;\n          tabla.appendChild(row);\n        });\n      }\n    }\n  }\n  statsGenero(datasets) {\n    const datasetsPorGenero = {};\n    datasets.forEach(data => {\n      const {\n        year,\n        genero\n      } = data;\n      let genderKey = '';\n      if (genero == 'M' || genero == '?M' || genero == '1M' || genero == '?') {\n        genderKey = 'Hombres';\n      } else if (genero == 'F' || genero == '?F' || genero == '1F') {\n        genderKey = 'Mujeres';\n      } else {\n        genderKey = 'Desconocido';\n      }\n      if (!datasetsPorGenero[genderKey]) {\n        datasetsPorGenero[genderKey] = [];\n      }\n      const existingData = datasetsPorGenero[genderKey].find(d => d.year === year);\n      if (existingData) {\n        existingData.count++;\n      } else {\n        datasetsPorGenero[genderKey].push({\n          year,\n          count: 1\n        });\n      }\n    });\n    // Crear un objeto para almacenar los datos ordenados\n    const datosOrdenados = {};\n    const hombres = datasetsPorGenero['Hombres'];\n    const mujeres = datasetsPorGenero['Mujeres'];\n    // Ordenar los datos de hombres\n    hombres.forEach(dato => {\n      const anio = dato.year;\n      const conteo = dato.count;\n      datosOrdenados[anio] = {\n        hombres: conteo,\n        mujeres: 0,\n        total: conteo\n      };\n    });\n    // Ordenar los datos de mujeres y combinarlos con los datos de hombres\n    mujeres.forEach(dato => {\n      const anio = dato.year;\n      const conteo = dato.count;\n      if (datosOrdenados[anio]) {\n        datosOrdenados[anio].mujeres = conteo;\n        datosOrdenados[anio].total += conteo;\n      } else {\n        datosOrdenados[anio] = {\n          mujeres: conteo,\n          hombres: 0,\n          total: conteo\n        };\n      }\n    });\n    // Obtener los años ordenados\n    const aniosOrdenados = Object.keys(datosOrdenados).sort();\n    const conteosHombres = aniosOrdenados.map(anio => Number((datosOrdenados[anio].hombres / datosOrdenados[anio].total).toFixed(4)));\n    const conteosMujeres = aniosOrdenados.map(anio => Number((datosOrdenados[anio].mujeres / datosOrdenados[anio].total).toFixed(4)));\n  }\n  main() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this5.titulosSeleccionados = _this5.seleccionService.obtenerTitulosSeleccionados();\n        _this5.conferenceOption = _this5.seleccionService.obtenerOpcionConferencia();\n        _this5.venueName = _this5.seleccionService.obtenerNombreVenue();\n        _this5.obtenerPapers();\n        _this5.obtenerColaboraciones();\n        _this5.obtenerSingleAuthorPapers();\n        _this5.obtenerResearchersConference();\n        if (_this5.researchers.length == 0) {\n          yield _this5.esperarResearcherNoVacio();\n          _this5.obtenerDatosDemograficos();\n        } else {\n          _this5.obtenerDatosDemograficos();\n        }\n        if (_this5.papersWithAuthors.length == 0) {\n          yield _this5.esperarAuthorsWithPapersNoVacio();\n          _this5.obtenerTopicAnalisis();\n          _this5.obtenerDistribuciones();\n        } else {\n          _this5.obtenerTopicAnalisis();\n          _this5.obtenerDistribuciones();\n        }\n        if (_this5.singleAuthor.length == 0) {\n          yield _this5.esperarSingleAuthorsNoVacio();\n          _this5.decadeStats = _this5.statsProlificAuthors(_this5.yearsSeleccionados);\n          _this5.generarTablasDecadas(_this5.decadeStats);\n        } else {\n          _this5.decadeStats = _this5.statsProlificAuthors(_this5.yearsSeleccionados);\n          _this5.generarTablasDecadas(_this5.decadeStats);\n        }\n      } catch (error) {\n        console.error('Error al obtener los datos:', error);\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function ConfigComponent_Factory(t) {\n    return new (t || ConfigComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.SeleccionService), i0.ɵɵdirectiveInject(i4.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfigComponent,\n    selectors: [[\"app-config\"]],\n    decls: 7,\n    vars: 0,\n    template: function ConfigComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n        i0.ɵɵtext(4, \"Procedimiento\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"th\");\n        i0.ɵɵtext(6, \"A\\u00F1o\");\n        i0.ɵɵelementEnd()()()();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["singular","ConfigComponent","constructor","route","apiService","seleccionService","http","titulosSeleccionados","yearsSeleccionados","conferenceOption","venueName","papers","colaboraciones","singleAuthor","estadisticas","researchers","papersWithAuthors","autoresPorPapersTable","papersPorAutoresTable","decadeStats","commonNames","options","width","height","overflow","realignOnResize","strict","step","cloudData","loadCommonNames","get","responseType","subscribe","data","parseCommonNames","error","console","lineas","split","diccionario","nombreActual","datosActuales","frec_paises","genero","linea","startsWith","trim","frec_paisesStr","substring","indexOf","lastIndexOf","JSON","parse","ngOnInit","main","ngAfterViewInit","esperarResearcherNoVacio","_this","_asyncToGenerator","length","Promise","resolve","setTimeout","obtenerResearchersConference","next","response","statsResearchers","combinarYMostrarDatos","anios","numResearchers","obtenerResearchersJournals","researchersConference","researchersJournals","lineChart","destroy","obtenerPapers","statsPapers","obtenerColaboraciones","log","statsColaboraciones","obtenerInstituciones","esperarAuthorsWithPapersNoVacio","_this2","esperarSingleAuthorsNoVacio","_this3","obtenerSingleAuthorPapers","_this4","obtenerAuthorsPapers","_ref","statsSingleAuthor","_x","apply","arguments","obtenerDistribuciones","labels","autoresPorPaper","map","numAuthors","filter","paper","totalPapers","reduce","total","numPapers","papersPorAutor","numPubs","numPublications","totalAutores","autoresTabla","document","querySelector","papersTabla","forEach","cantidad","index","row","createElement","porcentaje","toFixed","valor","toString","innerHTML","appendChild","obtenerDatosDemograficos","datasets","researcher","nombre","properties","name","includes","Array","isArray","years","datasetPorAnio","year","info","frecuencias","flat","statsGenero","statsGeografia","generarNGrams","titles","n","ngrams","title","words","toLowerCase","i","push","slice","join","countFrequencies","frequencies","Map","ngram","count","set","limpiarTitulo","titulo","stopwords","palabras","palabra","replace","palabrasSinRepetir","palabrasSingulares","palabrasFiltradas","nuevoTitulo","getTopN","sortedFrequencies","entries","sort","a","b","obtenerTopicAnalisis","titulosLimpios","ipName","parseInt","bigrams","trigrams","bigramFrequencies","trigramFrequencies","top20Bigrams","top20Trigrams","top20BigramsWithYears","top20TrigramsWithYears","table1","table2","HTMLElement","minYear","Math","min","maxYear","max","combinedData","maxFrecuencia","minWeight","maxWeight","wordCloudData","item","text","weight","calcularWeight","frecuencia","peso","pesoNormalizado","round","numResearchersPorAnio","anio","statsInstitutions","colabsXtotal","colab","find","c","numColabs","densidad","dato","densidades","author","ipNames","paperIndex","findIndex","authorNames","papersWithOneAuthor","porcentajeByYear","numPapersWithSingleAuthor","porcentajes","mapeoFecha","datasetFiltrado","objeto","Object","keys","fechasUnicas","Set","fecha","objetosFecha","paisMasAlto","frecuenciaMasAlta","pais","country","Number","countries","datasetsLabels","datasetsData","filterAuthorsByDecade","authors","startYear","endYear","filteredAuthors","authorYears","existingAuthor","filteredAuthor","statsProlificAuthors","selectedYears","startDecade","floor","endDecade","decades","decade","decadeLabel","decadeStartYear","decadeEndYear","decadeAuthors","label","generarTablasDecadas","tablas","decada","tabla","autor","datasetsPorGenero","genderKey","existingData","d","datosOrdenados","hombres","mujeres","conteo","aniosOrdenados","conteosHombres","conteosMujeres","_this5","obtenerTitulosSeleccionados","obtenerOpcionConferencia","obtenerNombreVenue","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","ApiService","i3","SeleccionService","i4","HttpClient","_2","selectors","decls","vars","template","ConfigComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/src/app/config/config.component.ts","/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/src/app/config/config.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { SeleccionService } from '../seleccion.service';\nimport { HttpClient } from '@angular/common/http';\nimport { CloudData, CloudOptions } from 'angular-tag-cloud-module';\nimport { singular } from 'pluralize';\nimport * as Chart from 'chart.js';\n\n\ninterface Author {\n  ipNames: string[];\n  numPublications: number;\n  researcher: string;\n  year: string;\n}\n\ninterface DecadeStats {\n  label: string;\n  startYear: number;\n  endYear: number;\n  authors: Author[];\n}\n\ninterface GeneroCounts {\n  hombres: number;\n  mujeres: number;\n  desconocidos: number;\n}\n\ninterface GeneroData {\n  [anio: string]: GeneroCounts;\n}\n\n\n@Component({\n  selector: 'app-config',\n  templateUrl: './config.component.html',\n  styleUrls: ['./config.component.scss']\n})\nexport class ConfigComponent implements OnInit{\n  titulosSeleccionados: any[] = [];\n  yearsSeleccionados: any[] = [];\n  conferenceOption: string = \"\";\n  venueName: any[] = [];\n  papers: any[] = [];\n  colaboraciones: any[] = [];\n  singleAuthor: any[] = [];\n  estadisticas: any[] = [];\n  lineChart!: Chart;\n  lineChart2!: Chart;\n  lineChart3!: Chart;\n  barChart!: Chart;\n  researchers: any[] = [];\n  papersWithAuthors: any[] = [];\n  autoresPorPapersTable: any[] = [];\n  papersPorAutoresTable: any[] = [];\n  decadeStats: any[] = [];\n  commonNames: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n  options: CloudOptions = {\n    // if width is between 0 and 1 it will be set to the width of the upper element multiplied by the value\n    width: 500,\n    // if height is between 0 and 1 it will be set to the height of the upper element multiplied by the value\n    height: 200,\n    overflow: false,\n    realignOnResize: false,\n    strict: false,\n    step: 2,\n  };\n  cloudData: CloudData[] = []\n\n  constructor(\n    private route: ActivatedRoute,\n    private apiService: ApiService,\n    private seleccionService: SeleccionService,\n    private http: HttpClient\n  ) {}\n\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', { responseType: 'text' }).subscribe(\n      (data: string) => {\n        this.commonNames = this.parseCommonNames(data);\n      },\n      (error: any) => {\n        console.error('Error al cargar los datos:', error);\n      }\n    );\n  }\n\n  parseCommonNames(data: string) {\n    const lineas = data.split('\\n');\n    const diccionario: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n    let nombreActual = '';\n    let datosActuales: { frec_paises: { [key: string]: number }, genero: string } = {\n      frec_paises: {},\n      genero: ''\n    };\n  \n    for (const linea of lineas) {\n      if (linea.startsWith('nombre:')) {\n        nombreActual = linea.split(':')[1].trim();\n        datosActuales = { frec_paises: {}, genero: '' };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        datosActuales.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        datosActuales.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        diccionario[nombreActual] = datosActuales;\n      }\n    }\n    return diccionario;\n  }\n\n  ngOnInit() {\n    this.loadCommonNames();\n    //LLamada a la funcion principal para la ejecucion de todo\n    this.main();\n  }\n\n  ngAfterViewInit() {\n    // Este método se ejecutará después de que Angular haya inicializado la vista\n    // Perfe para realizar cualquier manipulación adicional del DOM relacionada con el gráfico\n    // como ajustes de estilo, cambios dinámicos en los datos, etc.\n  }\n\n  async esperarResearcherNoVacio() {\n    while (!this.researchers || this.researchers.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  obtenerResearchersConference() {\n    this.apiService.obtenerResearchersConference(this.titulosSeleccionados).subscribe({\n      next: (response: any) => {\n        this.researchers = response;\n        this.statsResearchers();\n        this.combinarYMostrarDatos(this.estadisticas[0].anios, this.estadisticas[0].numResearchers);\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los researchers:', error);\n      }\n    });\n    if(this.researchers.length < 1){\n      this.apiService.obtenerResearchersJournals(this.titulosSeleccionados).subscribe({\n        next: (response: any) => {\n          this.researchers = response;\n          this.statsResearchers();\n          this.combinarYMostrarDatos(this.estadisticas[0].anios, this.estadisticas[0].numResearchers);\n        },\n        error: (error: any) => {\n          console.error('Error al obtener los researchers:', error);\n        }\n      });\n    }\n    \n  }\n\n  combinarYMostrarDatos(researchersConference: any[], researchersJournals: any[]) {\n    \n    if(this.lineChart){\n      this.lineChart.destroy();\n    }\n  \n  }\n\n  obtenerPapers() {\n    this.apiService.obtenerPapers(this.titulosSeleccionados, this.conferenceOption, this.venueName).subscribe({\n      next: (response: any) => {\n        \n        this.papers = response;\n        this.statsPapers();\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los papers:', error);\n      }\n    });\n  }\n\n\n  obtenerColaboraciones() {\n    this.apiService.obtenerColaboraciones(this.titulosSeleccionados, this.conferenceOption, this.venueName).subscribe({\n      next: (response: any) => {\n        console.log(\"resss\"+response)\n        this.colaboraciones = response;\n        this.statsColaboraciones();\n      },\n      error: (error: any) => {\n        console.error('Error al obtener las colaboraciones:', error);\n      }\n    });\n  }\n\n  obtenerInstituciones(){\n    // que son las instituciones?\n  }\n\n  async esperarAuthorsWithPapersNoVacio(){\n    while (!this.papersWithAuthors || this.papersWithAuthors.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  async esperarSingleAuthorsNoVacio(){\n    while (!this.singleAuthor || this.singleAuthor.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  obtenerSingleAuthorPapers() {\n      this.apiService.obtenerAuthorsPapers(this.titulosSeleccionados, this.conferenceOption, this.venueName)\n        .subscribe({\n          next: async (response: any) => {\n            console.log(\"wpoiefjwpej\"+response)\n            this.singleAuthor = response;\n            this.statsSingleAuthor();\n          },\n          error: (error: any) => {\n            console.error('Error al obtener los Author Papers:', error);\n          }\n        });\n  }\n\n  /**\n   * Función para obtener las distribuciones tanto de autores por papers como de papers por autores\n   */\n  obtenerDistribuciones(){\n    const labels: string[] = ['1', '2', '3', '4', '5 o más'];\n\n    // Este representa el número de autores que tiene cada paper\n    const autoresPorPaper: number[] = [1, 2, 3, 4].map((numAuthors) =>\n    this.papersWithAuthors.filter((paper) => paper.numAuthors === numAuthors).length\n    );\n    autoresPorPaper[4] = this.papersWithAuthors.filter((paper) => paper.numAuthors >= 5).length;\n    let totalPapers = this.papers.reduce((total, paper) => total + paper.numPapers, 0);\n\n    // Ese representa el número de papers publicados que tiene cada autor\n    const papersPorAutor: number[] = [1, 2, 3, 4].map((numPubs) =>\n    this.singleAuthor.filter((paper) => paper.numPublications === numPubs).length\n    );\n    papersPorAutor[4] = this.singleAuthor.filter((paper) => paper.numPublications >= 5).length\n    const totalAutores = this.singleAuthor.length;\n\n    // Creamos las dos tablas que se vinculan con los ids del html\n    const autoresTabla = document.querySelector('#autoresTabla tbody');\n    const papersTabla = document.querySelector('#papersTabla tbody');\n    \n    if (autoresTabla !== null) {\n      autoresPorPaper.forEach((cantidad, index) => {\n        const row = document.createElement('tr');\n        const porcentaje = (cantidad / totalPapers * 100).toFixed(2);\n        const valor = cantidad.toString() + \"(\" + porcentaje + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${valor}</td>`;\n        autoresTabla.appendChild(row);\n      });\n    }\n\n    if (papersTabla !== null) {\n      papersPorAutor.forEach((cantidad, index) => {\n        const row = document.createElement('tr');\n        const porcentaje = (cantidad / totalAutores * 100).toFixed(2);\n        const valor = cantidad.toString() + \"(\" + porcentaje + \")\";\n        row.innerHTML = `<td>${labels[index]}</td><td>${valor}</td>`;\n        papersTabla.appendChild(row);\n      });\n    }\n  }\n\n  obtenerDatosDemograficos(){\n      const datasets = this.researchers.map(researcher => {\n        let nombre = researcher.researcher.properties.name.split(' ')[0];\n        if(nombre.includes(\"-\")){\n          nombre = nombre.split('-')[0];\n        }\n        const anios = Array.isArray(researcher.years) ? researcher.years : [researcher.years];\n      \n        const datasetPorAnio = anios.map((year: any) => {\n          const info = this.commonNames[nombre];\n          const genero = info ? info.genero : 'Desconocido';\n          const frecuencias = info ? info.frec_paises : {};\n      \n          return {\n            year,\n            nombre,\n            genero,\n            frecuencias\n          };\n        });\n        return datasetPorAnio;\n      }).flat(); \n\n      this.statsGenero(datasets);\n      this.statsGeografia(datasets);\n  }\n\n  generarNGrams(titles: string[], n: number): string[] {\n    const ngrams: string[] = [];\n    titles.forEach((title) => {\n      const words = title.toLowerCase().split(\" \");\n      for (let i = 0; i < words.length - n + 1; i++) {\n        ngrams.push(words.slice(i, i + n).join(\" \"));\n      }\n    });\n    return ngrams;\n  }\n  \n  countFrequencies(ngrams: string[]): Map<string, number> {\n    const frequencies = new Map<string, number>();\n    ngrams.forEach((ngram) => {\n      const count = frequencies.get(ngram) || 0;\n      frequencies.set(ngram, count + 1);\n    });\n    return frequencies;\n  }\n\n  limpiarTitulo(titulo: string, stopwords: string[]) {\n    // Separar el título en palabras\n    const palabras = titulo.toLowerCase().split(\" \").map(palabra => palabra.replace(/[^\\w\\s]/g, \"\"));\n\n    // Eliminamos repeticiones de letras y plurales para hacer mejor la frecuencia\n    const palabrasSinRepetir = palabras.map(palabra => palabra.replace(/(.)\\1+/g, \"$1\"));\n    const palabrasSingulares = palabrasSinRepetir.map(palabra => singular(palabra));\n    \n    // Filtrar las palabras para eliminar las stopwords\n    const palabrasFiltradas = palabrasSingulares.filter(palabra => !stopwords.includes(palabra));\n  \n    // Unir las palabras filtradas en un nuevo título\n    const nuevoTitulo = palabrasFiltradas.join(' ');\n  \n    return nuevoTitulo;\n  }\n\n  getTopN(frequencies: Map<string, number>, n: number): [string, number][] {\n    const sortedFrequencies = [...frequencies.entries()].sort((a, b) => b[1] - a[1]);\n    return sortedFrequencies.slice(0, n);\n  }\n\n  obtenerTopicAnalisis(){\n\n      // Requerimos natural para tokenizar y eliminar las stopwords, y calcular frecuencias\n      const stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', '.', ','];\n\n      const titulosLimpios = this.papersWithAuthors.map(paper => {\n        const ipName = this.limpiarTitulo(paper.ipName, stopwords);\n        const year = parseInt(paper.year);\n        return { ipName, year };\n      });\n\n      const bigrams = this.generarNGrams(titulosLimpios.map((paper) => paper.ipName), 2);\n      const trigrams = this.generarNGrams(titulosLimpios.map((paper) => paper.ipName), 3);\n\n      const bigramFrequencies = this.countFrequencies(bigrams);\n      const trigramFrequencies = this.countFrequencies(trigrams);\n\n      const top20Bigrams = this.getTopN(bigramFrequencies, 20);\n      const top20Trigrams = this.getTopN(trigramFrequencies, 20);\n\n    \n      const top20BigramsWithYears = top20Bigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: titulosLimpios.filter((paper) => paper.ipName.includes(ngram)).map((paper) => paper.year),\n      }));\n    \n      const top20TrigramsWithYears = top20Trigrams.map(([ngram, count]) => ({\n        ngram,\n        count,\n        years: titulosLimpios.filter((paper) => paper.ipName.includes(ngram)).map((paper) => paper.year),\n      }));\n\n      const table1 = document.querySelector('#tablaBigramas tbody');\n      const table2 = document.querySelector('#tablaTrigramas tbody');\n    \n      if (table1 instanceof HTMLElement && table2 instanceof HTMLElement) {\n        top20BigramsWithYears.forEach(({ ngram, count, years }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n      \n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n      \n          table1.appendChild(row);\n        });\n      \n        top20TrigramsWithYears.forEach(({ ngram, count, years }) => {\n          const minYear = Math.min(...years);\n          const maxYear = Math.max(...years);\n      \n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${ngram}</td><td>${count}</td><td>${minYear}</td><td>${maxYear}</td>`;\n      \n          table2.appendChild(row);\n        });\n      }\n\n      const combinedData = [...top20BigramsWithYears, ...top20TrigramsWithYears];\n      \n      combinedData.sort((a, b) => b.count - a.count);\n\n      const maxFrecuencia = combinedData[0].count;\n      const minWeight = 0;\n      const maxWeight = 20;\n\n\n      const wordCloudData = combinedData.map((item, index) => ({\n        text: item.ngram,\n        weight: this.calcularWeight(item.count, maxFrecuencia, minWeight, maxWeight),\n      }));\n\n      this.cloudData = wordCloudData;\n     \n  }\n\n  calcularWeight(frecuencia: number, maxFrecuencia: number, minWeight: number, maxWeight: number): number {\n    const peso = frecuencia / maxFrecuencia;\n    const pesoNormalizado = peso * (maxWeight - minWeight) + minWeight;\n    return Math.round(pesoNormalizado);\n  }\n\n  /**\n   * ############################################\n   */\n\n  statsResearchers() {\n    const numResearchers = this.researchers.length;\n    const anios = this.titulosSeleccionados.map(titulo => titulo.properties.name);\n    this.yearsSeleccionados = anios;\n\n    const numResearchersPorAnio = anios.map(anio =>\n      this.researchers.filter(researcher => researcher.years.includes(anio)).length\n    );\n    this.estadisticas[0] = {\n      anios: anios,\n      numResearchers: numResearchersPorAnio\n    };\n  }\n\n  statsPapers() {\n    const anios = this.papers.map(paper => paper.year); // Extraer los años de this.numPapers\n    const numPapers = this.papers.map(paper => paper.numPapers); \n\n    this.estadisticas[1] = {\n      anios: anios,\n      numPapers: numPapers\n    };\n  }  \n  \n  statsInstitutions() {\n    const anios = this.papers.map(paper => paper.year); \n    // Extraer los años de this.numPapers\n    // const numPapers = this.papers.map(paper => paper.numPapers); \n\n    this.estadisticas[2] = {\n      anios: anios,\n      numPapers: anios\n    };\n  }\n\n  statsColaboraciones(){    \n    const colabsXtotal = this.papers.map(paper => {\n      const colab = this.colaboraciones.find(c => c.year === paper.year);\n      return {\n        year: paper.year,\n        numColabs: colab ? colab.numColabs : 0,\n        numPapers: paper.numPapers\n      };\n    });\n\n    const densidad = colabsXtotal.map(dato => {\n      const { year, numColabs, numPapers } = dato;\n      const densidad = numColabs / numPapers;\n      return { densidad, year };\n    });\n\n    this.estadisticas[3] = {\n      anios: densidad.map(dato => dato.year),\n      densidades: densidad.map(dato => dato.densidad)\n    };\n  }\n\n  statsSingleAuthor() {\n    \n    const papersWithAuthors: { ipName: string, numAuthors: number, authorNames: string[], year: string }[] = [];\n\n    // Mapea todos los researchers, para crear papersWithAuthors, que es un array que tiene el nombre de una publicacion\n    // y los autores que han contribuido él.\n    this.singleAuthor.forEach((author: { ipNames: string[], researcher: string, year: string }) => {\n      author.ipNames.forEach(ipName => {\n        const paperIndex = papersWithAuthors.findIndex(paper => paper.ipName === ipName);\n        if (paperIndex !== -1) {\n          papersWithAuthors[paperIndex].numAuthors++;\n          papersWithAuthors[paperIndex].authorNames.push(author.researcher);\n        } else {\n            papersWithAuthors.push({\n              ipName,\n              numAuthors: 1,\n              authorNames: [author.researcher],\n              year: author.year\n            });\n          }\n        });\n    });\n\n    this.papersWithAuthors = papersWithAuthors;\n\n    // Conseguimos todas las entradas cuyo autor sea uno, para las estadisticas\n    const papersWithOneAuthor = papersWithAuthors.filter(paper => paper.numAuthors === 1);\n\n    const porcentajeByYear = this.papers.map(paper => {\n      const year = paper.year;\n      const numPapers = paper.numPapers;\n      const numPapersWithSingleAuthor = papersWithOneAuthor.filter(paper => paper.year === year).length;\n      const porcentaje = (numPapersWithSingleAuthor / numPapers) * 100;\n    \n      return { year, porcentaje };\n    });\n    \n    this.estadisticas[4] = {\n      anios: porcentajeByYear.map(dato => dato.year),\n      porcentajes: porcentajeByYear.map(dato => dato.porcentaje)\n    };\n  }  \n\n\n \n\n  statsGeografia(datasets: any[]){\n    const mapeoFecha: {[fecha: string]: {[pais: string]: number}} = {};\n    const datasetFiltrado = datasets.filter((objeto: any) => Object.keys(objeto.frecuencias).length > 0);\n    \n    // Obtener todas las fechas únicas\n    const fechasUnicas = [...new Set(datasetFiltrado.map(dato => dato.year))];\n\n    // Iterar sobre las fechas\n    for (const fecha of fechasUnicas) {\n      const objetosFecha = datasetFiltrado.filter(dato => dato.year === fecha);\n\n      // Crear objeto de mapeo para la fecha actual\n      mapeoFecha[fecha] = {};\n  \n    for (const objeto of objetosFecha) {\n      let paisMasAlto = '';\n      let frecuenciaMasAlta = -1;\n\n      for (const pais in objeto.frecuencias) {\n          if (objeto.frecuencias[pais] > frecuenciaMasAlta) {\n            paisMasAlto = pais;\n            frecuenciaMasAlta = objeto.frecuencias[pais];\n          }\n        }\n        if(!(paisMasAlto in mapeoFecha[fecha])){\n          mapeoFecha[fecha][paisMasAlto] = 1;\n        }else{\n          mapeoFecha[fecha][paisMasAlto] = mapeoFecha[fecha][paisMasAlto] + 1;\n        }\n      }\n    }\n\n    // Normalizamos valores según su total\n    for (const year in mapeoFecha) {\n      let total = 0;\n      for (const country in mapeoFecha[year]) {\n        total += mapeoFecha[year][country];\n      }\n      for (const country in mapeoFecha[year]) {\n        mapeoFecha[year][country] = Number((mapeoFecha[year][country]/total).toFixed(4));\n      }\n    }\n\n    const years = Object.keys(mapeoFecha); // Obtener las llaves de los años\n    const countries = Object.keys(mapeoFecha[years[0]]); // Obtener los nombres de los países\n    const datasetsLabels = countries; // Etiquetas de los conjuntos de datos serán los nombres de los países\n\n    // Crear la matriz de datos para los países\n    const datasetsData = countries.map((country) =>\n      years.map((year) => mapeoFecha[year][country])\n    );\n\n\n    \n  }\n\n  filterAuthorsByDecade(authors: Author[], startYear: number, endYear: number): Author[] {\n    const filteredAuthors: Author[] = [];\n  \n    // Recorrer los autores originales\n    authors.forEach((author) => {\n      // Verificar si el autor está dentro de la década especificada\n      const authorYears = author.year.split(\",\").map(Number).filter((year) => year >= startYear && year <= endYear);\n\n      if (authorYears.length > 0) {\n        // Buscar si ya existe un autor fusionado con el mismo nombre y década\n        const existingAuthor = filteredAuthors.find((filteredAuthor) => filteredAuthor.researcher === author.researcher);\n        if (existingAuthor) {\n          // Fusionar las entradas del autor existente con las del autor actual\n          existingAuthor.numPublications += author.numPublications;\n          existingAuthor.year += `, ${author.year}`;\n        } else {\n          // Agregar el autor actual a la lista de autores filtrados\n          filteredAuthors.push({\n            ipNames: author.ipNames,\n            numPublications: author.numPublications,\n            researcher: author.researcher,\n            year: author.year\n          });\n        }\n      }\n    });\n\n    return filteredAuthors;\n  }\n\n  statsProlificAuthors(selectedYears: number[]): DecadeStats[] {\n    // Obtener el rango de años seleccionados por el usuario\n    const startYear = Math.min(...selectedYears);\n    const endYear = Math.max(...selectedYears);\n  \n    // Calcular las décadas correspondientes al rango de años seleccionados\n    const startDecade = Math.floor(startYear / 10) * 10;\n    const endDecade = Math.floor(endYear / 10) * 10;\n  \n    // Generar las décadas dentro del rango de años seleccionados\n    const decades: DecadeStats[] = [];\n    for (let decade = startDecade; decade <= endDecade; decade += 10) {\n      const decadeLabel = `${decade}s`;\n      const decadeStartYear = decade;\n      const decadeEndYear = decade + 9;\n      const decadeAuthors = this.filterAuthorsByDecade(this.singleAuthor, decadeStartYear, decadeEndYear);\n  \n      decades.push({\n        label: decadeLabel,\n        startYear: decadeStartYear,\n        endYear: decadeEndYear,\n        authors: decadeAuthors\n      });\n    }  \n    // Ordenar los autores por número de publicaciones en cada década\n    decades.forEach((decade) => {\n      decade.authors.sort((a, b) => b.numPublications - a.numPublications);\n      if (decade.authors.length > 20){\n        decade.authors = decade.authors.slice(0, 20); \n      } \n    });\n  \n    // Devolver las décadas con los autores ordenados\n    return decades;\n  }\n\n  generarTablasDecadas(decadeStats: any[]){\n    const tablas: { [key: string]: HTMLElement | null } = {\n      '1990s': document.querySelector('#tabla90 tbody'),\n      '2000s': document.querySelector('#tabla00 tbody'),\n      '2010s': document.querySelector('#tabla10 tbody'),\n      '2020s': document.querySelector('#tabla20 tbody'),\n    };\n    for (const decada of decadeStats) {\n      const tabla = tablas[decada.label];\n  \n      if (tabla instanceof HTMLElement) {\n        decada.authors.slice(0, 20).forEach((autor: { researcher: any; numPublications: any; year: any; }) => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${autor.researcher}</td><td>${autor.numPublications}</td>`;\n  \n          tabla.appendChild(row);\n        });\n      }\n    }\n  }\n\n\n\n  statsGenero(datasets: any[]){\n    const datasetsPorGenero: { [genero: string]: { year: string; count: number }[] } = {};\n\n      datasets.forEach((data: { year: any; genero: any; }) => {\n        const { year, genero } = data;\n        \n        let genderKey = '';\n        \n        if (genero == 'M' || genero == '?M' || genero == '1M' || genero == '?') {\n          genderKey = 'Hombres';\n        } else if (genero == 'F' || genero == '?F' || genero == '1F') {\n          genderKey = 'Mujeres';\n        } else{\n          genderKey = 'Desconocido';\n        }\n        \n        if (!datasetsPorGenero[genderKey]) {\n          datasetsPorGenero[genderKey] = [];\n        }\n        \n        const existingData = datasetsPorGenero[genderKey].find(d => d.year === year);\n        \n        if (existingData) {\n          existingData.count++;\n        } else {\n          datasetsPorGenero[genderKey].push({\n            year,\n            count: 1\n          });\n        }\n      });\n\n      // Crear un objeto para almacenar los datos ordenados\n      const datosOrdenados: { [anio: string]: { hombres: number; mujeres: number; total: number} } = {};\n      const hombres = datasetsPorGenero['Hombres'];\n      const mujeres = datasetsPorGenero['Mujeres'];\n\n      // Ordenar los datos de hombres\n      hombres.forEach(dato => {\n        const anio = dato.year;\n        const conteo = dato.count;\n\n        datosOrdenados[anio] = { hombres: conteo, mujeres: 0, total: conteo };\n      });\n\n      // Ordenar los datos de mujeres y combinarlos con los datos de hombres\n      mujeres.forEach(dato => {\n        const anio = dato.year;\n        const conteo = dato.count;\n\n        if (datosOrdenados[anio]) {\n          datosOrdenados[anio].mujeres = conteo;\n          datosOrdenados[anio].total += conteo;\n        } else {\n          datosOrdenados[anio] = { mujeres: conteo, hombres: 0, total: conteo };\n        }\n      });\n\n\n      // Obtener los años ordenados\n      const aniosOrdenados = Object.keys(datosOrdenados).sort();\n\n\n      const conteosHombres = aniosOrdenados.map(anio => Number((datosOrdenados[anio].hombres/(datosOrdenados[anio].total)).toFixed(4)));\n      const conteosMujeres = aniosOrdenados.map(anio => Number((datosOrdenados[anio].mujeres/(datosOrdenados[anio].total)).toFixed(4)));\n\n      \n  \n  }\n\n\n  async main(){\n    try {\n      this.titulosSeleccionados = this.seleccionService.obtenerTitulosSeleccionados();\n      this.conferenceOption = this.seleccionService.obtenerOpcionConferencia();\n      this.venueName = this.seleccionService.obtenerNombreVenue();\n\n      this.obtenerPapers();\n      this.obtenerColaboraciones();\n      this.obtenerSingleAuthorPapers();\n      this.obtenerResearchersConference();\n      \n\n     \n\n      if(this.researchers.length == 0){\n        await this.esperarResearcherNoVacio();\n        this.obtenerDatosDemograficos();\n      } else{\n        this.obtenerDatosDemograficos();\n      }      \n\n      if(this.papersWithAuthors.length == 0){\n        await this.esperarAuthorsWithPapersNoVacio();\n        this.obtenerTopicAnalisis();\n        this.obtenerDistribuciones();\n      }else{\n        this.obtenerTopicAnalisis();\n        this.obtenerDistribuciones();\n      }\n      \n      if(this.singleAuthor.length == 0){\n        await this.esperarSingleAuthorsNoVacio();\n        this.decadeStats = this.statsProlificAuthors(this.yearsSeleccionados);\n        this.generarTablasDecadas(this.decadeStats)\n      }else{\n        this.decadeStats = this.statsProlificAuthors(this.yearsSeleccionados);\n        this.generarTablasDecadas(this.decadeStats)\n      }\n\n  } catch (error) {\n    console.error('Error al obtener los datos:', error);\n  }\n  }\n\n\n\n \n}\n\n","<table>\n    <thead>\n      <tr>\n        <th>Procedimiento</th>\n        <th>Año</th>\n      </tr>\n    </thead>\n    \n  </table>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
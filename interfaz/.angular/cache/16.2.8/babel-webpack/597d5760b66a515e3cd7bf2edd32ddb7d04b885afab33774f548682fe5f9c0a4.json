{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/api';\n  }\n  obtenerNodosFiltradosConference(filtros) {\n    return this.http.post(`${this.baseUrl}/filtrar-conferences`, {\n      filterNames: filtros\n    });\n  }\n  obtenerNodosFiltradosJournal(name) {\n    return this.http.get(`${this.baseUrl}//filtrar-journals/${name}`);\n  }\n  generarEstadisticas(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/estadisticas`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerEstadisticas() {\n    const url = `${this.baseUrl}/estadisticas`;\n    return this.http.get(url);\n  }\n  generarconf(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/config`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerConfig() {\n    const url = `${this.baseUrl}/config`;\n    return this.http.get(url);\n  }\n  obtenerResearchersConference(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/researchersconference`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerResearchersJournals(titulosSeleccionados) {\n    return this.http.post(`${this.baseUrl}/researchersjournals`, {\n      titulosSeleccionados\n    });\n  }\n  obtenerPapers(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/papers`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerColaboraciones(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/colaboraciones`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerAuthorsPapers(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/AuthorsPapers`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerAuthorsGrade(titulosSeleccionados, option, venue) {\n    return this.http.post(`${this.baseUrl}/AuthorsDegree`, {\n      titulosSeleccionados,\n      option,\n      venue\n    });\n  }\n  obtenerbooks(titulosSeleccionados, venue) {\n    console.log(\"rolerher\" + venue);\n    return this.http.post(`${this.baseUrl}/searchbook`, {\n      titulosSeleccionados,\n      venue\n    });\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ApiService","constructor","http","baseUrl","obtenerNodosFiltradosConference","filtros","post","filterNames","obtenerNodosFiltradosJournal","name","get","generarEstadisticas","titulosSeleccionados","obtenerEstadisticas","url","generarconf","obtenerConfig","obtenerResearchersConference","obtenerResearchersJournals","obtenerPapers","option","venue","obtenerColaboraciones","obtenerAuthorsPapers","obtenerAuthorsGrade","obtenerbooks","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {}\n\n  obtenerNodosFiltradosConference(filtros: string[]): Observable<string[]> {\n    return this.http.post<string[]>(`${this.baseUrl}/filtrar-conferences`, { filterNames: filtros });\n  }\n\n  obtenerNodosFiltradosJournal(name: string): Observable<string[]> {\n    return this.http.get<string[]>(`${this.baseUrl}//filtrar-journals/${name}`);\n  }\n\n  generarEstadisticas(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/estadisticas`, { titulosSeleccionados });\n  }\n\n  obtenerEstadisticas(): Observable<any> {\n    const url = `${this.baseUrl}/estadisticas`;\n    return this.http.get<any>(url);\n  }\n\n\n  generarconf(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/config`, { titulosSeleccionados });\n  }\n\n  obtenerConfig(): Observable<any> {\n    const url = `${this.baseUrl}/config`;\n    return this.http.get<any>(url);\n  }\n\n  obtenerResearchersConference(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/researchersconference`, { titulosSeleccionados });\n  }\n\n  obtenerResearchersJournals(titulosSeleccionados: any[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/researchersjournals`, { titulosSeleccionados });\n  }\n\n  obtenerPapers(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/papers`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerColaboraciones(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/colaboraciones`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerAuthorsPapers(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/AuthorsPapers`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerAuthorsGrade(titulosSeleccionados: any[], option: string, venue: string[]): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/AuthorsDegree`, { titulosSeleccionados, option, venue });\n  }\n\n  obtenerbooks(titulosSeleccionados: any[], venue: string[]): Observable<any> {\n    console.log(\"rolerher\"+venue)\n    return this.http.post<any>(`${this.baseUrl}/searchbook`, { titulosSeleccionados, venue});\n  }\n  \n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../api.service\";\nimport * as i3 from \"../seleccion.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/common\";\nfunction ConfigComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const proceeding_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(proceeding_r1.proceeding);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(proceeding_r1.yearName);\n  }\n}\nexport class ConfigComponent {\n  constructor(route, apiService, seleccionService, http) {\n    this.route = route;\n    this.apiService = apiService;\n    this.seleccionService = seleccionService;\n    this.http = http;\n    this.titulosSeleccionados = [];\n    this.book = [];\n    this.sortedProceedings = [];\n    this.commonNames = {};\n  }\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.commonNames = this.parseCommonNames(data);\n    }, error => {\n      console.error('Error al cargar los datos:', error);\n    });\n  }\n  parseCommonNames(data) {\n    const lineas = data.split('\\n');\n    const diccionario = {};\n    let nombreActual = '';\n    let datosActuales = {\n      frec_paises: {},\n      genero: ''\n    };\n    for (const linea of lineas) {\n      if (linea.startsWith('nombre:')) {\n        nombreActual = linea.split(':')[1].trim();\n        datosActuales = {\n          frec_paises: {},\n          genero: ''\n        };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        datosActuales.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        datosActuales.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        diccionario[nombreActual] = datosActuales;\n      }\n    }\n    return diccionario;\n  }\n  ngOnInit() {\n    this.loadCommonNames();\n    //LLamada a la funcion principal para la ejecucion de todo\n    this.main();\n  }\n  obtenerBooks() {\n    this.apiService.obtenerbooks(this.titulosSeleccionados, this.book).subscribe({\n      next: response => {\n        console.log(\"resss\" + response);\n        this.sortedProceedings = response;\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  main() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.titulosSeleccionados = _this.seleccionService.obtenerTitulosSeleccionados();\n        console.log(\"TItulosselecc\" + _this.titulosSeleccionados);\n        _this.book = _this.seleccionService.obtenerNombreVenue();\n        console.log(\"BOOKS::::::\" + _this.book);\n        _this.obtenerBooks();\n      } catch (error) {\n        console.error('Error al obtener los datos:', error);\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function ConfigComponent_Factory(t) {\n    return new (t || ConfigComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.SeleccionService), i0.ɵɵdirectiveInject(i4.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfigComponent,\n    selectors: [[\"app-config\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"]],\n    template: function ConfigComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n        i0.ɵɵtext(4, \"Procedimiento\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"th\");\n        i0.ɵɵtext(6, \"A\\u00F1o\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"tbody\");\n        i0.ɵɵtemplate(8, ConfigComponent_tr_8_Template, 5, 2, \"tr\", 0);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sortedProceedings);\n      }\n    },\n    dependencies: [i5.NgForOf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","proceeding_r1","proceeding","yearName","ConfigComponent","constructor","route","apiService","seleccionService","http","titulosSeleccionados","book","sortedProceedings","commonNames","loadCommonNames","get","responseType","subscribe","data","parseCommonNames","error","console","lineas","split","diccionario","nombreActual","datosActuales","frec_paises","genero","linea","startsWith","trim","frec_paisesStr","substring","indexOf","lastIndexOf","JSON","parse","ngOnInit","main","obtenerBooks","obtenerbooks","next","response","log","_this","_asyncToGenerator","obtenerTitulosSeleccionados","obtenerNombreVenue","_","ɵɵdirectiveInject","i1","ActivatedRoute","i2","ApiService","i3","SeleccionService","i4","HttpClient","_2","selectors","decls","vars","consts","template","ConfigComponent_Template","rf","ctx","ɵɵtemplate","ConfigComponent_tr_8_Template","ɵɵproperty"],"sources":["/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/src/app/config/config.component.ts","/home/miguel/Documentos/Analizador_Redes_Colaboracion/interfaz/src/app/config/config.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { SeleccionService } from '../seleccion.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-config',\n  templateUrl: './config.component.html',\n  styleUrls: ['./config.component.scss']\n})\nexport class ConfigComponent implements OnInit{\n  titulosSeleccionados: any[] = [];\n  book: any[] = [];\n  sortedProceedings: any[] = [];\n  commonNames: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n\n  constructor(\n    private route: ActivatedRoute,\n    private apiService: ApiService,\n    private seleccionService: SeleccionService,\n    private http: HttpClient\n  ) {}\n\n  loadCommonNames() {\n    this.http.get('assets/common_names.txt', { responseType: 'text' }).subscribe(\n      (data: string) => {\n        this.commonNames = this.parseCommonNames(data);\n      },\n      (error: any) => {\n        console.error('Error al cargar los datos:', error);\n      }\n    );\n  }\n\n  parseCommonNames(data: string) {\n    const lineas = data.split('\\n');\n    const diccionario: { [key: string]: { frec_paises: { [key: string]: number }, genero: string } } = {};\n    let nombreActual = '';\n    let datosActuales: { frec_paises: { [key: string]: number }, genero: string } = {\n      frec_paises: {},\n      genero: ''\n    };\n  \n    for (const linea of lineas) {\n      if (linea.startsWith('nombre:')) {\n        nombreActual = linea.split(':')[1].trim();\n        datosActuales = { frec_paises: {}, genero: '' };\n      } else if (linea.startsWith('frec_paises:')) {\n        const frec_paisesStr = linea.substring(linea.indexOf('{'), linea.lastIndexOf('}') + 1);\n        const frec_paises = JSON.parse(frec_paisesStr);\n        datosActuales.frec_paises = frec_paises;\n      } else if (linea.startsWith('genero:')) {\n        datosActuales.genero = linea.split(':')[1].trim();\n      } else if (linea.trim() === '') {\n        diccionario[nombreActual] = datosActuales;\n      }\n    }\n    return diccionario;\n  }\n\n\n  ngOnInit() {\n    this.loadCommonNames();\n    //LLamada a la funcion principal para la ejecucion de todo\n    this.main();\n  }\n\n  obtenerBooks(){\n    this.apiService.obtenerbooks(this.titulosSeleccionados, this.book).subscribe({\n      next: (response: any[]) => {\n      console.log(\"resss\"+response)\n      this.sortedProceedings = response\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n\n  async main(){\n    try {\n      this.titulosSeleccionados = this.seleccionService.obtenerTitulosSeleccionados();\n      console.log(\"TItulosselecc\"+this.titulosSeleccionados);\n      this.book = this.seleccionService.obtenerNombreVenue();\n      console.log(\"BOOKS::::::\"+this.book);\n\n      this.obtenerBooks();\n  \n\n    \n\n  } catch (error) {\n    console.error('Error al obtener los datos:', error);\n  }\n  }\n\n\n \n}\n\n","<table>\n    <thead>\n      <tr>\n        <th>Procedimiento</th>\n        <th>Año</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let proceeding of sortedProceedings\">\n        <td>{{ proceeding.proceeding }}</td>\n        <td>{{ proceeding.yearName }}</td>\n      </tr>\n    </tbody>\n  </table>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
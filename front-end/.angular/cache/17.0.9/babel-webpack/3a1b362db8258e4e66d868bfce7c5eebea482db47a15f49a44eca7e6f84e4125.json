{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class NetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n    this.showCluster = true;\n    this.completeAuthors = [];\n    this.selectedAuthors = [];\n    this.forggetAuthors = [];\n    this.groupedAuthors = {};\n    this.cluster = {\n      min: 1,\n      max: 100\n    };\n  }\n  // Function to create Nodes\n  getNodes() {\n    this.groupedAuthors = {};\n    this.nameAuthors = this.completeAuthors;\n    this.nameAuthors = this.nameAuthors.map(author => {\n      let researcher = author.researcher;\n      researcher = researcher.replace(/&aacute;/g, 'á').replace(/&eacute;/g, 'é').replace(/&iacute;/g, 'í').replace(/&oacute;/g, 'ó').replace(/&uacute;/g, 'ú').replace(/&ntilde;/g, 'ñ').replace(/&Aacute;/g, 'Á').replace(/&Eacute;/g, 'É').replace(/&Iacute;/g, 'Í').replace(/&Oacute;/g, 'Ó').replace(/&Uacute;/g, 'Ú').replace(/&Ntilde;/g, 'Ñ').replace(/&agrave;/g, 'à').replace(/&egrave;/g, 'è').replace(/&ograve;/g, 'ò').replace(/&Agrave;/g, 'À').replace(/&Egrave;/g, 'È').replace(/&Ograve;/g, 'Ò').replace(/&acirc;/g, 'â').replace(/&Acirc;/g, 'Â').replace(/&atilde;/g, 'ã').replace(/&Atilde;/g, 'Ã').replace(/&ouml;/g, 'ö').replace(/&Ouml;/g, 'Ö');\n      author.researcher = researcher;\n      return author;\n    });\n    // Group authors by the number of publications less than cluster.min\n    this.nameAuthors.forEach(author => {\n      if ((author.publications.length < this.cluster.min || author.publications.length > this.cluster.max) && author.researcher != this.selectedAuthors[0]) {\n        const publicationCount = author.publications.length.toString();\n        if (!this.groupedAuthors[publicationCount]) {\n          this.groupedAuthors[publicationCount] = [];\n        }\n        this.groupedAuthors[publicationCount].push(author.researcher);\n      }\n    });\n    this.nameAuthors = this.nameAuthors.filter(author => author.publications.length >= this.cluster.min && author.publications.length <= this.cluster.max || author.researcher == this.selectedAuthors[0]);\n    if (this.showCluster == true) {\n      // Create new authors for each group\n      Object.keys(this.groupedAuthors).forEach(publicationCount => {\n        const authors = this.groupedAuthors[publicationCount];\n        const count = parseInt(publicationCount);\n        const publications = [];\n        for (let i = 0; i < count; i++) {\n          publications.push(\"aaa\");\n        }\n        const newAuthor = {\n          researcher: authors.length.toString(),\n          publications: publications\n        };\n        this.nameAuthors.push(newAuthor);\n      });\n    }\n    const authorWithMostPublications = this.nameAuthors.reduce((prevAuthor, currentAuthor) => {\n      if (currentAuthor.researcher !== this.selectedAuthors[0]) {\n        if (!prevAuthor || currentAuthor.publications.length > prevAuthor.publications.length) {\n          return currentAuthor;\n        }\n      }\n      return prevAuthor;\n    }, null);\n    const authorWithLeastPublications = this.nameAuthors.reduce((prevAuthor, currentAuthor) => {\n      return prevAuthor.publications.length < currentAuthor.publications.length ? prevAuthor : currentAuthor;\n    });\n    const maxPublications = authorWithMostPublications.publications.length;\n    const minPublications = authorWithLeastPublications.publications.length;\n    let distances = {};\n    this.nameAuthors.forEach(author => {\n      if (author.researcher != this.selectedAuthors[0]) {\n        if (maxPublications == minPublications) {\n          distances[author.researcher] = 250;\n        } else {\n          const proportion = (maxPublications - author.publications.length) / (maxPublications - minPublications);\n          const distance = (Math.pow(proportion, 4) * 300 + 400) * 4;\n          distances[author.researcher] = distance;\n        }\n      }\n    });\n    const sortedAuthors = this.nameAuthors.slice().sort((a, b) => {\n      return a.publications.length - b.publications.length;\n    });\n    const totalAuthors = sortedAuthors.length;\n    const angleStep = Math.PI * 2 / totalAuthors;\n    let currentAngle = 0;\n    const nodesData = sortedAuthors.map(author => {\n      let nodeSize = Math.floor(author.publications.length * 4) + 60;\n      if (author.researcher === this.selectedAuthors[0]) {\n        nodeSize = nodeSize + 50;\n      }\n      if (nodeSize > 200) {\n        nodeSize = 200;\n      }\n      var distanceFromCenter = 0;\n      if (this.selectedAuthors[0] != author.researcher) {\n        var id;\n        if (isNaN(Number(author.researcher))) {\n          id = author.researcher;\n        } else {\n          id = author.publications;\n        }\n        var distanceFromCenter = distances[author.researcher];\n        var x = Math.cos(currentAngle) * distanceFromCenter;\n        var y = Math.sin(currentAngle) * distanceFromCenter;\n        currentAngle += angleStep;\n        return {\n          id: id,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: x,\n          y: y\n        };\n      } else {\n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: 0,\n          y: 0\n        };\n      }\n    });\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  // Function to create Edges\n  getEdges() {\n    console.log(this.nameAuthors);\n    console.log(this.completeAuthors);\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== this.selectedAuthors[0]).map(author => {\n      var id;\n      if (isNaN(Number(author.researcher))) {\n        id = author.researcher;\n      } else {\n        id = author.publications;\n      }\n      const numPublications = author.publications.length.toString();\n      return {\n        from: this.selectedAuthors[0],\n        to: id,\n        label: numPublications\n      };\n    });\n    this.nameAuthors = this.nameAuthors.filter(author => isNaN(Number(author.researcher)));\n    if (this.showCluster == true) {\n      Object.keys(this.groupedAuthors).forEach(publicationCount => {\n        const authors = this.groupedAuthors[publicationCount];\n        const newAuthor = {\n          researcher: authors.length.toString(),\n          publications: authors\n        };\n        this.nameAuthors.push(newAuthor);\n      });\n    }\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  getClusterMin() {\n    return this.cluster.min;\n  }\n  setClusterMin(value) {\n    this.cluster.min = value;\n  }\n  getClusterMax() {\n    return this.cluster.max;\n  }\n  setClusterMax(value) {\n    this.cluster.max = value;\n  }\n  static #_ = this.ɵfac = function NetworkInitService_Factory(t) {\n    return new (t || NetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkInitService,\n    factory: NetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","NetworkInitService","constructor","nameAuthors","showCluster","completeAuthors","selectedAuthors","forggetAuthors","groupedAuthors","cluster","min","max","getNodes","map","author","researcher","replace","forEach","publications","length","publicationCount","toString","push","filter","Object","keys","authors","count","parseInt","i","newAuthor","authorWithMostPublications","reduce","prevAuthor","currentAuthor","authorWithLeastPublications","maxPublications","minPublications","distances","proportion","distance","Math","pow","sortedAuthors","slice","sort","a","b","totalAuthors","angleStep","PI","currentAngle","nodesData","nodeSize","floor","distanceFromCenter","id","isNaN","Number","x","cos","y","sin","label","font","size","color","nodes","getEdges","console","log","edgesData","numPublications","from","to","edges","getClusterMin","setClusterMin","value","getClusterMax","setClusterMax","_","_2","factory","ɵfac"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataSet, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class NetworkInitService {\n\n  public nameAuthors:any = [];\n  public showCluster = true;\n  public completeAuthors:any = [];\n  public selectedAuthors:any = [];\n  public forggetAuthors:any = [];\n  public groupedAuthors:{ [key: string]: string[] } = {};\n  public cluster: { min: number, max: number} =  { min: 1, max: 100}\n\n  // Function to create Nodes\n  getNodes(): DataSet<Node> {\n\n    this.groupedAuthors = {};\n    this.nameAuthors = this.completeAuthors;\n\n    this.nameAuthors = this.nameAuthors.map((author: any) => {\n      let researcher = author.researcher; \n  \n      researcher = researcher.replace(/&aacute;/g, 'á')\n          .replace(/&eacute;/g, 'é')\n          .replace(/&iacute;/g, 'í')\n          .replace(/&oacute;/g, 'ó')\n          .replace(/&uacute;/g, 'ú')\n          .replace(/&ntilde;/g, 'ñ')\n          .replace(/&Aacute;/g, 'Á')\n          .replace(/&Eacute;/g, 'É')\n          .replace(/&Iacute;/g, 'Í')\n          .replace(/&Oacute;/g, 'Ó')\n          .replace(/&Uacute;/g, 'Ú')\n          .replace(/&Ntilde;/g, 'Ñ')\n          .replace(/&agrave;/g, 'à')\n          .replace(/&egrave;/g, 'è')\n          .replace(/&ograve;/g, 'ò')\n          .replace(/&Agrave;/g, 'À')\n          .replace(/&Egrave;/g, 'È')\n          .replace(/&Ograve;/g, 'Ò')\n          .replace(/&acirc;/g, 'â')\n          .replace(/&Acirc;/g, 'Â')\n          .replace(/&atilde;/g, 'ã')\n          .replace(/&Atilde;/g, 'Ã')\n          .replace(/&ouml;/g, 'ö')\n          .replace(/&Ouml;/g, 'Ö');\n  \n      author.researcher = researcher;\n  \n      return author;\n    });\n    \n    // Group authors by the number of publications less than cluster.min\n\n    this.nameAuthors.forEach((author: { publications: string | any[]; researcher: string; }) => {\n        if ((author.publications.length < this.cluster.min || author.publications.length > this.cluster.max) && author.researcher != this.selectedAuthors[0]) {\n            const publicationCount = author.publications.length.toString();\n            if (!this.groupedAuthors[publicationCount]) {\n              this.groupedAuthors[publicationCount] = [];\n            }\n            this.groupedAuthors[publicationCount].push(author.researcher);\n        }\n    });\n\n    this.nameAuthors = this.nameAuthors.filter((author: { publications: string[]; researcher: boolean; }) => \n      (author.publications.length >= this.cluster.min && author.publications.length <= this.cluster.max) || \n      author.researcher == this.selectedAuthors[0]\n    );\n\n    if( this.showCluster == true){\n\n      // Create new authors for each group\n      Object.keys(this.groupedAuthors).forEach(publicationCount => {\n        const authors = this.groupedAuthors[publicationCount];\n        const count = parseInt(publicationCount);\n        const publications = [];\n        for (let i = 0; i < count; i++) {\n            publications.push(\"aaa\");\n        }\n        const newAuthor = { researcher: authors.length.toString(), publications: publications };\n        \n        this.nameAuthors.push(newAuthor);\n      });\n  \n    }\n    \n    const authorWithMostPublications = this.nameAuthors.reduce((prevAuthor: any, currentAuthor: any) => {\n      if (currentAuthor.researcher !== this.selectedAuthors[0]) {\n          if (!prevAuthor || currentAuthor.publications.length > prevAuthor.publications.length) {\n              return currentAuthor;\n          }\n      }\n      return prevAuthor;\n    }, null);\n\n    const authorWithLeastPublications = this.nameAuthors.reduce((prevAuthor: { publications: string | any[]; }, currentAuthor: { publications: string | any[]; }) => {\n      return (prevAuthor.publications.length < currentAuthor.publications.length) ? prevAuthor : currentAuthor;\n    });\n\n    const maxPublications = authorWithMostPublications.publications.length;\n    const minPublications = authorWithLeastPublications.publications.length;\n\n    let distances: { [key: string]: number } = {};\n    this.nameAuthors.forEach((author: any) => {\n        if (author.researcher != this.selectedAuthors[0]) {\n            if(maxPublications == minPublications){ \n              distances[author.researcher] = 250;\n            } else{\n              const proportion = (maxPublications - author.publications.length) / (maxPublications - minPublications);\n              const distance = (Math.pow(proportion, 4) * 300 + 400) * 4; \n              distances[author.researcher] = distance;\n            }\n        }\n    });\n\n    const sortedAuthors = this.nameAuthors.slice().sort((a: any, b: any) => {\n      return a.publications.length - b.publications.length;\n    });\n\n    const totalAuthors = sortedAuthors.length;\n    const angleStep = (Math.PI * 2) / totalAuthors;\n    let currentAngle = 0;\n\n    const nodesData: Node[] = sortedAuthors.map((author: any) => {\n\n      let nodeSize = Math.floor(author.publications.length * 4) + 60;\n\n      if (author.researcher === this.selectedAuthors[0]) {\n        nodeSize = nodeSize + 50; \n      }\n      if(nodeSize > 200){\n        nodeSize = 200\n      }\n\n\n      var distanceFromCenter = 0;\n\n      if(this.selectedAuthors[0] != author.researcher){\n        \n        var id;\n\n        if (isNaN(Number(author.researcher))) {\n          id = author.researcher;\n        } else {\n          id = author.publications;  \n        }\n\n        var distanceFromCenter = distances[author.researcher];\n\n        var x = Math.cos(currentAngle) * distanceFromCenter ;\n        var y = Math.sin(currentAngle) * distanceFromCenter ;\n\n        currentAngle += angleStep;\n  \n        return {\n          id: id,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: x,\n          y: y\n        };\n\n\n      } else{\n\n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: 0,\n          y: 0\n        };\n      }\n \n    });\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  // Function to create Edges\n  getEdges(): DataSet<Edge> {\n\n    console.log(this.nameAuthors)\n    console.log(this.completeAuthors)\n\n    const edgesData: Edge[] = this.nameAuthors\n    .filter((author: { researcher: any; }) => author.researcher !== this.selectedAuthors[0])\n    .map((author: { publications: string | any[]; researcher: any; }) => {\n\n      var id;\n\n      if (isNaN(Number(author.researcher))) {\n        id = author.researcher;\n      } else {\n        id = author.publications;  \n      }\n      const numPublications = author.publications.length.toString();\n      return { from: this.selectedAuthors[0], to: id, label: numPublications };\n    });\n\n    this.nameAuthors = this.nameAuthors.filter((author: { researcher: string; }) => isNaN(Number(author.researcher)));\n\n    if(this.showCluster == true ){\n\n      Object.keys(this.groupedAuthors).forEach(publicationCount => {\n        const authors = this.groupedAuthors[publicationCount];\n        const newAuthor = { researcher: authors.length.toString(), publications: authors };    \n        this.nameAuthors.push(newAuthor);\n      });\n\n    }\n\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n\n\n  }\n\n  getClusterMin(): number {\n    return this.cluster.min;\n  }\n\n  setClusterMin(value: number): void {\n    this.cluster.min = value;\n  }\n\n  getClusterMax(): number {\n    return this.cluster.max;\n  }\n\n  setClusterMax(value: number): void {\n    this.cluster.max = value;\n  }\n  \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_h1_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Selected node \", ctx_r1.selectNode.nodes, \"\");\n  }\n}\nfunction NetworksComponent_div_5_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\")(2, \"li\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const key_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.publicationsNode[key_r7], \"\");\n  }\n}\nfunction NetworksComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_5_div_1_div_3_Template, 4, 1, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const edge_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r4.selectNode.nodes, \" and \", edge_r5, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.objectKeys(ctx_r4.publicationsNode));\n  }\n}\nfunction NetworksComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_5_div_1_Template, 4, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.selectNode.edges);\n  }\n}\nfunction NetworksComponent_div_6_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r10);\n  }\n}\nfunction NetworksComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6, 7)(2, \"h1\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ul\");\n    i0.ɵɵtemplate(7, NetworksComponent_div_6_li_7_Template, 2, 1, \"li\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" Selected edge \", ctx_r3.selectEdge.edge.from, \" from \", ctx_r3.selectEdge.edge.to, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r3.selectEdge.edge.from, \" and \", ctx_r3.selectEdge.edge.to, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.publications);\n  }\n}\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.menuStatus = true;\n    this.publications = [];\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  onClick(params) {\n    if (params.edges.length > 0) {\n      this.onClickEdge(params);\n    }\n    // Agrega cualquier otra lógica que desees ejecutar en caso de hacer clic en otros elementos\n  }\n\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n  }\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n            if (author.researcher === edge.from) {\n              var uniquePublications = [];\n              author.publications.forEach(publication => {\n                uniquePublications += publication;\n              });\n              console.log(uniquePublications);\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"container\"], [\"treeContainer\", \"\"], [2, \"flex\", \"1\"], [4, \"ngIf\"], [\"style\", \"flex:4\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [2, \"flex\", \"4\"], [\"menuDiv\", \"\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", null, 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, NetworksComponent_h1_4_Template, 2, 1, \"h1\", 3)(5, NetworksComponent_div_5_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, NetworksComponent_div_6_Template, 8, 5, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectEdge && ctx.selectEdge.type === \"edge\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    styles: [\".conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsdUJBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZWluZXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r1","selectNode","nodes","ctx_r6","publicationsNode","key_r7","ɵɵtemplate","NetworksComponent_div_5_div_1_div_3_Template","ɵɵtextInterpolate2","ctx_r4","edge_r5","ɵɵproperty","objectKeys","NetworksComponent_div_5_div_1_Template","ctx_r2","edges","ɵɵtextInterpolate","publication_r10","NetworksComponent_div_6_li_7_Template","ctx_r3","selectEdge","edge","from","to","publications","NetworksComponent","constructor","appNetworkService","appNetworkInitService","menuStatus","Object","keys","data","selectedData","ngOnInit","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","on","params","onSelect","onClick","ngOnDestroy","destroy","length","onClickEdge","edgeId","get","type","researcherName","nameAuthors","map","author","researcher","concat","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","forEach","push","uniquePublications","publication","console","log","result","pointer","prevSelectNode","_","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵelement","NetworksComponent_h1_4_Template","NetworksComponent_div_5_Template","NetworksComponent_div_6_Template"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts","/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { ApiService } from '../services/api.service';\n\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  publications: any[] = [];\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  private onClick(params: any): void {\n    if (params.edges.length > 0) {\n        this.onClickEdge(params);\n    }\n    // Agrega cualquier otra lógica que desees ejecutar en caso de hacer clic en otros elementos\n}\n\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publications = [];\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n\n  }\n\n  private onSelect(params: any): void {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n            \n            if (author.researcher === edge.from) {\n              var uniquePublications: any = []\n              author.publications.forEach((publication: any) => {\n                uniquePublications += publication;\n              });\n\n              console.log(uniquePublications)\n\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n\n          });\n\n        }\n\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n}\n\n","<div class=\"container\">\n    \n  <div #treeContainer></div>\n\n  <div style=\"flex:1\">\n    <h1 *ngIf=\"selectNode\"> Selected node {{ selectNode.nodes }}</h1> \n    <div *ngIf=\"selectNode\">\n      <div *ngFor=\"let edge of selectNode.edges\">\n        <div> Common publications of {{ selectNode.nodes }} and {{ edge }}:</div>\n        <div *ngFor=\"let key of objectKeys(publicationsNode)\">\n          <ul>\n            <li> {{ publicationsNode[key] }}</li>\n          </ul>\n        </div>\n      </div>\n\n   \n\n    </div>\n  </div>  \n\n  <div #menuDiv style=\"flex:4\" *ngIf=\"selectEdge && selectEdge.type === 'edge'\">\n    <h1> Selected edge {{ selectEdge.edge.from }} from {{ selectEdge.edge.to }}</h1> \n    <div> Common publications of  {{ selectEdge.edge.from }} and {{ selectEdge.edge.to }}:</div>\n    <ul>\n      <li *ngFor=\"let publication of publications\">{{ publication }}</li>\n    </ul>\n  </div>\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
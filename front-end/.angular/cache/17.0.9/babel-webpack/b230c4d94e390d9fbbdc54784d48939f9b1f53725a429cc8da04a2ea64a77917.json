{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(apiService, router, stadisticsService, modalService, homeService) {\n    this.apiService = apiService;\n    this.router = router;\n    this.stadisticsService = stadisticsService;\n    this.modalService = modalService;\n    this.homeService = homeService;\n    this.filtersString = '';\n    this.filtersBOX = '';\n    this.filterComunities = [];\n    this.nameCommunity = '';\n    this.completeTextBox = [];\n    this.filteredResults = [];\n    this.selectAll = false;\n    this.showYears = false;\n    this.showDecades = false;\n    this.repeated = false;\n    this.noResultsFoundConference = false;\n    this.noResultsFoundJournal = false;\n    this.selectYears = false;\n  }\n  // API CALL: Function to autocomplete the text box.\n  autocompleteTextBox(term) {\n    this.apiService.autocompleteConferenceAndJournals(term).subscribe({\n      next: response => {\n        this.completeTextBox = response;\n      },\n      error: error => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n  // Function to check that the chosen journal or conference exists and is not duplicated\n  completeSuggestion(suggestion) {\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n      if (this.homeService.currentConferences.includes(filtros)) {\n        this.repeated = true;\n      } else {\n        this.repeated = false;\n      }\n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: response => {\n          if (response.length !== 0) {\n            this.noResultsFoundConference = false;\n            if (!this.homeService.filtersList.includes(filtros)) {\n              this.homeService.filtersList.push(filtros);\n              const newFilters = this.filterComunities.filter(item => !this.homeService.filtersList.includes(item));\n              this.homeService.filtersList = this.homeService.filtersList.concat(newFilters);\n              this.filtersString = this.homeService.filtersList.join(',');\n            }\n          } else {\n            this.noResultsFoundConference = true;\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: response => {\n                if (response.length !== 0) {\n                  this.noResultsFoundJournal = false;\n                  if (!this.homeService.filtersList.includes(filtros)) {\n                    this.homeService.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.homeService.filtersList.includes(item));\n                    this.homeService.filtersList = this.homeService.filtersList.concat(newFilters);\n                    this.filtersString = this.homeService.filtersList.join(',');\n                  }\n                  for (const filter of this.homeService.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                      this.homeService.currentConferences.push(filter);\n                    }\n                    const filtersListSinDuplicados = this.homeService.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n                    this.homeService.currentConferences = filtersListSinDuplicados;\n                  }\n                } else {\n                  this.noResultsFoundJournal = true;\n                }\n              },\n              error: error => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.homeService.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n              this.homeService.currentConferences.push(filter);\n            }\n            const filtersListSinDuplicados = this.homeService.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n            this.homeService.currentConferences = filtersListSinDuplicados;\n          }\n        },\n        error: error => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n  // Function to select conference o jorunal\n  selectSuggestion(suggestion) {\n    this.filtersBOX = suggestion;\n  }\n  // Function to delete the conference or journal\n  deleteFilter(filter) {\n    const i = this.homeService.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.homeService.filtersList.splice(i, 1);\n      this.filtersString = this.homeService.filtersList.join(',');\n    }\n    const R = this.homeService.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.homeService.currentConferences.splice(i, 1);\n    }\n  }\n  // Function to delete Community\n  deleteCommunity(communityToDelete) {\n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    for (const filter of communityToDelete.filtersList) {\n      const i = this.homeService.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.homeService.filtersList.splice(i, 1);\n        this.filtersString = this.homeService.filtersList.join(',');\n      }\n    }\n  }\n  // Function to create Community\n  createCommunity(filtersList) {\n    this.homeService.Communities.push({\n      name: this.nameCommunity,\n      filtersList: filtersList,\n      selected: false\n    });\n    this.closeModal();\n    this.nameCommunity = '';\n    this.homeService.filtersList = [];\n    this.homeService.currentConferences = [];\n  }\n  // Function to wait for the titles of Confrenece or Journal\n  waitTitlesNoEmpty() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      while (!_this.homeService.filteredTitles || _this.homeService.filteredTitles.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  // Function to search for the years of the selected conferences and journals\n  execFunctionsYear() {\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.showButtons = false;\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getYearsConference();\n    this.waitTitlesNoEmpty();\n    this.toggleYears();\n  }\n  // Function to search for the decades of the selected conferences and journals\n  execFunctionsDecades() {\n    this.homeService.showButtons = false;\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getYearsConference();\n    this.waitTitlesNoEmpty();\n    this.toggleDecades();\n  }\n  // Function to change the selection of years\n  toggleYears() {\n    this.showYears = !this.showYears;\n    if (this.showDecades == true) {\n      this.showDecades = false;\n    }\n  }\n  // Function to change the selection of decades\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n    if (this.showYears == true) {\n      this.showYears = false;\n    }\n  }\n  // Function to clear all selections\n  clear() {\n    this.homeService.filteredTitles = [];\n    this.homeService.filtersList = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitlesJournal = [];\n    this.completeTextBox = [];\n    this.homeService.currentConferences = [];\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.showButtons = false;\n  }\n  // API CALL: Function to search for the years of the conferences\n  getYearsConference() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.homeService.filtersList = this.homeService.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.homeService.filtersList = this.homeService.filtersList.concat(this.filterComunities);\n    this.filtersString = this.homeService.filtersList.join(',');\n    this.homeService.filtersList = this.homeService.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesConference(this.homeService.filtersList).subscribe({\n      next: response => {\n        this.filteredResults = response.map(item => item);\n        if (this.homeService.filteredTitlesConference.length < 1) {\n          this.homeService.showButtons = true;\n          const uniqueYears = [...new Set(response)];\n          this.homeService.filteredTitlesConference = uniqueYears.map(year => ({\n            title: year,\n            selected: false\n          }));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n        this.homeService.filteredTitles = [];\n        this.homeService.filteredTitles = [...this.homeService.filteredTitlesJournal, ...this.homeService.filteredTitlesConference];\n        const uniqueTitlesSet = new Set(this.homeService.filteredTitles.map(title => title.title));\n        this.homeService.filteredTitles = Array.from(uniqueTitlesSet).map(title => ({\n          title,\n          selected: false\n        }));\n        this.homeService.filteredTitles.sort((a, b) => {\n          const yearA = parseInt(a.title, 10);\n          const yearB = parseInt(b.title, 10);\n          return yearA - yearB;\n        });\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  // API CALL: Function to search for the years of the Journals\n  getFilteredNodesJournal() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.homeService.filtersList = this.homeService.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.homeService.filtersList = this.homeService.filtersList.concat(this.filterComunities);\n    this.filtersString = this.homeService.filtersList.join(',');\n    this.homeService.filtersList = this.homeService.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesJournal(this.homeService.filtersList).subscribe({\n      next: response => {\n        this.filteredResults = response.map(item => item);\n        if (this.homeService.filteredTitlesJournal.length < 1) {\n          this.homeService.showButtons = true;\n          const uniqueYears = [...new Set(response)];\n          this.homeService.filteredTitlesJournal = uniqueYears.map(year => ({\n            title: year,\n            selected: false\n          }));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundJournal = true;\n          } else {\n            this.noResultsFoundJournal = false;\n          }\n        }\n        this.homeService.filteredTitles = [];\n        this.homeService.filteredTitles = [...this.homeService.filteredTitlesJournal, ...this.homeService.filteredTitlesConference];\n        const uniqueTitlesSet = new Set(this.homeService.filteredTitles.map(title => title.title));\n        this.homeService.filteredTitles = Array.from(uniqueTitlesSet).map(title => ({\n          title,\n          selected: false\n        }));\n        this.homeService.filteredTitles.sort((a, b) => {\n          const yearA = parseInt(a.title, 10);\n          const yearB = parseInt(b.title, 10);\n          return yearA - yearB;\n        });\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  // Function to check if there is any selected year\n  existSelectTitle() {\n    if (this.homeService.filteredTitles.some(titulo => titulo.selected)) {\n      this.selectYears = true;\n    } else {\n      this.selectYears = false;\n    }\n  }\n  // Function to select all years\n  selectAlls() {\n    if (this.selectAll) {\n      this.homeService.filteredTitles.forEach(title => {\n        title.selected = true;\n      });\n    } else {\n      this.homeService.filteredTitles.forEach(title => {\n        title.selected = false;\n      });\n    }\n    this.existSelectTitle();\n  }\n  // Select the decade of the 1980s\n  selectDecade1980() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1979\" || year.title == \"1980\" || year.title == \"1981\" || year.title == \"1982\" || year.title == \"1983\" || year.title == \"1984\" || year.title == \"1985\" || year.title == \"1986\" || year.title == \"1987\" || year.title == \"1988\" || year.title == \"1989\") {\n        year.selected = true;\n      }\n    }\n    this.existSelectTitle();\n  }\n  // Select the decade of the 1990s\n  selectDecade1990() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1989\" || year.title == \"1990\" || year.title == \"1991\" || year.title == \"1992\" || year.title == \"1993\" || year.title == \"1994\" || year.title == \"1995\" || year.title == \"1996\" || year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = true;\n      }\n    }\n    this.existSelectTitle();\n  }\n  // Select the decade of the 2000s\n  selectDecade2000() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1999\" || year.title == \"2000\" || year.title == \"2001\" || year.title == \"2002\" || year.title == \"2003\" || year.title == \"2004\" || year.title == \"2005\" || year.title == \"2006\" || year.title == \"2007\" || year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = true;\n      }\n    }\n    this.existSelectTitle();\n  }\n  // Select the decade of the 2010s\n  selectDecade2010() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"2009\" || year.title == \"2010\" || year.title == \"2011\" || year.title == \"2012\" || year.title == \"2013\" || year.title == \"2014\" || year.title == \"2015\" || year.title == \"2016\" || year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = true;\n      }\n    }\n    this.existSelectTitle();\n  }\n  // Select the decade of the 2020s\n  selectDecade2020() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"2019\" || year.title == \"2020\" || year.title == \"2021\" || year.title == \"2022\" || year.title == \"2023\" || year.title == \"2024\") {\n        year.selected = true;\n      }\n    }\n    this.existSelectTitle();\n  }\n  // Function to activate the statistics link\n  activateLink() {\n    this.homeService.setActiveLinkStatistics(true);\n  }\n  // Function to generate statistics.\n  generateStatistics() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const titles = _this2.homeService.filteredTitles.filter(titulo => titulo.selected).map(titulo => titulo.title);\n      const splitFilters = _this2.filtersString.split(',').map(filtersString => filtersString.trim());\n      _this2.stadisticsService.cleanTitles();\n      _this2.stadisticsService.addTitles(titles);\n      _this2.stadisticsService.flagConferenceOrJournalName(splitFilters);\n      _this2.activateLink();\n      _this2.router.navigateByUrl('/statistics');\n    })();\n  }\n  // Function to open the modal\n  openModal(template) {\n    this.modalRef = this.modalService.show(template);\n  }\n  // Function to close the modal\n  closeModal() {\n    this.modalRef?.hide();\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["Component","HomeComponent","constructor","apiService","router","stadisticsService","modalService","homeService","filtersString","filtersBOX","filterComunities","nameCommunity","completeTextBox","filteredResults","selectAll","showYears","showDecades","repeated","noResultsFoundConference","noResultsFoundJournal","selectYears","autocompleteTextBox","term","autocompleteConferenceAndJournals","subscribe","next","response","error","console","completeSuggestion","suggestion","trim","filtros","currentConferences","includes","getFilteredNodesConference","length","filtersList","push","newFilters","filter","item","concat","join","getFilteredNodesJournal","filtersListSinDuplicados","valor","indice","self","indexOf","complete","selectSuggestion","deleteFilter","i","splice","R","deleteCommunity","communityToDelete","Communities","community","name","selected","createCommunity","closeModal","waitTitlesNoEmpty","_this","_asyncToGenerator","filteredTitles","Promise","resolve","setTimeout","execFunctionsYear","filteredTitlesJournal","showButtons","filteredTitlesConference","getYearsConference","toggleYears","execFunctionsDecades","toggleDecades","clear","forEach","filterItem","value","index","map","uniqueYears","Set","year","title","uniqueTitlesSet","Array","from","sort","a","b","yearA","parseInt","yearB","existSelectTitle","some","titulo","selectAlls","selectDecade1980","selectDecade1990","selectDecade2000","selectDecade2010","selectDecade2020","activateLink","setActiveLinkStatistics","generateStatistics","_this2","titles","splitFilters","split","cleanTitles","addTitles","flagConferenceOrJournalName","navigateByUrl","openModal","template","modalRef","show","hide","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/miguel/Collaboration_Networks/interfaz/src/app/home/home.component.ts"],"sourcesContent":["import { Component, TemplateRef } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { Router } from '@angular/router';\nimport { StadisticsService } from '../services/stadistics.service';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { HomeService } from '../services/home.service';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent {\n\n  filtersString : string = '';\n  filtersBOX: string = '';\n  filterComunities: string[] = [];\n  nameCommunity: string = '';\n  completeTextBox: string[] = [];\n  filteredResults: string[] = [];\n  selectAll = false;\n  showYears: boolean = false;\n  showDecades: boolean = false;\n  repeated: boolean = false;\n  noResultsFoundConference = false;\n  noResultsFoundJournal = false;\n  modalRef: BsModalRef | undefined;\n  selectYears = false;\n \n  constructor(\n    private apiService: ApiService, \n    private router: Router,\n    private stadisticsService: StadisticsService,\n    private modalService: BsModalService,\n    public homeService: HomeService\n  ) { }\n\n  // API CALL: Function to autocomplete the text box.\n  autocompleteTextBox(term: string): void {\n    this.apiService.autocompleteConferenceAndJournals(term).subscribe({\n      next: (response: string[]) => {\n        this.completeTextBox = response;\n      },\n      error: (error: any) => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n\n  // Function to check that the chosen journal or conference exists and is not duplicated\n  completeSuggestion(suggestion: string) {\n\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n\n      if(this.homeService.currentConferences.includes(filtros)){\n        this.repeated = true;\n      }else{\n        this.repeated = false;\n      }\n    \n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: (response: any[]) => {\n\n          if (response.length !== 0) {\n\n            this.noResultsFoundConference = false;\n\n            if (!this.homeService.filtersList.includes(filtros)) {\n              this.homeService.filtersList.push(filtros);\n              \n              const newFilters = this.filterComunities.filter(item => !this.homeService.filtersList.includes(item));\n\n              this.homeService.filtersList = this.homeService.filtersList.concat(newFilters);\n              this.filtersString  = this.homeService.filtersList.join(','); \n            }\n          } else {\n\n            this.noResultsFoundConference = true;\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: (response: any[]) => {\n      \n                if (response.length !== 0) {\n      \n                  this.noResultsFoundJournal = false;\n      \n                  if (!this.homeService.filtersList.includes(filtros)) {\n                    this.homeService.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.homeService.filtersList.includes(item));\n      \n                    this.homeService.filtersList = this.homeService.filtersList.concat(newFilters);\n                    this.filtersString  = this.homeService.filtersList.join(','); \n                  }\n\n                  for (const filter of this.homeService.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                        this.homeService.currentConferences.push(filter);\n                   \n                    }\n        \n                    const filtersListSinDuplicados: string[] = this.homeService.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n        \n                    this.homeService.currentConferences = filtersListSinDuplicados\n                  }   \n                } else {\n                  this.noResultsFoundJournal = true;\n                }\n               \n              },\n              error: (error: any) => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.homeService.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n                this.homeService.currentConferences.push(filter);\n           \n            }\n\n            const filtersListSinDuplicados: string[] = this.homeService.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n\n            this.homeService.currentConferences = filtersListSinDuplicados\n          }   \n        },\n        error: (error: any) => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n\n  // Function to select conference o jorunal\n  selectSuggestion(suggestion: string) {\n    this.filtersBOX = suggestion;\n  }\n\n  // Function to delete the conference or journal\n  deleteFilter(filter: string) {\n    const i = this.homeService.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.homeService.filtersList.splice(i, 1); \n      this.filtersString = this.homeService.filtersList.join(',');\n    }\n\n    const R = this.homeService.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.homeService.currentConferences.splice(i, 1); \n    }\n  }\n\n  // Function to delete Community\n  deleteCommunity(communityToDelete: { name: string, filtersList: string[], selected: boolean }) {\n \n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    \n    for (const filter of communityToDelete.filtersList) {      \n      const i = this.homeService.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.homeService.filtersList.splice(i, 1); \n        this.filtersString = this.homeService.filtersList.join(',');\n      }\n    }\n  }\n\n  // Function to create Community\n  createCommunity(filtersList: string[]){\n   \n    this.homeService.Communities.push({ name: this.nameCommunity, filtersList: filtersList, selected: false });\n    this.closeModal()\n    this.nameCommunity = '';\n    this.homeService.filtersList = [];\n    this.homeService.currentConferences = [];\n\n  }\n\n  // Function to wait for the titles of Confrenece or Journal\n  async waitTitlesNoEmpty() {\n    while (!this.homeService.filteredTitles || this.homeService.filteredTitles.length === 0 ) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  // Function to search for the years of the selected conferences and journals\n  execFunctionsYear(){\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.showButtons= false;\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getYearsConference();\n    this.waitTitlesNoEmpty();\n    this.toggleYears();\n  }\n\n  // Function to search for the decades of the selected conferences and journals\n  execFunctionsDecades(){\n    this.homeService.showButtons= false;\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getYearsConference();\n    this.waitTitlesNoEmpty();\n    this.toggleDecades();\n  }\n\n  // Function to change the selection of years\n  toggleYears() {\n    this.showYears = !this.showYears;\n      if(this.showDecades == true){\n        this.showDecades = false;\n      }\n  }\n\n  // Function to change the selection of decades\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n      if(this.showYears == true){\n        this.showYears = false;\n      }\n  }\n\n  // Function to clear all selections\n  clear(){\n    this.homeService.filteredTitles = [];\n    this.homeService.filtersList = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.filteredTitlesJournal = [];\n    this.completeTextBox = [];\n    this.homeService.currentConferences = [];\n    this.homeService.filteredTitlesJournal = [];\n    this.homeService.filteredTitlesConference = [];\n    this.homeService.showButtons= false;\n  }\n\n  // API CALL: Function to search for the years of the conferences\n  getYearsConference() {\n\n    this.homeService.Communities.forEach(community => {\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.homeService.filtersList = this.homeService.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n\n    this.homeService.filtersList = this.homeService.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.homeService.filtersList.join(','); \n\n    this.homeService.filtersList = this.homeService.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesConference(this.homeService.filtersList).subscribe({\n      next: (response: any[]) => {\n\n        this.filteredResults = response.map(item => item);\n\n        if(this.homeService.filteredTitlesConference.length < 1){\n          this.homeService.showButtons = true;\n          const uniqueYears = [...new Set(response)]; \n\n          this.homeService.filteredTitlesConference = uniqueYears.map(year => ({\n            title: year,\n            selected: false\n          }));\n\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n\n        this.homeService.filteredTitles = [];\n        this.homeService.filteredTitles = [...this.homeService.filteredTitlesJournal, ...this.homeService.filteredTitlesConference];\n        \n        const uniqueTitlesSet = new Set(this.homeService.filteredTitles.map(title => title.title));\n        \n        this.homeService.filteredTitles = Array.from(uniqueTitlesSet).map(title => ({\n          title,\n          selected: false\n        }));\n\n        this.homeService.filteredTitles.sort((a, b) => {\n          const yearA = parseInt(a.title, 10);\n          const yearB = parseInt(b.title, 10);\n          return yearA - yearB;\n        });  \n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      } \n    });\n  }\n\n  // API CALL: Function to search for the years of the Journals\n  getFilteredNodesJournal() {\n\n    this.homeService.Communities.forEach(community => {\n\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.homeService.filtersList = this.homeService.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    \n    });\n\n    this.homeService.filtersList = this.homeService.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.homeService.filtersList.join(','); \n\n    this.homeService.filtersList = this.homeService.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesJournal(this.homeService.filtersList).subscribe({\n      next: (response: any[]) => {\n\n        this.filteredResults = response.map(item => item);\n\n        if(this.homeService.filteredTitlesJournal.length < 1){\n          this.homeService.showButtons = true;\n          const uniqueYears = [...new Set(response)]; \n\n          this.homeService.filteredTitlesJournal = uniqueYears.map(year => ({\n            title: year,\n            selected: false\n          }));\n\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundJournal = true;\n          } else {\n            this.noResultsFoundJournal = false;\n          }\n        }\n\n        this.homeService.filteredTitles = [];\n        this.homeService.filteredTitles = [...this.homeService.filteredTitlesJournal, ...this.homeService.filteredTitlesConference];\n\n        const uniqueTitlesSet = new Set(this.homeService.filteredTitles.map(title => title.title));\n\n        this.homeService.filteredTitles = Array.from(uniqueTitlesSet).map(title => ({\n          title,\n          selected: false\n        }));\n\n        this.homeService.filteredTitles.sort((a, b) => {\n          const yearA = parseInt(a.title, 10);\n          const yearB = parseInt(b.title, 10);\n          return yearA - yearB;\n        });\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }   \n    });\n  }\n\n  // Function to check if there is any selected year\n  existSelectTitle() {\n    if (this.homeService.filteredTitles.some(titulo => titulo.selected)){\n      this.selectYears = true;\n    }else{\n      this.selectYears = false;\n    }\n  }\n\n  // Function to select all years\n  selectAlls() {\n\n    if (this.selectAll) {\n      this.homeService.filteredTitles.forEach(title => {\n        title.selected = true;\n      });\n    } else {\n      this.homeService.filteredTitles.forEach(title => {\n        title.selected = false;\n      });\n    }\n\n    this.existSelectTitle();\n  }\n\n  // Select the decade of the 1980s\n  selectDecade1980() {\n  \n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1979\" || year.title == \"1980\" ||year.title == \"1981\" ||year.title == \"1982\" ||\n      year.title == \"1983\" || year.title == \"1984\" ||year.title == \"1985\" ||year.title == \"1986\" ||\n      year.title == \"1987\" || year.title == \"1988\" || year.title == \"1989\") {\n        year.selected = true;\n      } \n    }\n    this.existSelectTitle()\n  }\n\n  // Select the decade of the 1990s\n  selectDecade1990() {\n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1989\" || year.title == \"1990\" ||year.title == \"1991\" || year.title == \"1992\" ||\n      year.title == \"1993\" || year.title == \"1994\" ||year.title == \"1995\" || year.title == \"1996\" ||\n      year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = true;\n      } \n    }\n    this.existSelectTitle()\n  }\n\n  // Select the decade of the 2000s\n  selectDecade2000() {\n  \n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"1999\" ||  year.title == \"2000\" || year.title == \"2001\" ||year.title == \"2002\" ||year.title == \"2003\" ||\n      year.title == \"2004\" || year.title == \"2005\" ||year.title == \"2006\" ||year.title == \"2007\" ||\n      year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = true;\n      } \n    }\n    this.existSelectTitle()\n  }\n\n  // Select the decade of the 2010s\n  selectDecade2010() {\n  \n    for (let year of this.homeService.filteredTitles) {\n      if (year.title == \"2009\" || year.title == \"2010\" || year.title == \"2011\" ||year.title == \"2012\" ||\n      year.title == \"2013\" || year.title == \"2014\" ||year.title == \"2015\" || year.title == \"2016\" ||\n      year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = true;\n      } \n    }\n    this.existSelectTitle()\n  }\n\n  // Select the decade of the 2020s\n  selectDecade2020() {\n  \n    for (let year of this.homeService.filteredTitles) {\n      if ( year.title == \"2019\" || year.title == \"2020\" ||year.title == \"2021\" ||year.title == \"2022\" ||\n      year.title == \"2023\" || year.title == \"2024\"){\n        year.selected = true;\n      } \n    }\n    this.existSelectTitle()\n  }\n\n  // Function to activate the statistics link\n  activateLink() {\n    this.homeService.setActiveLinkStatistics(true);\n  }\n\n  // Function to generate statistics.\n  async generateStatistics() {\n\n    const titles = this.homeService.filteredTitles.\n    filter(titulo => titulo.selected).map(titulo => titulo.title);\n\n    const splitFilters = this.filtersString.split(',').map(filtersString => filtersString.trim());\n    this.stadisticsService.cleanTitles();\n    this.stadisticsService.addTitles(titles);\n    this.stadisticsService.flagConferenceOrJournalName(splitFilters)\n\n    this.activateLink();\n    this.router.navigateByUrl('/statistics');\n  }\n\n  // Function to open the modal\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template)\n  }\n\n  // Function to close the modal\n  closeModal() {\n    this.modalRef?.hide();\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
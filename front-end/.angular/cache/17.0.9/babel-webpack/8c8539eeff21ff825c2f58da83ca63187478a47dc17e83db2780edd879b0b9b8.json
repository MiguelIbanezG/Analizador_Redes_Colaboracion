{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_21_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const edge_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"Common publications of \", ctx_r5.selectNode.nodes, \" and \", edge_r4, \":\");\n  }\n}\nfunction NetworksComponent_div_21_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const edge_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"These authors have \", ctx_r6.selectNode.nodes, \" publications in common with \", edge_r4, \":\");\n  }\n}\nfunction NetworksComponent_div_21_div_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r10);\n  }\n}\nfunction NetworksComponent_div_21_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_21_div_3_div_1_Template, 2, 2, \"div\", 12)(2, NetworksComponent_div_21_div_3_div_2_Template, 2, 2, \"div\", 12);\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, NetworksComponent_div_21_div_3_li_4_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.number);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.number);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.publicationsNode[ctx_r3.selectNode.nodes]);\n  }\n}\nfunction NetworksComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_21_div_3_Template, 5, 3, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Selected node \", ctx_r1.selectNode.nodes, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectNode.edges);\n  }\n}\nfunction NetworksComponent_div_22_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r11.selectEdge.edge.from, \" and \", ctx_r11.selectEdge.edge.to, \":\");\n  }\n}\nfunction NetworksComponent_div_22_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"These authors have \", ctx_r12.selectEdge.edge.to, \" publications in common with \", ctx_r12.selectEdge.edge.from, \":\");\n  }\n}\nfunction NetworksComponent_div_22_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r14);\n  }\n}\nfunction NetworksComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_22_div_3_Template, 2, 2, \"div\", 12)(4, NetworksComponent_div_22_div_4_Template, 2, 2, \"div\", 12);\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, NetworksComponent_div_22_li_6_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Selected edge \", ctx_r2.selectEdge.edge.from, \" from \", ctx_r2.selectEdge.edge.to, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.number);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.number);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.publicationsEdge[ctx_r2.selectEdge.edge.to]);\n  }\n}\nexport class NetworksComponent {\n  constructor(NetworkService, NetworkInitService) {\n    this.NetworkService = NetworkService;\n    this.NetworkInitService = NetworkInitService;\n    this.minCluster = 0;\n    this.maxCluster = 0;\n    this.menuStatus = true;\n    this.number = false;\n    this.publicationsEdge = {};\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nameAuthor = this.NetworkInitService.selectedAuthors;\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  updateCluster() {\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n  }\n  // Function to differentiate the selection of edges and nodes\n  onClick(params) {\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n  // Function so that common publications appear when clicking on an edge\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publicationsEdge = {};\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map(author => {\n      var uniquePublicationsSet = new Set();\n      if (isNaN(Number(author.researcher))) {\n        this.number = false;\n      } else {\n        this.number = true;\n      }\n      if (author.researcher === researcherName) {\n        author.publications.forEach(publication => {\n          uniquePublicationsSet.add(publication);\n        });\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;\n        } else {\n          this.number = true;\n        }\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;\n        } else {\n          this.number = true;\n        }\n        var uniquePublications = Array.from(uniquePublicationsSet);\n        this.publicationsEdge[author.researcher] = uniquePublications;\n        console.log(this.publicationsEdge[author.researcher]);\n      }\n      return author;\n    });\n    this.selectNode = null;\n  }\n  // Function so that common publications appear when clicking on an node\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map(author => {\n            if (isNaN(Number(author.researcher))) {\n              this.number = false;\n            } else {\n              this.number = true;\n            }\n            console.log(this.number);\n            if (author.researcher === edge.to) {\n              var uniquePublicationsSet = new Set();\n              if (this.number == true) {\n                this.NetworkInitService.completeAuthors.forEach(authorComplete => {\n                  if (author.publications.length == authorComplete.publications.length) {\n                    author.publication.add(authorComplete.researcher);\n                  }\n                });\n                author.publications.forEach(publication => {\n                  uniquePublicationsSet.add(publication);\n                });\n              } else {\n                var uniquePublications = [];\n                author.publications.forEach(publication => {\n                  uniquePublicationsSet.add(publication);\n                });\n                uniquePublications = Array.from(uniquePublicationsSet);\n                this.publicationsNode[author.researcher] = uniquePublications;\n              }\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  esStringNumero(str) {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.NetworkService), i0.ɵɵdirectiveInject(i2.NetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 23,\n    vars: 5,\n    consts: [[1, \"container\"], [1, \"container-network\"], [1, \"clusterNetwork\"], [\"fxLayoutGap\", \"10px\", 1, \"cluster\"], [\"for\", \"minCluster\"], [\"type\", \"number\", \"id\", \"minCluster\", \"name\", \"minCluster\", 1, \"minCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"maxCluster\"], [\"type\", \"number\", \"id\", \"maxCluster\", \"name\", \"maxCluster\", 1, \"maxCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"update\", 3, \"click\"], [1, \"network\"], [\"treeContainer\", \"\"], [1, \"select\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 2)(6, \"form\", 3)(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Min Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.NetworkInitService.cluster.min = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Max Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.NetworkInitService.cluster.max = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function NetworksComponent_Template_button_click_13_listener() {\n          return ctx.updateCluster();\n        });\n        i0.ɵɵtext(14, \"Update Network\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"div\", 9, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 11)(18, \"h1\");\n        i0.ɵɵtext(19, \"Selections\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"hr\");\n        i0.ɵɵtemplate(21, NetworksComponent_div_21_Template, 4, 2, \"div\", 12)(22, NetworksComponent_div_22_Template, 7, 5, \"div\", 12);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.nameAuthor, \" Collaboration Network\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.NetworkInitService.cluster.min);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.NetworkInitService.cluster.max);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectEdge && ctx.selectEdge.type === \"edge\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\".conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.container-network[_ngcontent-%COMP%] {\\n  display: flex;\\n  margin-bottom: 50px;\\n}\\n\\n.clusterNetwork[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.minCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.maxCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.update[_ngcontent-%COMP%] {\\n  padding: 4px 10px;\\n  background-color: rgb(0, 22, 68);\\n  color: #ffffff;\\n  border: none;\\n  border-radius: 4px;\\n  margin-left: 10px;\\n}\\n\\n.update[_ngcontent-%COMP%]:hover {\\n  transform: scale(1.1);\\n  transition: transform 0.3s ease;\\n}\\n\\n.cluster[_ngcontent-%COMP%] {\\n  margin-top: 50px;\\n}\\n\\n.network[_ngcontent-%COMP%] {\\n  max-width: 1500px;\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #e0e0e0;\\n  box-sizing: border-box;\\n  margin-top: 10px;\\n  margin-bottom: 50px;\\n  box-shadow: 0px 0px 5px 2px rgba(0, 22, 68, 0.3);\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 35px;\\n  margin-bottom: 0;\\n}\\n\\n.select[_ngcontent-%COMP%] {\\n  width: 280px;\\n  margin-top: 80px;\\n  margin-left: 20px;\\n  margin-right: 10px;\\n  margin-bottom: 50px;\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #f9f9f9;\\n  padding-left: 20px;\\n  padding-right: 20px;\\n  padding-bottom: 20px;\\n}\\n\\nhr[_ngcontent-%COMP%] {\\n  width: 50%;\\n  border-width: 1px;\\n  border-color: black;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsdUJBQUE7QUFDSjs7QUFFQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtBQUNKOztBQUVBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0FBQ0o7O0FBRUE7RUFDSSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGlCQUFBO0VBQ0EsZ0NBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7QUFDSjs7QUFFQTtFQUNJLHFCQUFBO0VBQ0EsK0JBQUE7QUFDSjs7QUFFQTtFQUNJLGdCQUFBO0FBQ0o7O0FBRUE7RUFDSSxpQkFBQTtFQUNBLGdDQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLHNCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGdEQUFBO0FBQ0o7O0FBRUE7RUFDSSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksWUFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0NBQUE7RUFDQSxtQkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtFQUNBLG9CQUFBO0FBQ0o7O0FBRUE7RUFDSSxVQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRlaW5lcntcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uY29udGFpbmVyLW5ldHdvcmsge1xuICAgIGRpc3BsYXk6IGZsZXg7IFxuICAgIG1hcmdpbi1ib3R0b206IDUwcHggO1xufVxuXG4uY2x1c3Rlck5ldHdvcmsge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLm1pbkNsdXN0ZXJ7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIHdpZHRoOiA1MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG59XG5cbi5tYXhDbHVzdGVye1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB3aWR0aDogNTBweDtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xufVxuXG4udXBkYXRle1xuICAgIHBhZGRpbmc6IDRweCAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAyMiwgNjgpO1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG5cbi51cGRhdGU6aG92ZXIge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlO1xuICB9XG5cbi5jbHVzdGVye1xuICAgIG1hcmdpbi10b3A6IDUwcHg7XG59XG5cbi5uZXR3b3JrIHtcbiAgICBtYXgtd2lkdGg6IDE1MDBweDtcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMjIsIDY4KTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7IFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggNXB4IDJweCByZ2JhKDAsIDIyLCA2OCwgMC4zKTsgXG59XG5cbmgxe1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDM1cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbn1cblxuLnNlbGVjdCB7XG4gICAgd2lkdGg6IDI4MHB4O1xuICAgIG1hcmdpbi10b3A6IDgwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7IFxuICAgIG1hcmdpbi1yaWdodDogMTBweDsgXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDsgXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDIyLCA2OCk7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDsgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgcGFkZGluZy1yaWdodDogMjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbn1cblxuaHJ7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBib3JkZXItd2lkdGg6IDFweDsgXG4gICAgYm9yZGVyLWNvbG9yOiBibGFjaztcbn1cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","ctx_r5","selectNode","nodes","edge_r4","ctx_r6","ɵɵtextInterpolate","publication_r10","ɵɵtemplate","NetworksComponent_div_21_div_3_div_1_Template","NetworksComponent_div_21_div_3_div_2_Template","NetworksComponent_div_21_div_3_li_4_Template","ɵɵproperty","ctx_r3","number","publicationsNode","NetworksComponent_div_21_div_3_Template","ɵɵtextInterpolate1","ctx_r1","edges","ctx_r11","selectEdge","edge","from","to","ctx_r12","publication_r14","NetworksComponent_div_22_div_3_Template","NetworksComponent_div_22_div_4_Template","NetworksComponent_div_22_li_6_Template","ctx_r2","publicationsEdge","NetworksComponent","constructor","NetworkService","NetworkInitService","minCluster","maxCluster","menuStatus","objectKeys","Object","keys","data","selectedData","ngOnInit","nameAuthor","selectedAuthors","networkOptions","getNetworkOptions","height","getNodes","getEdges","network","treeContainer","nativeElement","on","params","onSelect","onClick","ngOnDestroy","destroy","updateCluster","treeContainerPos","offsetTop","window","scrollTo","top","behavior","length","onClickEdge","edgeId","get","type","researcherName","nameAuthors","map","author","uniquePublicationsSet","Set","isNaN","Number","researcher","publications","forEach","publication","add","uniquePublications","Array","console","log","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","push","completeAuthors","authorComplete","result","pointer","prevSelectNode","esStringNumero","str","_","ɵɵdirectiveInject","i1","i2","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵelement","ɵɵlistener","NetworksComponent_Template_input_ngModelChange_9_listener","$event","cluster","min","NetworksComponent_Template_input_ngModelChange_12_listener","max","NetworksComponent_Template_button_click_13_listener","NetworksComponent_div_21_Template","NetworksComponent_div_22_Template"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.ts","/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { NetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { NetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n  nameAuthor: any;\n\n  minCluster = 0;\n  maxCluster = 0;\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  number = false;\n  publicationsEdge: { [key: string]: string[] } = {};\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private NetworkService: NetworkService,\n    public NetworkInitService: NetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nameAuthor = this.NetworkInitService.selectedAuthors;\n    \n\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  updateCluster(): void {\n\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n\n  }\n\n  // Function to differentiate the selection of edges and nodes\n  private onClick(params: any): void {\n\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n\n  // Function so that common publications appear when clicking on an edge\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publicationsEdge = {};\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map((author: any) => {\n      \n      var uniquePublicationsSet = new Set();\n\n      if(isNaN(Number(author.researcher))){\n        this.number = false;\n      } else{\n        this.number = true;\n      }\n\n      if (author.researcher === researcherName) {\n\n        author.publications.forEach((publication: any) => {\n          uniquePublicationsSet.add(publication);\n        });\n\n        if(isNaN(Number(author.researcher))){\n          this.number = false;\n        } \n        else{\n          this.number = true;\n        }\n\n        if(isNaN(Number(author.researcher))){\n          this.number = false;\n        } else{\n          this.number = true;\n        }\n\n        var uniquePublications: any = Array.from(uniquePublicationsSet);\n\n        this.publicationsEdge[author.researcher] = uniquePublications;\n        console.log(this.publicationsEdge[author.researcher])\n      }\n      return author;\n    });\n    \n\n    this.selectNode = null;\n \n  }\n\n  // Function so that common publications appear when clicking on an node\n  private onSelect(params: any): void {\n\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n   \n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          \n\n          this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map((author: any) => {\n        \n\n            if(isNaN(Number(author.researcher))){\n              this.number = false;\n            } else{\n              this.number = true;\n            }\n\n            console.log(this.number)\n            if (author.researcher === edge.to) {\n\n              var uniquePublicationsSet = new Set();\n\n              if(this.number == true){\n\n                this.NetworkInitService.completeAuthors.forEach((authorComplete :any) => {\n\n                  if(author.publications.length == authorComplete.publications.length){\n                    author.publication.add(authorComplete.researcher)\n                  }\n                });   \n\n                author.publications.forEach((publication: any) => {\n                  uniquePublicationsSet.add(publication);\n                });\n\n              } else {\n\n                var uniquePublications: any = []\n                author.publications.forEach((publication: any) => {\n                   uniquePublicationsSet.add(publication);\n                });   \n  \n                uniquePublications = Array.from(uniquePublicationsSet);\n  \n                this.publicationsNode[author.researcher] = uniquePublications;\n              }\n     \n            }\n            return author;\n\n          });\n\n        }\n\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n\n   esStringNumero(str: any): boolean {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n}\n\n","<div class=\"container\">\n\n  <!-- Title -->\n  <h1>{{nameAuthor}} Collaboration Network</h1>\n\n  <hr>\n\n  <!-- Container Network -->\n  <div class=\"container-network\">\n\n    <div class=\"clusterNetwork\">\n\n      <!-- Cluster settings -->\n      <form class=\"cluster\" fxLayoutGap=\"10px\">\n        <label for=\"minCluster\">Min Cluster:</label>\n        <input class=\"minCluster\" type=\"number\" id=\"minCluster\" name=\"minCluster\" [(ngModel)]=\"NetworkInitService.cluster.min\">\n        \n        <label for=\"maxCluster\">Max Cluster:</label>\n        <input class=\"maxCluster\" type=\"number\" id=\"maxCluster\" name=\"maxCluster\" [(ngModel)]=\"NetworkInitService.cluster.max\">\n        \n        <button class=\"update\" type=\"button\" (click)=\"updateCluster()\">Update Network</button>\n      </form>\n\n      <!-- Network -->\n      <div class=\"network\" #treeContainer></div>\n\n    </div>\n\n    <div class=\"select\">\n      <h1>Selections</h1> \n      <hr>\n      <!-- Selected node -->\n      <div *ngIf=\"selectNode\">\n        <h2>Selected node {{ selectNode.nodes }}</h2> \n        <div *ngFor=\"let edge of selectNode.edges\">\n          <div *ngIf=\"!number\">Common publications of {{ selectNode.nodes }} and {{ edge }}:</div>\n          <div *ngIf=\"number\" >These authors have {{ selectNode.nodes }} publications in common with {{ edge }}:</div>\n          <ul>\n            <li *ngFor=\"let publication of publicationsNode[selectNode.nodes]\">{{ publication }}</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Selected edge -->\n      <div *ngIf=\"selectEdge && selectEdge.type === 'edge'\">\n        <h2> Selected edge {{ selectEdge.edge.from }} from {{ selectEdge.edge.to }}</h2> \n        <div *ngIf=\"!number\" > Common publications of  {{ selectEdge.edge.from }} and {{ selectEdge.edge.to }}:</div>\n        <div *ngIf=\"number\" >These authors have {{ selectEdge.edge.to }} publications in common with {{  selectEdge.edge.from }}:</div>\n        <ul>\n          <li *ngFor=\"let publication of  publicationsEdge[selectEdge.edge.to]\">{{ publication }}</li>\n        </ul>\n      </div>\n      \n    </div>   \n  </div>\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
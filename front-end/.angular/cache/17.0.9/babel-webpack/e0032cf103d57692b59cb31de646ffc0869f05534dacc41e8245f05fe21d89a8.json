{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n    this.selectedAuthors = [];\n  }\n  getNodes() {\n    this.nameAuthors = this.nameAuthors.map(author => {\n      let researcher = author.researcher;\n      researcher = researcher.replace(/&aacute;/g, 'á').replace(/&eacute;/g, 'é').replace(/&iacute;/g, 'í').replace(/&oacute;/g, 'ó').replace(/&uacute;/g, 'ú').replace(/&ntilde;/g, 'ñ').replace(/&Aacute;/g, 'Á').replace(/&Eacute;/g, 'É').replace(/&Iacute;/g, 'Í').replace(/&Oacute;/g, 'Ó').replace(/&Uacute;/g, 'Ú').replace(/&Ntilde;/g, 'Ñ').replace(/&agrave;/g, 'à').replace(/&egrave;/g, 'è').replace(/&ograve;/g, 'ò').replace(/&Agrave;/g, 'À').replace(/&Egrave;/g, 'È').replace(/&Ograve;/g, 'Ò').replace(/&acirc;/g, 'â').replace(/&Acirc;/g, 'Â').replace(/&atilde;/g, 'ã').replace(/&Atilde;/g, 'Ã').replace(/&ouml;/g, 'ö').replace(/&Ouml;/g, 'Ö');\n      author.researcher = researcher;\n      return author;\n    });\n    const distances = {};\n    this.nameAuthors.forEach(author => {\n      const distance = author === this.selectedAuthors[0] ? 0 : 500 / author.publications.length;\n      distances[author.researcher] = distance;\n    });\n    const nodesData = this.nameAuthors.map(author => {\n      let nodeSize = Math.floor(author.publications.length * 3) + 30;\n      if (author.researcher === this.selectedAuthors[0]) {\n        nodeSize = 100;\n      }\n      var distanceFromCenter = distances[author.researcher] * 5;\n      const angle = Math.random() * Math.PI * 2;\n      if (distanceFromCenter > 2000) {\n        distanceFromCenter = distanceFromCenter - 1200;\n      } else if (distanceFromCenter > 1500) {\n        distanceFromCenter = distanceFromCenter - 700;\n      } else if (distanceFromCenter > 1000) {\n        distanceFromCenter = distanceFromCenter - 400;\n      } else if (distanceFromCenter > 500) {\n        distanceFromCenter = distanceFromCenter - 100;\n      } else if (distanceFromCenter < 100 && distanceFromCenter != 0) {\n        distanceFromCenter = distanceFromCenter + 300;\n      }\n      const x = Math.cos(angle) * distanceFromCenter;\n      const y = Math.sin(angle) * distanceFromCenter;\n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: nodeSize,\n          color: \"#ffffff\"\n        },\n        x: x,\n        y: y\n      };\n    });\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== this.selectedAuthors[0]).map(author => {\n      // Obtenemos el número de publicaciones del autor y lo convertimos en cadena\n      const numPublications = author.publications.length.toString();\n      return {\n        from: this.selectedAuthors[0],\n        to: author.researcher,\n        label: numPublications\n      };\n    });\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","selectedAuthors","getNodes","map","author","researcher","replace","distances","forEach","distance","publications","length","nodesData","nodeSize","Math","floor","distanceFromCenter","angle","random","PI","x","cos","y","sin","id","label","font","size","color","nodes","getEdges","edgesData","filter","numPublications","toString","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n  public selectedAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    \n    this.nameAuthors = this.nameAuthors.map((author: any) => {\n      let researcher = author.researcher; \n  \n      researcher = researcher.replace(/&aacute;/g, 'á')\n          .replace(/&eacute;/g, 'é')\n          .replace(/&iacute;/g, 'í')\n          .replace(/&oacute;/g, 'ó')\n          .replace(/&uacute;/g, 'ú')\n          .replace(/&ntilde;/g, 'ñ')\n          .replace(/&Aacute;/g, 'Á')\n          .replace(/&Eacute;/g, 'É')\n          .replace(/&Iacute;/g, 'Í')\n          .replace(/&Oacute;/g, 'Ó')\n          .replace(/&Uacute;/g, 'Ú')\n          .replace(/&Ntilde;/g, 'Ñ')\n          .replace(/&agrave;/g, 'à')\n          .replace(/&egrave;/g, 'è')\n          .replace(/&ograve;/g, 'ò')\n          .replace(/&Agrave;/g, 'À')\n          .replace(/&Egrave;/g, 'È')\n          .replace(/&Ograve;/g, 'Ò')\n          .replace(/&acirc;/g, 'â')\n          .replace(/&Acirc;/g, 'Â')\n          .replace(/&atilde;/g, 'ã')\n          .replace(/&Atilde;/g, 'Ã')\n          .replace(/&ouml;/g, 'ö')\n          .replace(/&Ouml;/g, 'Ö');\n  \n      author.researcher = researcher;\n  \n      return author;\n  });\n\n    const distances: { [key: string]: number } = {};\n    this.nameAuthors.forEach((author: any) => {\n      const distance = author === this.selectedAuthors[0] ? 0 : 500 / author.publications.length ;\n      distances[author.researcher] = distance;\n    });\n\n    const nodesData: Node[] = this.nameAuthors.map((author: any) => {\n      let nodeSize = Math.floor(author.publications.length * 3) + 30;\n      if (author.researcher === this.selectedAuthors[0]) {\n          nodeSize = 100; \n      }\n\n      var distanceFromCenter = distances[author.researcher] * 5\n      const angle = Math.random() * Math.PI * 2;\n\n      if(distanceFromCenter > 2000 ){\n        distanceFromCenter =  distanceFromCenter - 1200;\n      }\n      else if(distanceFromCenter > 1500 ){\n        distanceFromCenter =  distanceFromCenter - 700;\n      }\n      else if(distanceFromCenter > 1000 ){\n        distanceFromCenter =  distanceFromCenter - 400;\n      }\n      else if(distanceFromCenter > 500 ){\n        distanceFromCenter =  distanceFromCenter - 100;\n      }\n      else if(distanceFromCenter < 100 && distanceFromCenter != 0){\n        distanceFromCenter = distanceFromCenter + 300;\n      }\n      \n      const x = Math.cos(angle) * distanceFromCenter;\n      const y = Math.sin(angle) * distanceFromCenter;\n\n      return {\n        id: author.researcher,\n        label: author.researcher,\n        font: {\n          size: nodeSize,\n          color: \"#ffffff\"\n        },\n        x: x,\n        y: y\n      };\n    });\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n\n  getEdges(): DataSet<Edge> {\n\n    const edgesData: Edge[] = this.nameAuthors\n    .filter((author: { researcher: any; }) => author.researcher !== this.selectedAuthors[0])\n    .map((author: { publications: string | any[]; researcher: any; }) => {\n      // Obtenemos el número de publicaciones del autor y lo convertimos en cadena\n      const numPublications = author.publications.length.toString();\n      return { from: this.selectedAuthors[0], to: author.researcher, label: numPublications };\n    });\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n}\n  \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
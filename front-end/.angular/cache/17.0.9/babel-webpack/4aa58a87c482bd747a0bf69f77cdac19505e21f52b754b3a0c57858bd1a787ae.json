{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n    this.selectedAuthors = [];\n    this.cluster = {\n      min: 3,\n      max: 5\n    };\n  }\n  // Function to create Nodes\n  getNodes() {\n    const centerNodeId = this.selectedAuthors[0];\n    this.nameAuthors = this.nameAuthors.map(author => {\n      let researcher = author.researcher;\n      researcher = researcher.replace(/&aacute;/g, 'á').replace(/&eacute;/g, 'é').replace(/&iacute;/g, 'í').replace(/&oacute;/g, 'ó').replace(/&uacute;/g, 'ú').replace(/&ntilde;/g, 'ñ').replace(/&Aacute;/g, 'Á').replace(/&Eacute;/g, 'É').replace(/&Iacute;/g, 'Í').replace(/&Oacute;/g, 'Ó').replace(/&Uacute;/g, 'Ú').replace(/&Ntilde;/g, 'Ñ').replace(/&agrave;/g, 'à').replace(/&egrave;/g, 'è').replace(/&ograve;/g, 'ò').replace(/&Agrave;/g, 'À').replace(/&Egrave;/g, 'È').replace(/&Ograve;/g, 'Ò').replace(/&acirc;/g, 'â').replace(/&Acirc;/g, 'Â').replace(/&atilde;/g, 'ã').replace(/&Atilde;/g, 'Ã').replace(/&ouml;/g, 'ö').replace(/&Ouml;/g, 'Ö');\n      author.researcher = researcher;\n      return author;\n    });\n    // Group authors by the number of publications less than cluster.min\n    const groupedAuthors = {};\n    this.nameAuthors.forEach(author => {\n      if (author.publications.length < this.cluster.min) {\n        const publicationCount = author.publications.length.toString();\n        if (!groupedAuthors[publicationCount]) {\n          groupedAuthors[publicationCount] = [];\n        }\n        groupedAuthors[publicationCount].push(author.researcher);\n      }\n    });\n    // Create new authors for each group\n    Object.keys(groupedAuthors).forEach(publicationCount => {\n      const authors = groupedAuthors[publicationCount];\n      const newAuthor = {\n        researcher: publicationCount,\n        publications: authors\n      };\n      this.nameAuthors.push(newAuthor);\n    });\n    // Filter out authors with publications less than cluster.min\n    this.nameAuthors = this.nameAuthors.filter(author => author.publications.length >= this.cluster.min);\n    console.log(this.nameAuthors);\n    const authorWithMostPublications = this.nameAuthors.reduce((prevAuthor, currentAuthor) => {\n      if (currentAuthor.researcher !== this.selectedAuthors[0]) {\n        if (!prevAuthor || currentAuthor.publications.length > prevAuthor.publications.length) {\n          return currentAuthor;\n        }\n      }\n      return prevAuthor;\n    }, null);\n    const authorWithLeastPublications = this.nameAuthors.reduce((prevAuthor, currentAuthor) => {\n      return prevAuthor.publications.length < currentAuthor.publications.length ? prevAuthor : currentAuthor;\n    });\n    const maxPublications = authorWithMostPublications.publications.length;\n    const minPublications = authorWithLeastPublications.publications.length;\n    let distances = {};\n    this.nameAuthors.forEach(author => {\n      if (author.researcher != this.selectedAuthors[0]) {\n        if (maxPublications == minPublications) {\n          distances[author.researcher] = 250;\n        } else {\n          const proportion = (maxPublications - author.publications.length) / (maxPublications - minPublications);\n          const distance = (Math.pow(proportion, 4) * 300 + 220) * 4;\n          distances[author.researcher] = distance;\n        }\n      }\n    });\n    const sortedAuthors = this.nameAuthors.slice().sort((a, b) => {\n      return a.publications.length - b.publications.length;\n    });\n    const totalAuthors = sortedAuthors.length;\n    const angleStep = Math.PI * 2 / totalAuthors;\n    let currentAngle = 0;\n    const nodesData = sortedAuthors.map(author => {\n      let nodeSize = Math.floor(author.publications.length * 4) + 60;\n      if (author.researcher === this.selectedAuthors[0]) {\n        nodeSize = nodeSize + 50;\n      }\n      if (nodeSize > 200) {\n        nodeSize = 200;\n      }\n      var distanceFromCenter = 0;\n      if (this.selectedAuthors[0] != author.researcher) {\n        var distanceFromCenter = distances[author.researcher];\n        const x = Math.cos(currentAngle) * distanceFromCenter;\n        const y = Math.sin(currentAngle) * distanceFromCenter;\n        console.log(author.researcher);\n        console.log(x);\n        console.log(y);\n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: x,\n          y: y\n        };\n      } else {\n        console.log(author.researcher);\n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: 0,\n          y: 0\n        };\n      }\n    });\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  // Function to create Edges\n  getEdges() {\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== this.selectedAuthors[0]).map(author => {\n      const numPublications = author.publications.length.toString();\n      return {\n        from: this.selectedAuthors[0],\n        to: author.researcher,\n        label: numPublications\n      };\n    });\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","selectedAuthors","cluster","min","max","getNodes","centerNodeId","map","author","researcher","replace","groupedAuthors","forEach","publications","length","publicationCount","toString","push","Object","keys","authors","newAuthor","filter","console","log","authorWithMostPublications","reduce","prevAuthor","currentAuthor","authorWithLeastPublications","maxPublications","minPublications","distances","proportion","distance","Math","pow","sortedAuthors","slice","sort","a","b","totalAuthors","angleStep","PI","currentAngle","nodesData","nodeSize","floor","distanceFromCenter","x","cos","y","sin","id","label","font","size","color","nodes","getEdges","edgesData","numPublications","from","to","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataSet, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n  public selectedAuthors:any = [];\n  private cluster: { min: number, max: number} =  { min: 3, max: 5}\n\n  // Function to create Nodes\n  getNodes(): DataSet<Node> {\n\n    const centerNodeId = this.selectedAuthors[0];\n   \n\n    this.nameAuthors = this.nameAuthors.map((author: any) => {\n      let researcher = author.researcher; \n  \n      researcher = researcher.replace(/&aacute;/g, 'á')\n          .replace(/&eacute;/g, 'é')\n          .replace(/&iacute;/g, 'í')\n          .replace(/&oacute;/g, 'ó')\n          .replace(/&uacute;/g, 'ú')\n          .replace(/&ntilde;/g, 'ñ')\n          .replace(/&Aacute;/g, 'Á')\n          .replace(/&Eacute;/g, 'É')\n          .replace(/&Iacute;/g, 'Í')\n          .replace(/&Oacute;/g, 'Ó')\n          .replace(/&Uacute;/g, 'Ú')\n          .replace(/&Ntilde;/g, 'Ñ')\n          .replace(/&agrave;/g, 'à')\n          .replace(/&egrave;/g, 'è')\n          .replace(/&ograve;/g, 'ò')\n          .replace(/&Agrave;/g, 'À')\n          .replace(/&Egrave;/g, 'È')\n          .replace(/&Ograve;/g, 'Ò')\n          .replace(/&acirc;/g, 'â')\n          .replace(/&Acirc;/g, 'Â')\n          .replace(/&atilde;/g, 'ã')\n          .replace(/&Atilde;/g, 'Ã')\n          .replace(/&ouml;/g, 'ö')\n          .replace(/&Ouml;/g, 'Ö');\n  \n      author.researcher = researcher;\n  \n      return author;\n    });\n    \n    // Group authors by the number of publications less than cluster.min\n    const groupedAuthors: { [key: string]: string[] } = {};\n    this.nameAuthors.forEach((author: { publications: string | any[]; researcher: string; }) => {\n        if (author.publications.length < this.cluster.min) {\n            const publicationCount = author.publications.length.toString();\n            if (!groupedAuthors[publicationCount]) {\n                groupedAuthors[publicationCount] = [];\n            }\n            groupedAuthors[publicationCount].push(author.researcher);\n        }\n    });\n\n    // Create new authors for each group\n    Object.keys(groupedAuthors).forEach(publicationCount => {\n        const authors = groupedAuthors[publicationCount];\n        const newAuthor = { researcher: publicationCount, publications: authors };\n        this.nameAuthors.push(newAuthor);\n    });\n\n    // Filter out authors with publications less than cluster.min\n    this.nameAuthors = this.nameAuthors.filter((author: { publications: string | any[]; }) => author.publications.length >= this.cluster.min);\n\n    console.log(this.nameAuthors)\n        \n\n    const authorWithMostPublications = this.nameAuthors.reduce((prevAuthor: any, currentAuthor: any) => {\n      if (currentAuthor.researcher !== this.selectedAuthors[0]) {\n          if (!prevAuthor || currentAuthor.publications.length > prevAuthor.publications.length) {\n              return currentAuthor;\n          }\n      }\n      return prevAuthor;\n    }, null);\n\n    const authorWithLeastPublications = this.nameAuthors.reduce((prevAuthor: { publications: string | any[]; }, currentAuthor: { publications: string | any[]; }) => {\n      return (prevAuthor.publications.length < currentAuthor.publications.length) ? prevAuthor : currentAuthor;\n    });\n\n    const maxPublications = authorWithMostPublications.publications.length;\n    const minPublications = authorWithLeastPublications.publications.length;\n\n    let distances: { [key: string]: number } = {};\n    this.nameAuthors.forEach((author: any) => {\n        if (author.researcher != this.selectedAuthors[0]) {\n            if(maxPublications == minPublications){ \n              distances[author.researcher] = 250;\n            } else{\n              const proportion = (maxPublications - author.publications.length) / (maxPublications - minPublications);\n              const distance = (Math.pow(proportion, 4) * 300 + 220) * 4; \n              distances[author.researcher] = distance;\n            }\n        }\n    });\n\n    const sortedAuthors = this.nameAuthors.slice().sort((a: any, b: any) => {\n      return a.publications.length - b.publications.length;\n    });\n\n    const totalAuthors = sortedAuthors.length;\n    const angleStep = (Math.PI * 2) / totalAuthors;\n    let currentAngle = 0;\n\n    const nodesData: Node[] = sortedAuthors.map((author: any) => {\n\n      let nodeSize = Math.floor(author.publications.length * 4) + 60;\n   \n\n      if (author.researcher === this.selectedAuthors[0]) {\n          nodeSize = nodeSize + 50; \n      }\n      if(nodeSize > 200){\n        nodeSize = 200\n      }\n\n      var distanceFromCenter = 0;\n\n      if(this.selectedAuthors[0] != author.researcher){\n        var distanceFromCenter = distances[author.researcher];\n\n        const x = Math.cos(currentAngle) * distanceFromCenter ;\n        const y = Math.sin(currentAngle) * distanceFromCenter ;\n        console.log(author.researcher)\n        console.log(x)\n        console.log(y)\n        \n  \n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: x,\n          y: y\n        };\n\n      } else{\n\n        console.log(author.researcher)\n        \n        return {\n          id: author.researcher,\n          label: author.researcher,\n          font: {\n            size: nodeSize,\n            color: \"#ffffff\"\n          },\n          x: 0,\n          y: 0\n        };\n      }\n\n    });\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  // Function to create Edges\n  getEdges(): DataSet<Edge> {\n\n    const edgesData: Edge[] = this.nameAuthors\n    .filter((author: { researcher: any; }) => author.researcher !== this.selectedAuthors[0])\n    .map((author: { publications: string | any[]; researcher: any; }) => {\n      const numPublications = author.publications.length.toString();\n      return { from: this.selectedAuthors[0], to: author.researcher, label: numPublications };\n    });\n\n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n}\n  \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
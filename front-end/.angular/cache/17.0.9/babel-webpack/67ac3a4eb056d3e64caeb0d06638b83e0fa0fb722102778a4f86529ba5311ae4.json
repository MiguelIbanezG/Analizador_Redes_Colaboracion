{"ast":null,"code":"import { DataSet } from 'vis';\nimport * as i0 from \"@angular/core\";\nexport class AppNetworkInitService {\n  constructor() {\n    this.nameAuthors = [];\n  }\n  getNodes() {\n    console.log(this.nameAuthors);\n    const nodesData = this.nameAuthors.map(author => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications\n    }));\n    const nodes = new DataSet(nodesData);\n    return nodes;\n  }\n  getEdges() {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a, b) => b.publications.length - a.publications.length);\n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData = this.nameAuthors.filter(author => author.researcher !== authorWithMostPublications.researcher).map(author => ({\n      from: authorWithMostPublications.researcher,\n      to: author.researcher\n    }));\n    // También necesitas crear una arista para conectar al autor con más publicaciones consigo mismo\n    edgesData.push({\n      from: authorWithMostPublications.researcher,\n      to: authorWithMostPublications.researcher\n    });\n    const edges = new DataSet(edgesData);\n    return edges;\n  }\n  static #_ = this.ɵfac = function AppNetworkInitService_Factory(t) {\n    return new (t || AppNetworkInitService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkInitService,\n    factory: AppNetworkInitService.ɵfac\n  });\n}","map":{"version":3,"names":["DataSet","AppNetworkInitService","constructor","nameAuthors","getNodes","console","log","nodesData","map","author","id","researcher","label","value","publications","nodes","getEdges","sortedAuthors","sort","a","b","length","authorWithMostPublications","edgesData","filter","from","to","push","edges","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.init.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n@Injectable()\nexport class AppNetworkInitService {\n\n  public nameAuthors:any = [];\n\n  getNodes(): DataSet<Node> {\n    console.log(this.nameAuthors)\n    const nodesData: Node[] = this.nameAuthors.map((author: { researcher: any; publications: any; }) => ({\n      id: author.researcher,\n      label: author.researcher,\n      value: author.publications\n    }));\n\n    const nodes: DataSet<Node> = new DataSet(nodesData);\n    return nodes;\n  }\n\n  getEdges(): DataSet<Edge> {\n    // Ordenar los autores por el número de publicaciones en orden descendente\n    const sortedAuthors = this.nameAuthors.sort((a: { publications: string | any[]; }, b: { publications: string | any[]; }) => b.publications.length - a.publications.length);\n  \n    // Tomar al primer autor de la lista, que será el autor con más publicaciones\n    const authorWithMostPublications = sortedAuthors[0];\n  \n    // Generar aristas conectando al autor con más publicaciones con todos los demás autores\n    const edgesData: Edge[] = this.nameAuthors.filter((author: { researcher: any; }) =>\n      author.researcher !== authorWithMostPublications.researcher\n    ).map((author: { researcher: any; }) =>\n      ({ from: authorWithMostPublications.researcher, to: author.researcher })\n    );\n\n  \n    // También necesitas crear una arista para conectar al autor con más publicaciones consigo mismo\n    edgesData.push({ from: authorWithMostPublications.researcher, to: authorWithMostPublications.researcher });\n  \n    const edges: DataSet<Edge> = new DataSet(edgesData);\n    return edges;\n  }\n  \n\n}\n"],"mappings":"AACA,SAAkBA,OAAO,QAAqC,KAAK;;AAGnE,OAAM,MAAOC,qBAAqB;EADlCC,YAAA;IAGS,KAAAC,WAAW,GAAO,EAAE;;EAE3BC,QAAQA,CAAA;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;IAC7B,MAAMI,SAAS,GAAW,IAAI,CAACJ,WAAW,CAACK,GAAG,CAAEC,MAA+C,KAAM;MACnGC,EAAE,EAAED,MAAM,CAACE,UAAU;MACrBC,KAAK,EAAEH,MAAM,CAACE,UAAU;MACxBE,KAAK,EAAEJ,MAAM,CAACK;KACf,CAAC,CAAC;IAEH,MAAMC,KAAK,GAAkB,IAAIf,OAAO,CAACO,SAAS,CAAC;IACnD,OAAOQ,KAAK;EACd;EAEAC,QAAQA,CAAA;IACN;IACA,MAAMC,aAAa,GAAG,IAAI,CAACd,WAAW,CAACe,IAAI,CAAC,CAACC,CAAoC,EAAEC,CAAoC,KAAKA,CAAC,CAACN,YAAY,CAACO,MAAM,GAAGF,CAAC,CAACL,YAAY,CAACO,MAAM,CAAC;IAE1K;IACA,MAAMC,0BAA0B,GAAGL,aAAa,CAAC,CAAC,CAAC;IAEnD;IACA,MAAMM,SAAS,GAAW,IAAI,CAACpB,WAAW,CAACqB,MAAM,CAAEf,MAA4B,IAC7EA,MAAM,CAACE,UAAU,KAAKW,0BAA0B,CAACX,UAAU,CAC5D,CAACH,GAAG,CAAEC,MAA4B,KAChC;MAAEgB,IAAI,EAAEH,0BAA0B,CAACX,UAAU;MAAEe,EAAE,EAAEjB,MAAM,CAACE;IAAU,CAAE,CAAC,CACzE;IAGD;IACAY,SAAS,CAACI,IAAI,CAAC;MAAEF,IAAI,EAAEH,0BAA0B,CAACX,UAAU;MAAEe,EAAE,EAAEJ,0BAA0B,CAACX;IAAU,CAAE,CAAC;IAE1G,MAAMiB,KAAK,GAAkB,IAAI5B,OAAO,CAACuB,SAAS,CAAC;IACnD,OAAOK,KAAK;EACd;EAAC,QAAAC,CAAA,G;qBApCU5B,qBAAqB;EAAA;EAAA,QAAA6B,EAAA,G;WAArB7B,qBAAqB;IAAA8B,OAAA,EAArB9B,qBAAqB,CAAA+B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
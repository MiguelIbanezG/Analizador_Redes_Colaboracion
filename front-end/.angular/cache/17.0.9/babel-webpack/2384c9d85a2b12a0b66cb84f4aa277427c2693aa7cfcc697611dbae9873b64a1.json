{"ast":null,"code":"import _asyncToGenerator from \"/home/miguel/Analizador_Redes_Colaboracion/interfaz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(apiService, router, stadisticsService, modalService, infoService, homeService) {\n    this.apiService = apiService;\n    this.router = router;\n    this.stadisticsService = stadisticsService;\n    this.modalService = modalService;\n    this.infoService = infoService;\n    this.homeService = homeService;\n    this.filtersString = '';\n    this.filtersBOX = '';\n    this.filtersList = [];\n    this.communities = [];\n    this.filterComunities = [];\n    this.currentConferences = [];\n    this.nameCommunity = '';\n    this.completeConference = [];\n    this.filteredResults = [];\n    this.filteredTitles = [];\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.selectAll = false;\n    this.selectDecades = false;\n    this.selectDecades2 = false;\n    this.selectDecades3 = false;\n    this.selectDecades4 = false;\n    this.conferenceOption = \"main\";\n    this.showYears = false;\n    this.showDecades = false;\n    this.repeated = false;\n    this.noResultsFoundConference = false;\n    this.noResultsFoundJournal = false;\n    this.showButtons = false;\n  }\n  ngOnInit() {\n    this.communities = this.homeService.Communities;\n  }\n  autocompleteConference(term) {\n    this.apiService.autocompleteConference(term).subscribe({\n      next: response => {\n        this.completeConference = response;\n      },\n      error: error => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n  isFilteringDisabled() {\n    return this.filtersList.length === 0 && this.homeService.Communities.every(community => !community.selected);\n  }\n  completeSuggestion(suggestion) {\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n      if (this.currentConferences.includes(filtros)) {\n        this.repeated = true;\n      } else {\n        this.repeated = false;\n      }\n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: response => {\n          if (response.length !== 0) {\n            this.noResultsFoundConference = false;\n            if (!this.filtersList.includes(filtros)) {\n              this.filtersList.push(filtros);\n              const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n              this.filtersList = this.filtersList.concat(newFilters);\n              this.filtersString = this.filtersList.join(',');\n            }\n          } else {\n            this.noResultsFoundConference = true;\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: response => {\n                if (response.length !== 0) {\n                  this.noResultsFoundJournal = false;\n                  if (!this.filtersList.includes(filtros)) {\n                    this.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n                    this.filtersList = this.filtersList.concat(newFilters);\n                    this.filtersString = this.filtersList.join(',');\n                  }\n                  for (const filter of this.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                      this.currentConferences.push(filter);\n                    }\n                    const filtersListSinDuplicados = this.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n                    this.currentConferences = filtersListSinDuplicados;\n                  }\n                } else {\n                  this.noResultsFoundJournal = true;\n                }\n              },\n              error: error => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n              this.currentConferences.push(filter);\n            }\n            const filtersListSinDuplicados = this.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n            this.currentConferences = filtersListSinDuplicados;\n          }\n        },\n        error: error => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n  selectSuggestion(suggestion) {\n    this.filtersBOX = suggestion;\n  }\n  deleteFilter(filter) {\n    const i = this.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.filtersList.splice(i, 1);\n      this.filtersString = this.filtersList.join(',');\n    }\n    const R = this.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.currentConferences.splice(i, 1);\n    }\n  }\n  deleteCommunity(communityToDelete) {\n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    for (const filter of communityToDelete.filtersList) {\n      const i = this.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.filtersList.splice(i, 1);\n        this.filtersString = this.filtersList.join(',');\n      }\n    }\n  }\n  createCommunity(filtersList) {\n    this.homeService.Communities.push({\n      name: this.nameCommunity,\n      filtersList: filtersList,\n      selected: false\n    });\n    this.communities = this.homeService.Communities;\n    this.closeModal();\n    this.nameCommunity = '';\n    this.filtersList = [];\n    this.currentConferences = [];\n  }\n  waitTitlesNoEmpty() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      while (!_this.filteredTitles || _this.filteredTitles.length === 0) {\n        yield new Promise(resolve => setTimeout(resolve, 100));\n      }\n    })();\n  }\n  execFunctionsYear() {\n    this.showButtons = true;\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.waitTitlesNoEmpty();\n    const uniqueTitles = [];\n    for (const title of this.filteredTitles) {\n      if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n        uniqueTitles.push(title);\n      }\n    }\n    this.toggleYears();\n  }\n  execFunctionsDecades() {\n    this.showButtons = true;\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.waitTitlesNoEmpty();\n    this.toggleDecades();\n  }\n  toggleYears() {\n    this.showYears = !this.showYears;\n    if (this.showDecades == true) {\n      this.showDecades = false;\n    }\n  }\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n    if (this.showYears == true) {\n      this.showYears = false;\n    }\n  }\n  clear() {\n    this.filteredTitles = [];\n    this.filtersList = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitlesJournal = [];\n    this.completeConference = [];\n    this.currentConferences = [];\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.showButtons = false;\n  }\n  getFilteredNodesConference() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString = this.filtersList.join(',');\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesConference(this.filtersList).subscribe({\n      next: response => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if (this.filteredTitlesConference.length < 1) {\n          this.filteredTitlesConference = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n        this.filteredTitles = [];\n        this.filteredTitles = [...this.filteredTitlesJournal, ...this.filteredTitlesConference];\n        const uniqueTitles = [];\n        for (const title of this.filteredTitles) {\n          if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n            uniqueTitles.push(title);\n          }\n        }\n        function compararPorAño(a, b) {\n          const yearA = parseInt(a.title);\n          const yearB = parseInt(b.title);\n          return yearA - yearB;\n        }\n        uniqueTitles.sort(compararPorAño);\n        this.filteredTitles = uniqueTitles;\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  getFilteredNodesJournal() {\n    this.homeService.Communities.forEach(community => {\n      if (community.selected == true) {\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      } else {\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    });\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString = this.filtersList.join(',');\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    this.apiService.getFilteredNodesJournal(this.filtersList).subscribe({\n      next: response => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if (this.filteredTitlesJournal.length < 1) {\n          this.filteredTitlesJournal = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundJournal = true;\n          } else {\n            this.noResultsFoundJournal = false;\n          }\n        }\n        this.filteredTitles = [];\n        this.filteredTitles = [...this.filteredTitlesJournal, ...this.filteredTitlesConference];\n        const uniqueTitles = [];\n        for (const title of this.filteredTitles) {\n          if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n            uniqueTitles.push(title);\n          }\n        }\n        function compararPorAño(a, b) {\n          const yearA = parseInt(a.title);\n          const yearB = parseInt(b.title);\n          return yearA - yearB;\n        }\n        uniqueTitles.sort(compararPorAño);\n        this.filteredTitles = uniqueTitles;\n      },\n      error: error => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n    });\n  }\n  existSelectTitle() {\n    let select = false;\n    if (this.filteredTitlesJournal.some(titulo => titulo.selected) || this.filteredTitlesConference.some(titulo => titulo.selected)) {\n      select = true;\n    }\n    return select;\n  }\n  selectAlls() {\n    if (this.filteredTitlesConference.length > 0 || this.filteredTitlesJournal.length > 0) {\n      for (let title of this.filteredTitlesJournal) {\n        title.selected = this.selectAll;\n      }\n      for (let title of this.filteredTitlesConference) {\n        title.selected = this.selectAll;\n      }\n    }\n  }\n  selectDecade() {\n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"1989\" || year.title == \"1990\" || year.title == \"1991\" || year.title == \"1992\" || year.title == \"1993\" || year.title == \"1994\" || year.title == \"1995\" || year.title == \"1996\" || year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      }\n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"1989\" || year.title == \"1990\" || year.title == \"1991\" || year.title == \"1992\" || year.title == \"1993\" || year.title == \"1994\" || year.title == \"1995\" || year.title == \"1996\" || year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      }\n    }\n  }\n  selectDecade2() {\n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2000\" || year.title == \"2001\" || year.title == \"2002\" || year.title == \"2003\" || year.title == \"2004\" || year.title == \"2005\" || year.title == \"2006\" || year.title == \"2007\" || year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      }\n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2000\" || year.title == \"2001\" || year.title == \"2002\" || year.title == \"2003\" || year.title == \"2004\" || year.title == \"2005\" || year.title == \"2006\" || year.title == \"2007\" || year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      }\n    }\n  }\n  selectDecade3() {\n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2010\" || year.title == \"2011\" || year.title == \"2012\" || year.title == \"2013\" || year.title == \"2014\" || year.title == \"2015\" || year.title == \"2016\" || year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      }\n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2010\" || year.title == \"2011\" || year.title == \"2012\" || year.title == \"2013\" || year.title == \"2014\" || year.title == \"2015\" || year.title == \"2016\" || year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      }\n    }\n  }\n  selectDecade4() {\n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2020\" || year.title == \"2021\" || year.title == \"2022\" || year.title == \"2023\" || year.title == \"2024\") {\n        year.selected = this.selectDecades4;\n      }\n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2020\" || year.title == \"2021\" || year.title == \"2022\" || year.title == \"2023\" || year.title == \"2024\") {\n        year.selected = this.selectDecades4;\n      }\n    }\n  }\n  titleChanged() {\n    let all = true;\n    for (let titulo1 of this.filteredTitles) {\n      for (let titulo of this.filteredTitlesJournal) {\n        if (titulo1.title == titulo.title) {\n          if (titulo1.selected == true) {\n            titulo.selected == true;\n          }\n        }\n      }\n      for (let titulo of this.filteredTitlesConference) {\n        if (titulo1.title == titulo.title) {\n          if (titulo1.selected == true) {\n            titulo.selected == true;\n          }\n        }\n      }\n    }\n    for (let titulo of this.filteredTitlesConference) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    for (let titulo of this.filteredTitlesJournal) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    this.selectAll = all;\n  }\n  activateLink() {\n    this.homeService.setActiveLinkStatistics(true);\n  }\n  generateStatistics() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const titles = _this2.filteredTitlesConference.filter(titulo => titulo.selected).map(titulo => titulo.pr_objeto);\n      const titles2 = _this2.filteredTitlesJournal.filter(titulo => titulo.selected && !_this2.filteredTitlesConference.map(titulo => titulo.title).includes(titulo.title)).map(titulo => titulo.pr_objeto);\n      const titles3 = [...titles, ...titles2];\n      const splitFilters = _this2.filtersString.split(',').map(filtersString => filtersString.trim());\n      _this2.stadisticsService.cleanTitles();\n      _this2.stadisticsService.addTitles(titles3);\n      _this2.stadisticsService.flagNameVenue(splitFilters);\n      _this2.activateLink();\n      _this2.router.navigateByUrl('/statistics');\n    })();\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template);\n  }\n  closeModal() {\n    this.modalRef?.hide();\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"names":["Component","HomeComponent","constructor","apiService","router","stadisticsService","modalService","infoService","homeService","filtersString","filtersBOX","filtersList","communities","filterComunities","currentConferences","nameCommunity","completeConference","filteredResults","filteredTitles","filteredTitlesJournal","filteredTitlesConference","selectAll","selectDecades","selectDecades2","selectDecades3","selectDecades4","conferenceOption","showYears","showDecades","repeated","noResultsFoundConference","noResultsFoundJournal","showButtons","ngOnInit","Communities","autocompleteConference","term","subscribe","next","response","error","console","isFilteringDisabled","length","every","community","selected","completeSuggestion","suggestion","trim","filtros","includes","getFilteredNodesConference","push","newFilters","filter","item","concat","join","getFilteredNodesJournal","filtersListSinDuplicados","valor","indice","self","indexOf","complete","selectSuggestion","deleteFilter","i","splice","R","deleteCommunity","communityToDelete","name","createCommunity","closeModal","waitTitlesNoEmpty","_this","_asyncToGenerator","Promise","resolve","setTimeout","execFunctionsYear","uniqueTitles","title","some","existingTitle","toggleYears","execFunctionsDecades","toggleDecades","clear","forEach","filterItem","value","index","map","Object","values","reduce","obj","yearNode","properties","pr_objeto","compararPorAño","a","b","yearA","parseInt","yearB","sort","existSelectTitle","select","titulo","selectAlls","selectDecade","year","selectDecade2","selectDecade3","selectDecade4","titleChanged","all","titulo1","activateLink","setActiveLinkStatistics","generateStatistics","_this2","titles","titles2","titles3","splitFilters","split","cleanTitles","addTitles","flagNameVenue","navigateByUrl","openModal","template","modalRef","show","hide","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/home/home.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { Observable, Subscription, map, startWith } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { StadisticsService } from '../services/stadistics.service';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { InfoService } from '../services/info.service';\nimport { HomeService } from '../services/home.service';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n\n  filtersString : string = '';\n  filtersBOX: string = '';\n  filtersList: string[] = [];\n  communities: { name: string, filtersList: string[], selected: boolean  }[] = [];\n  filterComunities: string[] = [];\n  currentConferences: string[] = [];\n  nameCommunity: string = '';\n  completeConference: string[] = [];\n  filteredResults: string[] = [];\n  filteredTitles: { title: string, pr_objeto: any, selected: boolean }[] = [];\n  filteredTitlesJournal: { title: string, pr_objeto: any, selected: boolean }[] = [];\n  filteredTitlesConference: { title: string, pr_objeto: any, selected: boolean }[] = [];\n  selectAll = false;\n  selectDecades = false;\n  selectDecades2 = false;\n  selectDecades3 = false;\n  selectDecades4 = false;\n  conferenceOption: string = \"main\";\n  showYears: boolean = false;\n  showDecades: boolean = false;\n  repeated: boolean = false;\n  noResultsFoundConference = false;\n  noResultsFoundJournal = false;\n  modalRef: BsModalRef | undefined;\n  showButtons = false;\n \n\n  constructor(\n    private apiService: ApiService, \n    private router: Router,\n    private stadisticsService: StadisticsService,\n    private modalService: BsModalService,\n    private infoService: InfoService,\n    public homeService: HomeService\n  ) { }\n  \n  ngOnInit() {\n    this.communities = this.homeService.Communities   \n  }\n\n  autocompleteConference(term: string): void {\n    this.apiService.autocompleteConference(term).subscribe({\n      next: (response: string[]) => {\n        this.completeConference = response;\n      },\n      error: (error: any) => {\n        console.error('Error in autocompleteConference', error);\n      }\n    });\n  }\n\n\n  isFilteringDisabled(): boolean {\n    return this.filtersList.length === 0 && this.homeService.Communities.every(community => !community.selected);\n  }\n\n  completeSuggestion(suggestion: string) {\n\n\n    if (suggestion.trim() !== '') {\n      const filtros = suggestion.trim();\n\n      if(this.currentConferences.includes(filtros)){\n        this.repeated = true;\n      }else{\n        this.repeated = false;\n      }\n    \n   \n   \n      this.apiService.getFilteredNodesConference([filtros]).subscribe({\n        next: (response: any[]) => {\n\n          if (response.length !== 0) {\n\n            this.noResultsFoundConference = false;\n\n            if (!this.filtersList.includes(filtros)) {\n              this.filtersList.push(filtros);\n              \n              const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n\n              this.filtersList = this.filtersList.concat(newFilters);\n              this.filtersString  = this.filtersList.join(','); \n            }\n          } else {\n\n            this.noResultsFoundConference = true;\n            this.apiService.getFilteredNodesJournal([filtros]).subscribe({\n              next: (response: any[]) => {\n      \n                if (response.length !== 0) {\n      \n                  this.noResultsFoundJournal = false;\n      \n                  if (!this.filtersList.includes(filtros)) {\n                    this.filtersList.push(filtros);\n                    const newFilters = this.filterComunities.filter(item => !this.filtersList.includes(item));\n      \n                    this.filtersList = this.filtersList.concat(newFilters);\n                    this.filtersString  = this.filtersList.join(','); \n                  }\n\n                  for (const filter of this.filtersList) {\n                    if (!this.filterComunities.includes(filter)) {\n                        this.currentConferences.push(filter);\n                   \n                    }\n        \n                    const filtersListSinDuplicados: string[] = this.currentConferences.filter((valor, indice, self) => {\n                      return self.indexOf(valor) === indice;\n                    });\n        \n                    this.currentConferences = filtersListSinDuplicados\n                  }   \n                } else {\n                  this.noResultsFoundJournal = true;\n                }\n               \n              },\n              error: (error: any) => {\n                console.error('Error in getFilteredNodesJournal:', error);\n              },\n              complete: () => {\n                this.filtersBOX = \"\";\n              }\n            });\n          }\n          for (const filter of this.filtersList) {\n            if (!this.filterComunities.includes(filter)) {\n                this.currentConferences.push(filter);\n           \n            }\n\n            const filtersListSinDuplicados: string[] = this.currentConferences.filter((valor, indice, self) => {\n              return self.indexOf(valor) === indice;\n            });\n\n            this.currentConferences = filtersListSinDuplicados\n          }   \n        },\n        error: (error: any) => {\n          console.error('Error in getFilteredNodesConference:', error);\n        },\n        complete: () => {\n          this.filtersBOX = \"\";\n        }\n      });\n    }\n  }\n\n  selectSuggestion(suggestion: string) {\n    this.filtersBOX = suggestion;\n  }\n\n  deleteFilter(filter: string) {\n    const i = this.filtersList.indexOf(filter);\n    if (i !== -1) {\n      this.filtersList.splice(i, 1); \n      this.filtersString = this.filtersList.join(',');\n    }\n\n    const R = this.currentConferences.indexOf(filter);\n    if (R !== -1) {\n      this.currentConferences.splice(i, 1); \n    }\n  }\n\n  deleteCommunity(communityToDelete: { name: string, filtersList: string[], selected: boolean }) {\n \n    this.homeService.Communities = this.homeService.Communities.filter(community => {\n\n      return !(community.name === communityToDelete.name && community.filtersList === communityToDelete.filtersList && community.selected === communityToDelete.selected);\n    });\n    \n    for (const filter of communityToDelete.filtersList) {\n            \n      const i = this.filtersList.indexOf(filter);\n      if (i !== -1) {\n        this.filtersList.splice(i, 1); \n        this.filtersString = this.filtersList.join(',');\n      }\n\n\n    }\n\n  }\n\n  createCommunity(filtersList: string[]){\n   \n    this.homeService.Communities.push({ name: this.nameCommunity, filtersList: filtersList, selected: false });\n    this.communities = this.homeService.Communities\n    this.closeModal()\n    this.nameCommunity = '';\n\n    this.filtersList = [];\n    this.currentConferences = [];\n\n  }\n\n  async waitTitlesNoEmpty() {\n    while (!this.filteredTitles || this.filteredTitles.length === 0 ) {\n      await new Promise(resolve => setTimeout(resolve, 100)); \n    }\n  }\n\n  execFunctionsYear(){\n    this.showButtons= true;\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.waitTitlesNoEmpty();\n    const uniqueTitles: { title: string; pr_objeto: any; selected: boolean; }[] = [];\n    \n    for (const title of this.filteredTitles) {\n        if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n            uniqueTitles.push(title);\n        }\n    }\n    this.toggleYears();\n  }\n\n  execFunctionsDecades(){\n    this.showButtons= true;\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitles = [];\n    this.getFilteredNodesJournal();\n    this.getFilteredNodesConference();\n    this.waitTitlesNoEmpty();\n    this.toggleDecades();\n  }\n\n  toggleYears() {\n    this.showYears = !this.showYears;\n      if(this.showDecades == true){\n        this.showDecades = false;\n      }\n  }\n\n  toggleDecades() {\n    this.showDecades = !this.showDecades;\n      if(this.showYears == true){\n        this.showYears = false;\n      }\n  }\n\n  clear(){\n    this.filteredTitles = [];\n    this.filtersList = [];\n    this.filteredTitlesConference = [];\n    this.filteredTitlesJournal = [];\n    this.completeConference = [];\n    this.currentConferences = [];\n    this.filteredTitlesJournal = [];\n    this.filteredTitlesConference = [];\n    this.showButtons= false;\n  }\n\n  getFilteredNodesConference() {\n\n    this.homeService.Communities.forEach(community => {\n\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    \n    });\n\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.filtersList.join(','); \n\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesConference(this.filtersList).subscribe({\n      next: (response: any[]) => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if(this.filteredTitlesConference.length < 1){\n          this.filteredTitlesConference = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundConference = true;\n          } else {\n            this.noResultsFoundConference = false;\n          }\n        }\n        this.filteredTitles = [];\n        this.filteredTitles = [...this.filteredTitlesJournal, ...this.filteredTitlesConference];\n        const uniqueTitles: { title: string; pr_objeto: any; selected: boolean; }[] = [];\n\n        for (const title of this.filteredTitles) {\n            if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n                uniqueTitles.push(title);\n            }\n        }\n\n        function compararPorAño(a: { title: string; }, b: { title: string; }) {\n          const yearA = parseInt(a.title);\n          const yearB = parseInt(b.title);\n          return yearA - yearB;\n        }\n\n        uniqueTitles.sort(compararPorAño);\n    \n        this.filteredTitles = uniqueTitles;\n        \n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n      \n    });\n\n  }\n\n  getFilteredNodesJournal() {\n\n    this.homeService.Communities.forEach(community => {\n\n      if(community.selected == true){\n        this.filterComunities = this.filterComunities.concat(community.filtersList);\n      }else{\n        this.filterComunities = this.filterComunities.filter(filterItem => !community.filtersList.includes(filterItem));\n        this.filtersList = this.filtersList.filter(filterItem => !community.filtersList.includes(filterItem));\n      }\n    \n    });\n\n    this.filtersList = this.filtersList.concat(this.filterComunities);\n    this.filtersString  = this.filtersList.join(','); \n\n    this.filtersList = this.filtersList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.filterComunities = this.filterComunities.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    this.apiService.getFilteredNodesJournal(this.filtersList).subscribe({\n      next: (response: any[]) => {\n        // this.resultadosFiltrados = response.map(item => JSON.stringify(item));\n        this.filteredResults = response.map(item => item);\n        if(this.filteredTitlesJournal.length < 1){\n          this.filteredTitlesJournal = Object.values(response.reduce((obj, item) => {\n            const yearNode = item.properties;\n            obj[yearNode.name] = {\n              title: yearNode.name,\n              pr_objeto: item,\n              selected: false\n            };\n            return obj;\n          }, {}));\n\n          if (this.filteredResults.length === 0) {\n            this.noResultsFoundJournal = true;\n          } else {\n            this.noResultsFoundJournal = false;\n          }\n        }\n        this.filteredTitles = [];\n        this.filteredTitles = [...this.filteredTitlesJournal, ...this.filteredTitlesConference];\n        const uniqueTitles: { title: string; pr_objeto: any; selected: boolean; }[] = [];\n\n        for (const title of this.filteredTitles) {\n            if (!uniqueTitles.some(existingTitle => existingTitle.title == title.title)) {\n                uniqueTitles.push(title);\n            }\n        }\n\n        function compararPorAño(a: { title: string; }, b: { title: string; }) {\n          const yearA = parseInt(a.title);\n          const yearB = parseInt(b.title);\n          return yearA - yearB;\n        }\n\n        uniqueTitles.sort(compararPorAño);\n    \n        this.filteredTitles = uniqueTitles;\n      },\n      error: (error: any) => {\n        console.error('Error al obtener los resultados filtrados:', error);\n      }\n      \n    });\n  }\n\n  existSelectTitle(): boolean {\n    let select = false;\n    if (this.filteredTitlesJournal.some(titulo => titulo.selected) || this.filteredTitlesConference.some(titulo => titulo.selected)){\n      select = true;\n    }\n    return select;\n  }\n\n  selectAlls() {\n    if (this.filteredTitlesConference.length > 0 || this.filteredTitlesJournal.length > 0){\n      for (let title of this.filteredTitlesJournal) {\n        title.selected = this.selectAll;\n      }\n      for (let title of this.filteredTitlesConference) {\n        title.selected = this.selectAll;\n      }\n    }\n  }\n\n  selectDecade() {\n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"1989\" || year.title == \"1990\" ||year.title == \"1991\" || year.title == \"1992\" ||\n      year.title == \"1993\" || year.title == \"1994\" ||year.title == \"1995\" || year.title == \"1996\" ||\n      year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      } \n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"1989\" || year.title == \"1990\" ||year.title == \"1991\" || year.title == \"1992\" ||\n      year.title == \"1993\" || year.title == \"1994\" ||year.title == \"1995\" || year.title == \"1996\" ||\n      year.title == \"1997\" || year.title == \"1998\" || year.title == \"1999\") {\n        year.selected = this.selectDecades;\n      } \n    }\n  }\n\n  selectDecade2() {\n  \n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2000\" || year.title == \"2001\" ||year.title == \"2002\" ||year.title == \"2003\" ||\n      year.title == \"2004\" || year.title == \"2005\" ||year.title == \"2006\" ||year.title == \"2007\" ||\n      year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      } \n    }\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2000\" || year.title == \"2001\" ||year.title == \"2002\" ||year.title == \"2003\" ||\n      year.title == \"2004\" || year.title == \"2005\" ||year.title == \"2006\" ||year.title == \"2007\" ||\n      year.title == \"2008\" || year.title == \"2009\") {\n        year.selected = this.selectDecades2;\n      } \n    }\n  }\n\n  selectDecade3() {\n  \n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2010\" ||year.title == \"2011\" ||year.title == \"2012\" ||\n      year.title == \"2013\" || year.title == \"2014\" ||year.title == \"2015\" || year.title == \"2016\" ||\n      year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      } \n    }\n\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2010\" ||year.title == \"2011\" ||year.title == \"2012\" ||\n      year.title == \"2013\" || year.title == \"2014\" ||year.title == \"2015\" || year.title == \"2016\" ||\n      year.title == \"2017\" || year.title == \"2018\" || year.title == \"2019\") {\n        year.selected = this.selectDecades3;\n      } \n    }\n  }\n\n  selectDecade4() {\n  \n    for (let year of this.filteredTitlesConference) {\n      if (year.title == \"2020\" ||year.title == \"2021\" ||year.title == \"2022\" ||\n      year.title == \"2023\" || year.title == \"2024\"){\n        year.selected = this.selectDecades4;\n      } \n    }\n\n    for (let year of this.filteredTitlesJournal) {\n      if (year.title == \"2020\" ||year.title == \"2021\" ||year.title == \"2022\" ||\n      year.title == \"2023\" || year.title == \"2024\"){\n        year.selected = this.selectDecades4;\n      } \n    }\n  }\n\n  titleChanged() {\n    let all = true;\n\n    for (let titulo1 of this.filteredTitles) {\n      for (let titulo of this.filteredTitlesJournal) {\n        if (titulo1.title == titulo.title) {\n          if(titulo1.selected == true){\n            titulo.selected == true;\n          }\n        }\n      }\n      for (let titulo of this.filteredTitlesConference) {\n        if (titulo1.title == titulo.title) {\n          if(titulo1.selected == true){\n            titulo.selected == true;\n          }\n        }\n      }\n    }\n\n    for (let titulo of this.filteredTitlesConference) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n    for (let titulo of this.filteredTitlesJournal) {\n      if (!titulo.selected) {\n        all = false;\n        break;\n      }\n    }\n\n    this.selectAll = all;\n  }\n\n  activateLink() {\n    this.homeService.setActiveLinkStatistics(true);\n  }\n\n\n  async generateStatistics() {\n\n    const titles = this.filteredTitlesConference.\n    filter(titulo => titulo.selected).map(titulo => titulo.pr_objeto);\n    \n    const titles2 = this.filteredTitlesJournal\n    .filter(titulo => titulo.selected && !this.filteredTitlesConference.map(titulo => titulo.title).includes(titulo.title))\n    .map(titulo => titulo.pr_objeto);\n    const titles3 = [...titles, ...titles2];\n    const splitFilters = this.filtersString.split(',').map(filtersString => filtersString.trim());\n    this.stadisticsService.cleanTitles();\n    this.stadisticsService.addTitles(titles3);\n    this.stadisticsService.flagNameVenue(splitFilters)\n\n    this.activateLink();\n\n    this.router.navigateByUrl('/statistics');\n\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template)\n  }\n\n  closeModal() {\n    this.modalRef?.hide();\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AppNetworkService {\n  getNetworkOptions(nodes) {\n    return {\n      autoResize: true,\n      height: \"600px\",\n      width: \"100%\",\n      physics: {\n        enabled: true\n      },\n      layout: {\n        hierarchical: {\n          enabled: true,\n          sortMethod: 'directed',\n          direction: 'UD',\n          nodeSpacing: 150,\n          levelSeparation: 300 // Increase the separation between levels of the hierarchy\n        }\n      },\n\n      nodes: {\n        shape: 'dot',\n        font: {\n          size: 20,\n          color: \"#ffffff\"\n        },\n        color: {\n          background: \"rgb(0, 22, 68)\",\n          border: \"#000000\",\n          highlight: {\n            background: \"#00ff00\",\n            border: \"#000000\"\n          },\n          hover: {\n            background: \"#0000ff\",\n            border: \"#000000\"\n          }\n        },\n        scaling: {\n          customScalingFunction: (min, max, total, value) => {\n            if (value !== undefined && total !== undefined) {\n              // Check if value is not undefined and total is not 0\n              return value / total;\n            }\n            return 0; // Return 0 if value is undefined or total is 0\n          },\n\n          min: 10,\n          max: 100 // Maximum node size, size will be calculated in getNodeOptions function\n        }\n      }\n    };\n  }\n  static #_ = this.ɵfac = function AppNetworkService_Factory(t) {\n    return new (t || AppNetworkService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppNetworkService,\n    factory: AppNetworkService.ɵfac\n  });\n}","map":{"version":3,"names":["AppNetworkService","getNetworkOptions","nodes","autoResize","height","width","physics","enabled","layout","hierarchical","sortMethod","direction","nodeSpacing","levelSeparation","shape","font","size","color","background","border","highlight","hover","scaling","customScalingFunction","min","max","total","value","undefined","_","_2","factory","ɵfac"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/services/network.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Network, DataSet, Options, Data, IdType, Edge } from 'vis';\nimport { Node } from '../models/network.model';\n\n@Injectable()\nexport class AppNetworkService {\n  public getNetworkOptions(nodes: DataSet<Node>): Options {\n    return {\n      autoResize: true,\n      height: \"600px\",\n      width: \"100%\",\n      physics: { enabled: true },\n      layout: {\n        hierarchical: {\n          enabled: true,\n          sortMethod: 'directed', // Use the directed sort method to position nodes according to edge directions\n          direction: 'UD', // Set the direction of the hierarchical layout to up-down\n          nodeSpacing: 150, // Increase the spacing between nodes\n          levelSeparation: 300 // Increase the separation between levels of the hierarchy\n        }\n      },\n      nodes: {\n        shape: 'dot', // Use dot shape for nodes\n        font: {\n          size: 20,\n          color: \"#ffffff\"\n        },\n        color: {\n          background: \"rgb(0, 22, 68)\",\n          border: \"#000000\", \n          highlight: {\n            background: \"#00ff00\", \n            border: \"#000000\" \n          },\n          hover: {\n            background: \"#0000ff\", \n            border: \"#000000\" \n          }\n        },\n        scaling: {\n          customScalingFunction: (min, max, total, value) => {\n            if (value !== undefined && total !== undefined) { // Check if value is not undefined and total is not 0\n              return value / total;\n            }\n            return 0; // Return 0 if value is undefined or total is 0\n          },\n          min: 10, // Minimum node size\n          max: 100 // Maximum node size, size will be calculated in getNodeOptions function\n        }\n      }\n    };\n  }\n}"],"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EACrBC,iBAAiBA,CAACC,KAAoB;IAC3C,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE,OAAO;MACfC,KAAK,EAAE,MAAM;MACbC,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAI,CAAE;MAC1BC,MAAM,EAAE;QACNC,YAAY,EAAE;UACZF,OAAO,EAAE,IAAI;UACbG,UAAU,EAAE,UAAU;UACtBC,SAAS,EAAE,IAAI;UACfC,WAAW,EAAE,GAAG;UAChBC,eAAe,EAAE,GAAG,CAAC;;OAExB;;MACDX,KAAK,EAAE;QACLY,KAAK,EAAE,KAAK;QACZC,IAAI,EAAE;UACJC,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE;SACR;QACDA,KAAK,EAAE;UACLC,UAAU,EAAE,gBAAgB;UAC5BC,MAAM,EAAE,SAAS;UACjBC,SAAS,EAAE;YACTF,UAAU,EAAE,SAAS;YACrBC,MAAM,EAAE;WACT;UACDE,KAAK,EAAE;YACLH,UAAU,EAAE,SAAS;YACrBC,MAAM,EAAE;;SAEX;QACDG,OAAO,EAAE;UACPC,qBAAqB,EAAEA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,KAAI;YAChD,IAAIA,KAAK,KAAKC,SAAS,IAAIF,KAAK,KAAKE,SAAS,EAAE;cAAE;cAChD,OAAOD,KAAK,GAAGD,KAAK;;YAEtB,OAAO,CAAC,CAAC,CAAC;UACZ,CAAC;;UACDF,GAAG,EAAE,EAAE;UACPC,GAAG,EAAE,GAAG,CAAC;;;KAGd;EACH;EAAC,QAAAI,CAAA,G;qBA9CU7B,iBAAiB;EAAA;EAAA,QAAA8B,EAAA,G;WAAjB9B,iBAAiB;IAAA+B,OAAA,EAAjB/B,iBAAiB,CAAAgC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_21_div_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r7);\n  }\n}\nfunction NetworksComponent_div_21_div_3_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r8);\n  }\n}\nfunction NetworksComponent_div_21_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, NetworksComponent_div_21_div_3_li_4_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, NetworksComponent_div_21_div_3_li_6_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const edge_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Common publications of \", ctx_r3.selectNode.nodes, \" and \", edge_r4, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.publicationsNode[edge_r4]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.publicationsNode[ctx_r3.selectNode.nodes]);\n  }\n}\nfunction NetworksComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_21_div_3_Template, 7, 4, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Selected node \", ctx_r1.selectNode.nodes, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectNode.edges);\n  }\n}\nfunction NetworksComponent_div_22_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r10);\n  }\n}\nfunction NetworksComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, NetworksComponent_div_22_li_6_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Selected edge \", ctx_r2.selectEdge.edge.from, \" from \", ctx_r2.selectEdge.edge.to, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r2.selectEdge.edge.from, \" and \", ctx_r2.selectEdge.edge.to, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.publications);\n  }\n}\nexport class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.minCluster = 0;\n    this.maxCluster = 0;\n    this.menuStatus = true;\n    this.publications = [];\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '750px';\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  updateCluster() {\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '750px';\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n  }\n  // Function to differentiate the selection of edges and nodes\n  onClick(params) {\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n  // Function so that common publications appear when clicking on an edge\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n    this.selectNode = null;\n  }\n  // Function so that common publications appear when clicking on an node\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n            var uniquePublicationsSet = new Set();\n            if (author.researcher === edge.to) {\n              var uniquePublications = [];\n              author.publications.forEach(publication => {\n                uniquePublicationsSet.add(publication);\n              });\n              var uniquePublications = Array.from(uniquePublicationsSet);\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.AppNetworkService), i0.ɵɵdirectiveInject(i2.AppNetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 23,\n    vars: 5,\n    consts: [[1, \"container\"], [1, \"container-network\"], [1, \"clusterNetwork\"], [\"fxLayoutGap\", \"10px\", 1, \"cluster\"], [\"for\", \"minCluster\"], [\"type\", \"number\", \"id\", \"minCluster\", \"name\", \"minCluster\", 1, \"minCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"maxCluster\"], [\"type\", \"number\", \"id\", \"maxCluster\", \"name\", \"maxCluster\", 1, \"maxCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"update\", 3, \"click\"], [1, \"network\"], [\"treeContainer\", \"\"], [1, \"select\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 2)(6, \"form\", 3)(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Min Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.appNetworkInitService.cluster.min = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Max Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.appNetworkInitService.cluster.max = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function NetworksComponent_Template_button_click_13_listener() {\n          return ctx.updateCluster();\n        });\n        i0.ɵɵtext(14, \"Update Network\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"div\", 9, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 11)(18, \"h1\");\n        i0.ɵɵtext(19, \"Selections\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"hr\");\n        i0.ɵɵtemplate(21, NetworksComponent_div_21_Template, 4, 2, \"div\", 12)(22, NetworksComponent_div_22_Template, 7, 5, \"div\", 12);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.nameAuthor, \" Collaboration Network\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.appNetworkInitService.cluster.min);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.appNetworkInitService.cluster.max);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectEdge && ctx.selectEdge.type === \"edge\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\".conteiner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.container-network[_ngcontent-%COMP%] {\\n  display: flex;\\n  margin-bottom: 50px;\\n}\\n\\n.clusterNetwork[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.minCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.maxCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.update[_ngcontent-%COMP%] {\\n  padding: 4px 10px;\\n  background-color: rgb(0, 22, 68);\\n  color: #ffffff;\\n  border: none;\\n  border-radius: 4px;\\n  margin-left: 10px;\\n}\\n\\n.update[_ngcontent-%COMP%]:hover {\\n  transform: scale(1.1);\\n  transition: transform 0.3s ease;\\n}\\n\\n.cluster[_ngcontent-%COMP%] {\\n  margin-top: 50px;\\n}\\n\\n.network[_ngcontent-%COMP%] {\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #e0e0e0;\\n  box-sizing: border-box;\\n  margin-top: 10px;\\n  margin-bottom: 50px;\\n  box-shadow: 0px 0px 5px 2px rgba(0, 22, 68, 0.3);\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 35px;\\n  margin-bottom: 0;\\n}\\n\\n.select[_ngcontent-%COMP%] {\\n  width: 300px;\\n  margin-top: 80px;\\n  margin-left: 30px;\\n  margin-right: 10px;\\n  margin-bottom: 50px;\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #f9f9f9;\\n  padding-left: 20px;\\n  padding-right: 20px;\\n  padding-bottom: 20px;\\n}\\n\\nhr[_ngcontent-%COMP%] {\\n  width: 50%;\\n  border-width: 1px;\\n  border-color: black;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsdUJBQUE7QUFDSjs7QUFFQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtBQUNKOztBQUVBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0FBQ0o7O0FBRUE7RUFDSSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGlCQUFBO0VBQ0EsZ0NBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7QUFDSjs7QUFFQTtFQUNJLHFCQUFBO0VBQ0EsK0JBQUE7QUFDSjs7QUFFQTtFQUNJLGdCQUFBO0FBQ0o7O0FBRUE7RUFDSSxnQ0FBQTtFQUNBLG1CQUFBO0VBQ0EseUJBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnREFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtFQUNBLGdDQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7RUFDQSxvQkFBQTtBQUNKOztBQUVBO0VBQ0ksVUFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZWluZXJ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLmNvbnRhaW5lci1uZXR3b3JrIHtcbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4IDtcbn1cblxuLmNsdXN0ZXJOZXR3b3JrIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5taW5DbHVzdGVye1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB3aWR0aDogNTBweDtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xufVxuXG4ubWF4Q2x1c3RlcntcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgd2lkdGg6IDUwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbn1cblxuLnVwZGF0ZXtcbiAgICBwYWRkaW5nOiA0cHggMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMjIsIDY4KTtcbiAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xufVxuXG4udXBkYXRlOmhvdmVyIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZTtcbiAgfVxuXG4uY2x1c3RlcntcbiAgICBtYXJnaW4tdG9wOiA1MHB4O1xufVxuXG4ubmV0d29yayB7XG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDIyLCA2OCk7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwOyBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCAycHggcmdiYSgwLCAyMiwgNjgsIDAuMyk7IFxufVxuXG5oMXtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAzNXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG59XG5cbi5zZWxlY3Qge1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAzMHB4OyBcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7IFxuICAgIG1hcmdpbi1ib3R0b206IDUwcHg7IFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJnYigwLCAyMiwgNjgpO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7IFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG59XG5cbmhye1xuICAgIHdpZHRoOiA1MCU7XG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7IFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XG59XG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","publication_r7","publication_r8","ɵɵtemplate","NetworksComponent_div_21_div_3_li_4_Template","NetworksComponent_div_21_div_3_li_6_Template","ɵɵtextInterpolate2","ctx_r3","selectNode","nodes","edge_r4","ɵɵproperty","publicationsNode","NetworksComponent_div_21_div_3_Template","ɵɵtextInterpolate1","ctx_r1","edges","publication_r10","NetworksComponent_div_22_li_6_Template","ctx_r2","selectEdge","edge","from","to","publications","NetworksComponent","constructor","appNetworkService","appNetworkInitService","minCluster","maxCluster","menuStatus","objectKeys","Object","keys","data","selectedData","ngOnInit","nameAuthor","selectedAuthors","networkOptions","getNetworkOptions","height","getNodes","getEdges","network","treeContainer","nativeElement","on","params","onSelect","onClick","ngOnDestroy","destroy","updateCluster","treeContainerPos","offsetTop","window","scrollTo","top","behavior","length","onClickEdge","edgeId","get","type","researcherName","nameAuthors","map","author","researcher","concat","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","forEach","push","uniquePublicationsSet","Set","uniquePublications","publication","add","Array","result","pointer","prevSelectNode","_","ɵɵdirectiveInject","i1","AppNetworkService","i2","AppNetworkInitService","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵelement","ɵɵlistener","NetworksComponent_Template_input_ngModelChange_9_listener","$event","cluster","min","NetworksComponent_Template_input_ngModelChange_12_listener","max","NetworksComponent_Template_button_click_13_listener","NetworksComponent_div_21_Template","NetworksComponent_div_22_Template"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.ts","/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n  nameAuthor: any;\n\n  minCluster = 0;\n  maxCluster = 0;\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  publications: any[] = [];\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    public appNetworkInitService: AppNetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n    \n\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '750px'; \n\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  updateCluster(): void {\n\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '750px'; \n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n\n  }\n\n  // Function to differentiate the selection of edges and nodes\n  private onClick(params: any): void {\n\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n\n  // Function so that common publications appear when clicking on an edge\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publications = [];\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      if (author.researcher === researcherName) {\n        this.publications = this.publications.concat(author.publications);\n      }\n      return author;\n    });\n    \n\n    this.selectNode = null;\n \n  }\n\n  // Function so that common publications appear when clicking on an node\n  private onSelect(params: any): void {\n\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n            var uniquePublicationsSet = new Set();\n\n            if (author.researcher === edge.to) {\n              var uniquePublications: any = []\n              author.publications.forEach((publication: any) => {\n                 uniquePublicationsSet.add(publication);\n              });\n\n              var uniquePublications: any = Array.from(uniquePublicationsSet);\n\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n\n          });\n\n        }\n\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n}\n\n","<div class=\"container\">\n\n  <!-- Title -->\n  <h1>{{nameAuthor}} Collaboration Network</h1>\n\n  <hr>\n\n  <!-- Container Network -->\n  <div class=\"container-network\">\n\n    <div class=\"clusterNetwork\">\n\n      <!-- Cluster settings -->\n      <form class=\"cluster\" fxLayoutGap=\"10px\">\n        <label for=\"minCluster\">Min Cluster:</label>\n        <input class=\"minCluster\" type=\"number\" id=\"minCluster\" name=\"minCluster\" [(ngModel)]=\"appNetworkInitService.cluster.min\">\n        \n        <label for=\"maxCluster\">Max Cluster:</label>\n        <input class=\"maxCluster\" type=\"number\" id=\"maxCluster\" name=\"maxCluster\" [(ngModel)]=\"appNetworkInitService.cluster.max\">\n        \n        <button class=\"update\" type=\"button\" (click)=\"updateCluster()\">Update Network</button>\n      </form>\n\n      <!-- Network -->\n      <div class=\"network\" #treeContainer></div>\n\n    </div>\n\n    <div class=\"select\">\n      <h1>Selections</h1> \n      <hr>\n      <!-- Selected node -->\n      <div *ngIf=\"selectNode\">\n        <h2>Selected node {{ selectNode.nodes }}</h2> \n        <div *ngFor=\"let edge of selectNode.edges\">\n          <div>Common publications of {{ selectNode.nodes }} and {{ edge }}:</div>\n          <ul>\n            <li *ngFor=\"let publication of publicationsNode[edge]\">{{ publication }}</li>\n          </ul>\n          <ul>\n            <li *ngFor=\"let publication of publicationsNode[selectNode.nodes]\">{{ publication }}</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Selected edge -->\n      <div *ngIf=\"selectEdge && selectEdge.type === 'edge'\">\n        <h2> Selected edge {{ selectEdge.edge.from }} from {{ selectEdge.edge.to }}</h2> \n        <div> Common publications of  {{ selectEdge.edge.from }} and {{ selectEdge.edge.to }}:</div>\n        <ul>\n          <li *ngFor=\"let publication of publications\">{{ publication }}</li>\n        </ul>\n      </div>\n      \n    </div>   \n  </div>\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
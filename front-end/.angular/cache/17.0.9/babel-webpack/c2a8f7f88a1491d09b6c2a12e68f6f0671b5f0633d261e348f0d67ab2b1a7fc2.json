{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nlet NetworksComponent = class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService, apiService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.apiService = apiService;\n    this.menuStatus = true;\n    this.publications = [];\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.nodeNo = 6;\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, this.appNetworkService.getNetworkOptions());\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClickEdge(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  onClickEdge(params) {\n    // Get the edge information\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n    // Update selectNode with edge information\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    // Filtrar los autores que coinciden con el investigador seleccionado\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      if (author.researcher === researcherName) {\n        this.publications += author.publications; // Añadir las publicaciones del autor\n      }\n\n      return author;\n    });\n    console.log(this.publications);\n  }\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      this.nodes.add({\n        id: this.nodeNo,\n        label: `Node ${this.nodeNo}`\n      });\n      this.edges.add({\n        from: params.nodes[0],\n        to: this.nodeNo\n      });\n      this.nodeNo++;\n      const result = {\n        edges: params.edges,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      const newEdges = this.edges.get().filter(value => {\n        return this.network.getSelectedEdges().some(val => val == value['id']);\n      }).map(value => {\n        return {\n          to: value['to'],\n          from: value['from']\n        };\n      });\n      const rootSelected = this.network.getSelectedNodes()[0];\n      let newNodes = this.nodes.get().filter(value => {\n        return newEdges.some(s => s.to == value.id);\n      });\n      if (!newNodes.some(value => value.id == rootSelected)) {\n        const self = this.nodes.get().find(val => val.id == rootSelected);\n        if (self !== undefined) {\n          newNodes.unshift(self);\n        }\n      } else {\n        const root = this.nodes.get()[0];\n        newNodes.unshift(root);\n      }\n      this.selectedData.next({\n        edges: newEdges,\n        nodes: newNodes\n      });\n    }\n  }\n};\n__decorate([ViewChild('menuDiv', {\n  static: true\n})], NetworksComponent.prototype, \"menuDiv\", void 0);\n__decorate([ViewChild('treeContainer', {\n  static: true\n})], NetworksComponent.prototype, \"treeContainer\", void 0);\nNetworksComponent = __decorate([Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})], NetworksComponent);\nexport { NetworksComponent };","map":{"version":3,"names":["Component","ViewChild","Network","DataSet","Subject","NetworksComponent","constructor","appNetworkService","appNetworkInitService","apiService","menuStatus","publications","data","nodes","edges","nodeNo","selectedData","ngOnInit","getNodes","getEdges","network","treeContainer","nativeElement","getNetworkOptions","on","params","onSelect","onClickEdge","ngOnDestroy","destroy","edgeId","edge","get","selectEdge","type","researcherName","to","nameAuthors","map","author","researcher","console","log","length","add","id","label","from","result","pointer","selectNode","prevSelectNode","newEdges","filter","value","getSelectedEdges","some","val","rootSelected","getSelectedNodes","newNodes","s","self","find","undefined","unshift","root","next","__decorate","static","selector","templateUrl","styleUrl"],"sources":["/home/miguel/Analizador_Redes_Colaboracion/interfaz/src/app/networks/networks.component.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\nimport { SelectedNodesDirective } from '../services/selected-nodes.directive';\nimport { ApiService } from '../services/api.service';\nimport { Chart } from 'chart.js';\nimport { InfoService } from '../services/info.service';\nimport { SpinnerService } from '../services/spinner.service';\nimport { HomeService } from '../services/home.service';\nimport { auth } from 'neo4j-driver';\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent  implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n\n  menuStatus: boolean = true;\n\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n\n  publications: string[] = [];\n\n  private data: any = {};\n\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n\n  public selectedData: Subject<Data>;\n\n  private network!: Network;\n\n  private nodeNo: number = 6;\n\n\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    private appNetworkInitService: AppNetworkInitService,\n    private apiService: ApiService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      this.appNetworkService.getNetworkOptions()\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClickEdge(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  private onClickEdge(params: any): void {\n    // Get the edge information\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publications = [];\n\n\n  \n    // Update selectNode with edge information\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to; \n\n    // Filtrar los autores que coinciden con el investigador seleccionado\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      if (author.researcher === researcherName) {\n        this.publications += author.publications; // Añadir las publicaciones del autor\n      }\n      return author;\n    });\n\n    console.log(this.publications)\n  }\n\n  private onSelect(params: any): void {\n    if (params.nodes.length == 1) {\n      this.nodes.add({\n        id: this.nodeNo,\n        label: `Node ${this.nodeNo}`,\n      });\n      this.edges.add({\n        from: params.nodes[0],\n        to: this.nodeNo,\n      });\n      this.nodeNo++;\n      const result = {\n        edges: params.edges,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n\n      const newEdges = this.edges\n        .get()\n        .filter((value) => {\n          return this.network\n            .getSelectedEdges()\n            .some((val) => val == value['id']);\n        })\n        .map((value) => {\n          return { to: value['to'], from: value['from'] };\n        });\n\n      const rootSelected: number = <number>this.network.getSelectedNodes()[0];\n\n      let newNodes = this.nodes.get().filter((value) => {\n        return newEdges.some((s) => s.to == value.id);\n      });\n      if (!newNodes.some((value) => value.id == rootSelected)) {\n        const self = this.nodes.get().find((val) => val.id == rootSelected);\n        if (self !== undefined) {\n            newNodes.unshift(self);\n        }\n      } else {\n        const root = this.nodes.get()[0];\n        newNodes.unshift(root);\n      }\n      this.selectedData.next({ edges: newEdges, nodes: newNodes });\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nlet NetworksComponent = class NetworksComponent {\n  constructor(appNetworkService, appNetworkInitService) {\n    this.appNetworkService = appNetworkService;\n    this.appNetworkInitService = appNetworkInitService;\n    this.minCluster = 0;\n    this.maxCluster = 0;\n    this.menuStatus = true;\n    this.number = false;\n    this.publicationsEdge = {};\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  updateCluster() {\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n  }\n  // Function to differentiate the selection of edges and nodes\n  onClick(params) {\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n  // Function so that common publications appear when clicking on an edge\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publicationsEdge = {};\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n      var uniquePublicationsSet = new Set();\n      if (isNaN(Number(author.researcher))) {\n        this.number = false;\n      } else {\n        this.number = true;\n      }\n      if (author.researcher === researcherName) {\n        author.publications.forEach(publication => {\n          uniquePublicationsSet.add(publication);\n        });\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;\n        } else {\n          this.number = true;\n        }\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;\n        } else {\n          this.number = true;\n        }\n        var uniquePublications = Array.from(uniquePublicationsSet);\n        this.publicationsEdge[author.researcher] = uniquePublications;\n        console.log(this.publicationsEdge[author.researcher]);\n      }\n      return author;\n    });\n    this.selectNode = null;\n  }\n  // Function so that common publications appear when clicking on an node\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map(author => {\n            var uniquePublicationsSet = new Set();\n            console.log(this.number);\n            if (author.researcher === edge.to) {\n              var uniquePublications = [];\n              author.publications.forEach(publication => {\n                uniquePublicationsSet.add(publication);\n              });\n              if (isNaN(Number(author.researcher))) {\n                this.number = false;\n              } else {\n                this.number = true;\n              }\n              var uniquePublications = Array.from(uniquePublicationsSet);\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  esStringNumero(str) {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n};\n__decorate([ViewChild('menuDiv', {\n  static: true\n})], NetworksComponent.prototype, \"menuDiv\", void 0);\n__decorate([ViewChild('treeContainer', {\n  static: true\n})], NetworksComponent.prototype, \"treeContainer\", void 0);\nNetworksComponent = __decorate([Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})], NetworksComponent);\nexport { NetworksComponent };","map":{"version":3,"names":["Component","ViewChild","Network","DataSet","Subject","NetworksComponent","constructor","appNetworkService","appNetworkInitService","minCluster","maxCluster","menuStatus","number","publicationsEdge","publicationsNode","objectKeys","Object","keys","data","nodes","edges","selectedData","ngOnInit","nameAuthor","selectedAuthors","networkOptions","getNetworkOptions","height","getNodes","getEdges","network","treeContainer","nativeElement","on","params","onSelect","onClick","ngOnDestroy","destroy","updateCluster","treeContainerPos","offsetTop","window","scrollTo","top","behavior","length","onClickEdge","edgeId","edge","get","selectEdge","type","researcherName","to","nameAuthors","map","author","uniquePublicationsSet","Set","isNaN","Number","researcher","publications","forEach","publication","add","uniquePublications","Array","from","console","log","selectNode","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","push","result","pointer","prevSelectNode","esStringNumero","str","__decorate","static","selector","templateUrl","styleUrl"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { AppNetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { AppNetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n  nameAuthor: any;\n\n  minCluster = 0;\n  maxCluster = 0;\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  number = false;\n  publicationsEdge: { [key: string]: string[] } = {};\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private appNetworkService: AppNetworkService,\n    public appNetworkInitService: AppNetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nameAuthor = this.appNetworkInitService.selectedAuthors;\n    \n\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  updateCluster(): void {\n\n    const networkOptions = this.appNetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n    this.nodes = this.appNetworkInitService.getNodes();\n    this.edges = this.appNetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n\n  }\n\n  // Function to differentiate the selection of edges and nodes\n  private onClick(params: any): void {\n\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n\n  // Function so that common publications appear when clicking on an edge\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publicationsEdge = {};\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n      \n      var uniquePublicationsSet = new Set();\n\n      if(isNaN(Number(author.researcher))){\n        this.number = false;\n      } else{\n        this.number = true;\n      }\n\n      if (author.researcher === researcherName) {\n\n        author.publications.forEach((publication: any) => {\n          uniquePublicationsSet.add(publication);\n        });\n\n        if(isNaN(Number(author.researcher))){\n          this.number = false;\n        } \n        else{\n          this.number = true;\n        }\n\n        if(isNaN(Number(author.researcher))){\n          this.number = false;\n        } else{\n          this.number = true;\n        }\n\n        var uniquePublications: any = Array.from(uniquePublicationsSet);\n\n        this.publicationsEdge[author.researcher] = uniquePublications;\n        console.log(this.publicationsEdge[author.researcher])\n      }\n      return author;\n    });\n    \n\n    this.selectNode = null;\n \n  }\n\n  // Function so that common publications appear when clicking on an node\n  private onSelect(params: any): void {\n\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n   \n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          this.appNetworkInitService.nameAuthors = this.appNetworkInitService.nameAuthors.map((author: any) => {\n            var uniquePublicationsSet = new Set();\n\n            console.log(this.number)\n            if (author.researcher === edge.to) {\n              var uniquePublications: any = []\n              author.publications.forEach((publication: any) => {\n                 uniquePublicationsSet.add(publication);\n              });\n\n              if(isNaN(Number(author.researcher))){\n                this.number = false;\n              } else{\n                this.number = true;\n              }\n\n              var uniquePublications: any = Array.from(uniquePublicationsSet);\n\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n\n          });\n\n        }\n\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n      };\n\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n\n   esStringNumero(str: any): boolean {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Network, DataSet } from 'vis';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/network.service\";\nimport * as i2 from \"../services/network.init.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"menuDiv\"];\nconst _c1 = [\"treeContainer\"];\nfunction NetworksComponent_div_24_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"Common publications of \", ctx_r5.selectNode.nodes, \" and \", node_r4, \":\");\n  }\n}\nfunction NetworksComponent_div_24_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"These authors have \", ctx_r6.selectNode.nodes, \" publications in common with \", node_r4, \":\");\n  }\n}\nfunction NetworksComponent_div_24_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r7.selectNode.nodes, \" - \", node_r4, \":\");\n  }\n}\nfunction NetworksComponent_div_24_div_3_ul_4_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r14);\n  }\n}\nfunction NetworksComponent_div_24_div_3_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_24_div_3_ul_4_li_1_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.publicationsNode[ctx_r8.selectNode.nodes]);\n  }\n}\nfunction NetworksComponent_div_24_div_3_ul_5_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r16);\n  }\n}\nfunction NetworksComponent_div_24_div_3_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_24_div_3_ul_5_li_1_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.publicationsNode[node_r4]);\n  }\n}\nfunction NetworksComponent_div_24_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NetworksComponent_div_24_div_3_div_1_Template, 2, 2, \"div\", 12)(2, NetworksComponent_div_24_div_3_div_2_Template, 2, 2, \"div\", 12)(3, NetworksComponent_div_24_div_3_div_3_Template, 2, 2, \"div\", 12)(4, NetworksComponent_div_24_div_3_ul_4_Template, 2, 1, \"ul\", 12)(5, NetworksComponent_div_24_div_3_ul_5_Template, 2, 1, \"ul\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.number && ctx_r3.selectNode.nodes != ctx_r3.NetworkInitService.selectedAuthors[0]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.number && ctx_r3.selectNode.nodes != ctx_r3.NetworkInitService.selectedAuthors[0]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.selectNode.nodes == ctx_r3.NetworkInitService.selectedAuthors[0]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.selectNode.nodes != ctx_r3.NetworkInitService.selectedAuthors[0]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.selectNode.nodes == ctx_r3.NetworkInitService.selectedAuthors[0]);\n  }\n}\nfunction NetworksComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_24_div_3_Template, 6, 5, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Selected node \", ctx_r1.selectNode.nodes, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectNode.edges);\n  }\n}\nfunction NetworksComponent_div_25_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Common publications of \", ctx_r18.selectEdge.edge.from, \" and \", ctx_r18.selectEdge.edge.to, \":\");\n  }\n}\nfunction NetworksComponent_div_25_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"These authors have \", ctx_r19.selectEdge.edge.to, \" publications in common with \", ctx_r19.selectEdge.edge.from, \":\");\n  }\n}\nfunction NetworksComponent_div_25_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const publication_r21 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(publication_r21);\n  }\n}\nfunction NetworksComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, NetworksComponent_div_25_div_3_Template, 2, 2, \"div\", 12)(4, NetworksComponent_div_25_div_4_Template, 2, 2, \"div\", 12);\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, NetworksComponent_div_25_li_6_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Selected edge \", ctx_r2.selectEdge.edge.from, \" from \", ctx_r2.selectEdge.edge.to, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.number);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.number);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.publicationsEdge[ctx_r2.selectEdge.edge.to]);\n  }\n}\nexport class NetworksComponent {\n  constructor(NetworkService, NetworkInitService) {\n    this.NetworkService = NetworkService;\n    this.NetworkInitService = NetworkInitService;\n    this.minCluster = 0;\n    this.maxCluster = 0;\n    this.showCluster = true;\n    this.menuStatus = true;\n    this.number = false;\n    this.publicationsEdge = {};\n    this.publicationsNode = {};\n    this.objectKeys = Object.keys;\n    this.data = {};\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.selectedData = new Subject();\n  }\n  ngOnInit() {\n    this.nameAuthor = this.NetworkInitService.selectedAuthors;\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n  }\n  ngOnDestroy() {\n    if (this.network != null) this.network.destroy();\n  }\n  updateCluster() {\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px';\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges\n    };\n    this.network = new Network(this.treeContainer.nativeElement, this.data, networkOptions);\n    this.network.on('select', params => this.onSelect(params));\n    this.network.on('click', params => this.onClick(params));\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n  }\n  // Function to differentiate the selection of edges and nodes\n  onClick(params) {\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n  // Function so that common publications appear when clicking on an edge\n  onClickEdge(params) {\n    const edgeId = params.edges[0];\n    const edge = this.edges.get(edgeId);\n    this.publicationsEdge = {};\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n    const researcherName = this.selectEdge.edge.to;\n    this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map(author => {\n      if (author.researcher == researcherName) {\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;\n        } else {\n          this.number = true;\n        }\n        var uniquePublicationsSet = new Set();\n        var uniquePublications = [];\n        author.publications.forEach(publication => {\n          uniquePublicationsSet.add(publication);\n        });\n        uniquePublications = Array.from(uniquePublicationsSet);\n        this.publicationsEdge[author.researcher] = uniquePublications;\n      }\n      return author;\n    });\n    this.selectNode = null;\n  }\n  // Function so that common publications appear when clicking on an node\n  onSelect(params) {\n    if (params.nodes.length == 1) {\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes = [];\n      this.publicationsNode = {};\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n          this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map(author => {\n            if (author.researcher == edge.to) {\n              if (isNaN(Number(author.researcher)) || selectedNodeId == this.NetworkInitService.selectedAuthors[0]) {\n                this.number = false;\n              } else {\n                this.number = true;\n              }\n              var uniquePublicationsSet = new Set();\n              var uniquePublications = [];\n              author.publications.forEach(publication => {\n                uniquePublicationsSet.add(publication);\n              });\n              uniquePublications = Array.from(uniquePublicationsSet);\n              this.publicationsNode[author.researcher] = uniquePublications;\n            }\n            return author;\n          });\n        }\n      });\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n        select: this.number\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n  esStringNumero(str) {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n  static #_ = this.ɵfac = function NetworksComponent_Factory(t) {\n    return new (t || NetworksComponent)(i0.ɵɵdirectiveInject(i1.NetworkService), i0.ɵɵdirectiveInject(i2.NetworkInitService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworksComponent,\n    selectors: [[\"app-networks\"]],\n    viewQuery: function NetworksComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuDiv = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 6,\n    consts: [[1, \"container-network\"], [\"fxLayoutGap\", \"10px\", 1, \"cluster\"], [\"for\", \"minCluster\"], [\"type\", \"number\", \"id\", \"minCluster\", \"name\", \"minCluster\", 1, \"minCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"maxCluster\"], [\"type\", \"number\", \"id\", \"maxCluster\", \"name\", \"maxCluster\", 1, \"maxCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"showCluster\"], [\"type\", \"checkbox\", \"id\", \"showCluster\", \"name\", \"showCluster\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"update\", 3, \"click\"], [1, \"network\"], [\"treeContainer\", \"\"], [1, \"select\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function NetworksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"div\")(6, \"form\", 1)(7, \"label\", 2);\n        i0.ɵɵtext(8, \"Min Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.NetworkInitService.cluster.min = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 4);\n        i0.ɵɵtext(11, \"Max Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.NetworkInitService.cluster.max = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"label\", 6);\n        i0.ɵɵtext(14, \"Show Cluster:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworksComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.NetworkInitService.showCluster = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function NetworksComponent_Template_button_click_16_listener() {\n          return ctx.updateCluster();\n        });\n        i0.ɵɵtext(17, \"Update Network\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(18, \"div\", 9, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 11)(21, \"h1\");\n        i0.ɵɵtext(22, \"Selections\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"hr\");\n        i0.ɵɵtemplate(24, NetworksComponent_div_24_Template, 4, 2, \"div\", 12)(25, NetworksComponent_div_25_Template, 7, 5, \"div\", 12);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.nameAuthor, \" Collaboration Network\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.NetworkInitService.cluster.min);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.NetworkInitService.cluster.max);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.NetworkInitService.showCluster);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectEdge && ctx.selectEdge.type === \"edge\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\".container-network[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  margin-bottom: 50px;\\n}\\n\\n.select[_ngcontent-%COMP%] {\\n  width: 280px;\\n  margin-top: 80px;\\n  margin-left: 20px;\\n  margin-right: 10px;\\n  margin-bottom: 50px;\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #f9f9f9;\\n  padding-left: 20px;\\n  padding-right: 20px;\\n  padding-bottom: 20px;\\n}\\n\\n.network[_ngcontent-%COMP%] {\\n  min-width: 100px;\\n  border: 2px solid rgb(0, 22, 68);\\n  border-radius: 10px;\\n  background-color: #e0e0e0;\\n  box-sizing: border-box;\\n  margin-top: 10px;\\n  margin-bottom: 50px;\\n  box-shadow: 0px 0px 5px 2px rgba(0, 22, 68, 0.3);\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 35px;\\n  margin-bottom: 0;\\n}\\n\\n.minCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.maxCluster[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  width: 50px;\\n  margin-left: 5px;\\n}\\n\\n.update[_ngcontent-%COMP%] {\\n  padding: 4px 10px;\\n  background-color: rgb(0, 22, 68);\\n  color: #ffffff;\\n  border: none;\\n  border-radius: 4px;\\n  margin-left: 10px;\\n}\\n\\n.update[_ngcontent-%COMP%]:hover {\\n  transform: scale(1.1);\\n  transition: transform 0.3s ease;\\n}\\n\\n.cluster[_ngcontent-%COMP%] {\\n  margin-top: 50px;\\n}\\n\\nhr[_ngcontent-%COMP%] {\\n  width: 50%;\\n  border-width: 1px;\\n  border-color: black;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV0d29ya3MvbmV0d29ya3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtBQUFKOztBQUdBO0VBQ0ksWUFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0NBQUE7RUFDQSxtQkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtFQUNBLG9CQUFBO0FBQUo7O0FBR0E7RUFDSSxnQkFBQTtFQUNBLGdDQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLHNCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGdEQUFBO0FBQUo7O0FBSUE7RUFDSSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtBQURKOztBQUlBO0VBQ0ksa0JBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFESjs7QUFJQTtFQUNJLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLGdCQUFBO0FBREo7O0FBSUE7RUFDSSxpQkFBQTtFQUNBLGdDQUFBO0VBQ0EsY0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0FBREo7O0FBSUE7RUFDSSxxQkFBQTtFQUNBLCtCQUFBO0FBREo7O0FBSUE7RUFDSSxnQkFBQTtBQURKOztBQU9BO0VBQ0ksVUFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUFKSiIsInNvdXJjZXNDb250ZW50IjpbIlxuLmNvbnRhaW5lci1uZXR3b3JrIHtcbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIG1hcmdpbi1ib3R0b206IDUwcHggO1xufVxuXG4uc2VsZWN0IHtcbiAgICB3aWR0aDogMjgwcHg7XG4gICAgbWFyZ2luLXRvcDogODBweDtcbiAgICBtYXJnaW4tbGVmdDogMjBweDsgXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyBcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4OyBcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMjIsIDY4KTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4OyBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xuICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xufVxuXG4ubmV0d29yayB7XG4gICAgbWluLXdpZHRoOiAxMDBweDtcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMjIsIDY4KTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7IFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggNXB4IDJweCByZ2JhKDAsIDIyLCA2OCwgMC4zKTsgXG59XG5cblxuaDF7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMzVweDtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4ubWluQ2x1c3RlcntcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgd2lkdGg6IDUwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbn1cblxuLm1heENsdXN0ZXJ7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIHdpZHRoOiA1MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG59XG5cbi51cGRhdGV7XG4gICAgcGFkZGluZzogNHB4IDEwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsIDIyLCA2OCk7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbn1cblxuLnVwZGF0ZTpob3ZlciB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2U7XG4gIH1cblxuLmNsdXN0ZXJ7XG4gICAgbWFyZ2luLXRvcDogNTBweDtcbn1cblxuXG5cblxuaHJ7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBib3JkZXItd2lkdGg6IDFweDsgXG4gICAgYm9yZGVyLWNvbG9yOiBibGFjaztcbn1cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["Network","DataSet","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","ctx_r5","selectNode","nodes","node_r4","ctx_r6","ctx_r7","ɵɵtextInterpolate","publication_r14","ɵɵtemplate","NetworksComponent_div_24_div_3_ul_4_li_1_Template","ɵɵproperty","ctx_r8","publicationsNode","publication_r16","NetworksComponent_div_24_div_3_ul_5_li_1_Template","ctx_r9","NetworksComponent_div_24_div_3_div_1_Template","NetworksComponent_div_24_div_3_div_2_Template","NetworksComponent_div_24_div_3_div_3_Template","NetworksComponent_div_24_div_3_ul_4_Template","NetworksComponent_div_24_div_3_ul_5_Template","ctx_r3","number","NetworkInitService","selectedAuthors","NetworksComponent_div_24_div_3_Template","ɵɵtextInterpolate1","ctx_r1","edges","ctx_r18","selectEdge","edge","from","to","ctx_r19","publication_r21","NetworksComponent_div_25_div_3_Template","NetworksComponent_div_25_div_4_Template","NetworksComponent_div_25_li_6_Template","ctx_r2","publicationsEdge","NetworksComponent","constructor","NetworkService","minCluster","maxCluster","showCluster","menuStatus","objectKeys","Object","keys","data","selectedData","ngOnInit","nameAuthor","networkOptions","getNetworkOptions","height","getNodes","getEdges","network","treeContainer","nativeElement","on","params","onSelect","onClick","ngOnDestroy","destroy","updateCluster","treeContainerPos","offsetTop","window","scrollTo","top","behavior","length","onClickEdge","edgeId","get","type","researcherName","nameAuthors","map","author","researcher","isNaN","Number","uniquePublicationsSet","Set","uniquePublications","publications","forEach","publication","add","Array","selectedNodeId","connectedEdges","getConnectedEdges","connectedNodes","push","result","pointer","select","prevSelectNode","esStringNumero","str","_","ɵɵdirectiveInject","i1","i2","_2","selectors","viewQuery","NetworksComponent_Query","rf","ctx","ɵɵelement","ɵɵlistener","NetworksComponent_Template_input_ngModelChange_9_listener","$event","cluster","min","NetworksComponent_Template_input_ngModelChange_12_listener","max","NetworksComponent_Template_input_ngModelChange_15_listener","NetworksComponent_Template_button_click_16_listener","NetworksComponent_div_24_Template","NetworksComponent_div_25_Template"],"sources":["/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.ts","/home/miguel/Collaboration_Networks/front-end/src/app/networks/networks.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { Network, DataSet, Data, Edge } from 'vis';\nimport { NetworkService } from '../services/network.service';\nimport { Subject } from 'rxjs';\nimport { NetworkInitService } from '../services/network.init.service';\nimport { Node } from '../models/network.model'\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrl: './networks.component.scss'\n})\nexport class NetworksComponent implements OnInit, OnDestroy {\n\n  @ViewChild('menuDiv', { static: true })\n  menuDiv!: ElementRef;\n\n  @ViewChild('treeContainer', { static: true })\n  treeContainer!: ElementRef;\n  nameAuthor: any;\n\n  minCluster = 0;\n  maxCluster = 0;\n  showCluster = true;\n  menuStatus: boolean = true;\n  selectNode: any;\n  selectEdge: any;\n  prevSelectNode: any;\n  number = false;\n  publicationsEdge: { [key: string]: string[] } = {};\n  publicationsNode: { [key: string]: string[] } = {};\n  objectKeys = Object.keys;\n\n  private data: any = {};\n  private nodes: DataSet<Node> = new DataSet<Node>();\n  private edges: DataSet<Edge> = new DataSet<Edge>();\n  public selectedData: Subject<Data>;\n  private network!: Network;\n\n  constructor(\n    private NetworkService: NetworkService,\n    public NetworkInitService: NetworkInitService,\n  ) {\n    this.selectedData = new Subject<Data>();\n  }\n\n  public ngOnInit(): void {\n\n    this.nameAuthor = this.NetworkInitService.selectedAuthors;\n    \n\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n  }\n\n  public ngOnDestroy(): void {\n    if (this.network != null) this.network.destroy();\n  }\n\n  updateCluster(): void {\n\n    const networkOptions = this.NetworkService.getNetworkOptions();\n    networkOptions.height = '800px'; \n\n    this.nodes = this.NetworkInitService.getNodes();\n    this.edges = this.NetworkInitService.getEdges();\n    this.data = {\n      nodes: this.nodes,\n      edges: this.edges,\n    };\n\n    this.network = new Network(\n      this.treeContainer.nativeElement,\n      this.data,\n      networkOptions\n    );\n\n\n    this.network.on('select', (params) => this.onSelect(params));\n    this.network.on('click', (params) => this.onClick(params));\n\n    // Obtener la posición del contenedor de red\n    const treeContainerPos = this.treeContainer.nativeElement.offsetTop;\n\n    // Hacer que la ventana del navegador se desplace hacia la posición del contenedor de red\n    window.scrollTo({\n      top: treeContainerPos,\n      behavior: 'auto' // Desplazamiento suave\n    });\n  }\n\n  // Function to differentiate the selection of edges and nodes\n  private onClick(params: any): void {\n\n    if (params.nodes.length < 1) {\n      if (params.edges.length > 0) {\n        this.onClickEdge(params);\n      }\n    }\n  }\n\n  // Function so that common publications appear when clicking on an edge\n  private onClickEdge(params: any): void {\n\n    const edgeId = params.edges[0];\n\n    const edge = this.edges.get(edgeId);\n\n    this.publicationsEdge = {};\n\n    this.selectEdge = {\n      edge: edge,\n      type: 'edge'\n    };\n\n    const researcherName = this.selectEdge.edge.to;\n\n    this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map((author: any) => {\n\n      if (author.researcher == researcherName) {\n\n        if (isNaN(Number(author.researcher))) {\n          this.number = false;      \n        } else {\n          this.number = true;  \n        }\n\n        var uniquePublicationsSet = new Set();\n        var uniquePublications: any = []\n        \n        author.publications.forEach((publication: any) => {\n            uniquePublicationsSet.add(publication);\n        });   \n\n        uniquePublications = Array.from(uniquePublicationsSet);\n        this.publicationsEdge[author.researcher] = uniquePublications;\n        \n      }\n      return author;\n\n    });\n    \n    this.selectNode = null;\n  }\n\n  // Function so that common publications appear when clicking on an node\n  private onSelect(params: any): void {\n\n    if (params.nodes.length == 1) {\n\n      const selectedNodeId = params.nodes[0];\n      const connectedEdges = this.network.getConnectedEdges(selectedNodeId);\n      const connectedNodes: any[] = [];\n      this.publicationsNode = {};\n\n      connectedEdges.forEach(edgeId => {\n        const edge = this.edges.get(edgeId);\n\n        if (edge) {\n          if (edge.to == params.nodes) {\n            connectedNodes.push(edge.from);\n          } else {\n            connectedNodes.push(edge.to);\n          }\n\n          this.NetworkInitService.nameAuthors = this.NetworkInitService.nameAuthors.map((author: any) => {\n\n            if (author.researcher == edge.to) {\n\n              if(isNaN(Number(author.researcher)) || (selectedNodeId == this.NetworkInitService.selectedAuthors[0])){\n                this.number = false;\n              } else{\n                this.number = true;\n              }\n\n              var uniquePublicationsSet = new Set();\n              var uniquePublications: any = []\n              \n              author.publications.forEach((publication: any) => {\n                  uniquePublicationsSet.add(publication);\n              });   \n\n              uniquePublications = Array.from(uniquePublicationsSet);\n              this.publicationsNode[author.researcher] = uniquePublications;\n     \n            }\n            return author;\n          });\n        }\n      });\n\n      const result = {\n        edges: connectedNodes,\n        nodes: params.nodes,\n        pointer: params.pointer,\n        select: this.number\n      };\n      if (this.selectNode) {\n        this.prevSelectNode = this.selectNode;\n      }\n\n      this.selectNode = result;\n      this.selectEdge = null;\n    }\n  }\n\n   esStringNumero(str: any): boolean {\n    // Verificar si es un string y si el contenido es un número\n    return !isNaN(Number(str));\n  }\n}\n\n","<div>\n\n  <!-- Title -->\n  <h1>{{nameAuthor}} Collaboration Network</h1>\n\n  <hr>\n\n  <!-- Container Network -->\n  <div class=\"container-network\">\n\n    <div>\n\n      <!-- Cluster settings -->\n      <form class=\"cluster\" fxLayoutGap=\"10px\">\n        <label for=\"minCluster\">Min Cluster:</label>\n        <input class=\"minCluster\" type=\"number\" id=\"minCluster\" name=\"minCluster\" [(ngModel)]=\"NetworkInitService.cluster.min\">\n        \n        <label for=\"maxCluster\">Max Cluster:</label>\n        <input class=\"maxCluster\" type=\"number\" id=\"maxCluster\" name=\"maxCluster\" [(ngModel)]=\"NetworkInitService.cluster.max\">\n        \n        <label for=\"showCluster\">Show Cluster:</label>\n        <input type=\"checkbox\" id=\"showCluster\" name=\"showCluster\" [(ngModel)]=\"NetworkInitService.showCluster\">\n        \n        <button class=\"update\" type=\"button\" (click)=\"updateCluster()\">Update Network</button>\n      </form>\n\n      <!-- Network -->\n      <div class=\"network\" #treeContainer></div>\n\n    </div>\n\n    <div class=\"select\">\n      <h1>Selections</h1> \n      <hr>\n      <!-- Selected node -->\n      <div *ngIf=\"selectNode\">\n        <h2>Selected node {{ selectNode.nodes }}</h2> \n        <div *ngFor=\"let node of selectNode.edges\">\n          <div *ngIf=\"!number && selectNode.nodes != NetworkInitService.selectedAuthors[0]\">Common publications of {{ selectNode.nodes }} and {{ node }}:</div>\n          <div *ngIf=\"number && selectNode.nodes != NetworkInitService.selectedAuthors[0]\" >These authors have {{ selectNode.nodes }} publications in common with {{ node }}:</div>\n          <div *ngIf=\"selectNode.nodes == NetworkInitService.selectedAuthors[0]\" >{{ selectNode.nodes }} - {{ node }}:</div>\n          <ul *ngIf=\"selectNode.nodes != NetworkInitService.selectedAuthors[0]\">\n            <li *ngFor=\"let publication of publicationsNode[selectNode.nodes]\">{{ publication }}</li>\n          </ul>\n          <ul *ngIf=\"selectNode.nodes == NetworkInitService.selectedAuthors[0]\">\n            <li *ngFor=\"let publication of publicationsNode[node]\">{{ publication }}</li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- Selected edge -->\n      <div *ngIf=\"selectEdge && selectEdge.type === 'edge'\">\n        <h2> Selected edge {{ selectEdge.edge.from }} from {{ selectEdge.edge.to }}</h2> \n        <div *ngIf=\"!number\" > Common publications of  {{ selectEdge.edge.from }} and {{ selectEdge.edge.to }}:</div>\n        <div *ngIf=\"number\" >These authors have {{ selectEdge.edge.to }} publications in common with {{  selectEdge.edge.from }}:</div>\n        <ul>\n          <li *ngFor=\"let publication of  publicationsEdge[selectEdge.edge.to]\">{{ publication }}</li>\n        </ul>\n      </div>\n      \n    </div>   \n  </div>\n\n</div>  \n \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}